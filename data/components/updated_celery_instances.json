[
  {
    "repo": "celery/celery",
    "pull_number": 8489,
    "instance_id": "celery__celery-8489",
    "issue_numbers": [
      "6608"
    ],
    "base_commit": "b6a5bdb8b698dbe2a0848e34f76133f2950c5a82",
    "patch": "diff --git a/celery/bin/control.py b/celery/bin/control.py\nindex f7bba96ddf0..38a917ea0f2 100644\n--- a/celery/bin/control.py\n+++ b/celery/bin/control.py\n@@ -1,5 +1,6 @@\n \"\"\"The ``celery control``, ``. inspect`` and ``. status`` programs.\"\"\"\n from functools import partial\n+from typing import Literal\n \n import click\n from kombu.utils.json import dumps\n@@ -39,18 +40,69 @@ def _consume_arguments(meta, method, args):\n         args[:] = args[i:]\n \n \n-def _compile_arguments(action, args):\n-    meta = Panel.meta[action]\n+def _compile_arguments(command, args):\n+    meta = Panel.meta[command]\n     arguments = {}\n     if meta.args:\n         arguments.update({\n-            k: v for k, v in _consume_arguments(meta, action, args)\n+            k: v for k, v in _consume_arguments(meta, command, args)\n         })\n     if meta.variadic:\n         arguments.update({meta.variadic: args})\n     return arguments\n \n \n+_RemoteControlType = Literal['inspect', 'control']\n+\n+\n+def _verify_command_name(type_: _RemoteControlType, command: str) -> None:\n+    choices = _get_commands_of_type(type_)\n+\n+    if command not in choices:\n+        command_listing = \", \".join(choices)\n+        raise click.UsageError(\n+            message=f'Command {command} not recognized. Available {type_} commands: {command_listing}',\n+        )\n+\n+\n+def _list_option(type_: _RemoteControlType):\n+    def callback(ctx: click.Context, param, value) -> None:\n+        if not value:\n+            return\n+        choices = _get_commands_of_type(type_)\n+\n+        formatter = click.HelpFormatter()\n+\n+        with formatter.section(f'{type_.capitalize()} Commands'):\n+            command_list = []\n+            for command_name, info in choices.items():\n+                if info.signature:\n+                    command_preview = f'{command_name} {info.signature}'\n+                else:\n+                    command_preview = command_name\n+                command_list.append((command_preview, info.help))\n+            formatter.write_dl(command_list)\n+        ctx.obj.echo(formatter.getvalue(), nl=False)\n+        ctx.exit()\n+\n+    return click.option(\n+        '--list',\n+        is_flag=True,\n+        help=f'List available {type_} commands and exit.',\n+        expose_value=False,\n+        is_eager=True,\n+        callback=callback,\n+    )\n+\n+\n+def _get_commands_of_type(type_: _RemoteControlType) -> dict:\n+    command_name_info_pairs = [\n+        (name, info) for name, info in Panel.meta.items()\n+        if info.type == type_ and info.visible\n+    ]\n+    return dict(sorted(command_name_info_pairs))\n+\n+\n @click.command(cls=CeleryCommand)\n @click.option('-t',\n               '--timeout',\n@@ -96,10 +148,8 @@ def status(ctx, timeout, destination, json, **kwargs):\n \n @click.command(cls=CeleryCommand,\n                context_settings={'allow_extra_args': True})\n-@click.argument(\"action\", type=click.Choice([\n-    name for name, info in Panel.meta.items()\n-    if info.type == 'inspect' and info.visible\n-]))\n+@click.argument('command')\n+@_list_option('inspect')\n @click.option('-t',\n               '--timeout',\n               cls=CeleryOption,\n@@ -121,19 +171,19 @@ def status(ctx, timeout, destination, json, **kwargs):\n               help='Use json as output format.')\n @click.pass_context\n @handle_preload_options\n-def inspect(ctx, action, timeout, destination, json, **kwargs):\n-    \"\"\"Inspect the worker at runtime.\n+def inspect(ctx, command, timeout, destination, json, **kwargs):\n+    \"\"\"Inspect the workers by sending them the COMMAND inspect command.\n \n     Availability: RabbitMQ (AMQP) and Redis transports.\n     \"\"\"\n+    _verify_command_name('inspect', command)\n     callback = None if json else partial(_say_remote_command_reply, ctx,\n                                          show_reply=True)\n-    arguments = _compile_arguments(action, ctx.args)\n+    arguments = _compile_arguments(command, ctx.args)\n     inspect = ctx.obj.app.control.inspect(timeout=timeout,\n                                           destination=destination,\n                                           callback=callback)\n-    replies = inspect._request(action,\n-                               **arguments)\n+    replies = inspect._request(command, **arguments)\n \n     if not replies:\n         raise CeleryCommandException(\n@@ -153,10 +203,8 @@ def inspect(ctx, action, timeout, destination, json, **kwargs):\n \n @click.command(cls=CeleryCommand,\n                context_settings={'allow_extra_args': True})\n-@click.argument(\"action\", type=click.Choice([\n-    name for name, info in Panel.meta.items()\n-    if info.type == 'control' and info.visible\n-]))\n+@click.argument('command')\n+@_list_option('control')\n @click.option('-t',\n               '--timeout',\n               cls=CeleryOption,\n@@ -178,16 +226,17 @@ def inspect(ctx, action, timeout, destination, json, **kwargs):\n               help='Use json as output format.')\n @click.pass_context\n @handle_preload_options\n-def control(ctx, action, timeout, destination, json):\n-    \"\"\"Workers remote control.\n+def control(ctx, command, timeout, destination, json):\n+    \"\"\"Send the COMMAND control command to the workers.\n \n     Availability: RabbitMQ (AMQP), Redis, and MongoDB transports.\n     \"\"\"\n+    _verify_command_name('control', command)\n     callback = None if json else partial(_say_remote_command_reply, ctx,\n                                          show_reply=True)\n     args = ctx.args\n-    arguments = _compile_arguments(action, args)\n-    replies = ctx.obj.app.control.broadcast(action, timeout=timeout,\n+    arguments = _compile_arguments(command, args)\n+    replies = ctx.obj.app.control.broadcast(command, timeout=timeout,\n                                             destination=destination,\n                                             callback=callback,\n                                             reply=True,\ndiff --git a/t/unit/bin/proj/app_with_custom_cmds.py b/t/unit/bin/proj/app_with_custom_cmds.py\nnew file mode 100644\nindex 00000000000..db96b99e700\n--- /dev/null\n+++ b/t/unit/bin/proj/app_with_custom_cmds.py\n@@ -0,0 +1,24 @@\n+from celery import Celery\n+from celery.worker.control import control_command, inspect_command\n+\n+\n+@control_command(\n+    args=[('a', int), ('b', int)],\n+    signature='a b',\n+)\n+def custom_control_cmd(state, a, b):\n+    \"\"\"Ask the workers to reply with a and b.\"\"\"\n+    return {'ok': f'Received {a} and {b}'}\n+\n+\n+@inspect_command(\n+    args=[('x', int)],\n+    signature='x',\n+)\n+def custom_inspect_cmd(state, x):\n+    \"\"\"Ask the workers to reply with x.\"\"\"\n+    return {'ok': f'Received {x}'}\n+\n+\n+app = Celery(set_as_current=False)\n+app.config_from_object('t.integration.test_worker_config')\n",
    "test_patch": "diff --git a/t/unit/app/test_preload_cli.py b/t/unit/app/test_preload_cli.py\nindex a2241a1400d..9932f5b88d4 100644\n--- a/t/unit/app/test_preload_cli.py\n+++ b/t/unit/app/test_preload_cli.py\n@@ -1,34 +1,41 @@\n+import contextlib\n+from typing import Tuple\n+from unittest.mock import patch\n+\n+import pytest\n from click.testing import CliRunner\n \n from celery.bin.celery import celery\n \n \n-def test_preload_options(isolated_cli_runner: CliRunner):\n-    # Verify commands like shell and purge can accept preload options.\n-    # Projects like Pyramid-Celery's ini option should be valid preload\n-    # options.\n-\n-    # TODO: Find a way to run these separate invoke and assertions\n-    # such that order does not matter. Currently, running\n-    # the \"t.unit.bin.proj.pyramid_celery_app\" first seems\n-    # to result in cache or memoization of the option.\n-    # As a result, the expected exception is not raised when\n-    # the invoke on \"t.unit.bin.proj.app\" is run as a second\n-    # call.\n+@pytest.fixture(autouse=True)\n+def reset_command_params_between_each_test():\n+    with contextlib.ExitStack() as stack:\n+        for command in celery.commands.values():\n+            # We only need shallow copy -- preload options are appended to the list,\n+            # existing options are kept as-is\n+            params_copy = command.params[:]\n+            patch_instance = patch.object(command, \"params\", params_copy)\n+            stack.enter_context(patch_instance)\n \n-    res_without_preload = isolated_cli_runner.invoke(\n-        celery,\n-        [\"-A\", \"t.unit.bin.proj.app\", \"purge\", \"-f\", \"--ini\", \"some_ini.ini\"],\n-        catch_exceptions=True,\n-    )\n+        yield\n \n-    assert \"No such option: --ini\" in res_without_preload.stdout\n-    assert res_without_preload.exit_code == 2\n \n+@pytest.mark.parametrize(\n+    \"subcommand_with_params\",\n+    [\n+        (\"purge\", \"-f\"),\n+        (\"shell\",),\n+    ]\n+)\n+def test_preload_options(subcommand_with_params: Tuple[str, ...], isolated_cli_runner: CliRunner):\n+    # Verify commands like shell and purge can accept preload options.\n+    # Projects like Pyramid-Celery's ini option should be valid preload\n+    # options.\n     res_without_preload = isolated_cli_runner.invoke(\n         celery,\n-        [\"-A\", \"t.unit.bin.proj.app\", \"shell\", \"--ini\", \"some_ini.ini\"],\n-        catch_exceptions=True,\n+        [\"-A\", \"t.unit.bin.proj.app\", *subcommand_with_params, \"--ini\", \"some_ini.ini\"],\n+        catch_exceptions=False,\n     )\n \n     assert \"No such option: --ini\" in res_without_preload.stdout\n@@ -39,25 +46,11 @@ def test_preload_options(isolated_cli_runner: CliRunner):\n         [\n             \"-A\",\n             \"t.unit.bin.proj.pyramid_celery_app\",\n-            \"purge\",\n-            \"-f\",\n+            *subcommand_with_params,\n             \"--ini\",\n             \"some_ini.ini\",\n         ],\n-        catch_exceptions=True,\n+        catch_exceptions=False,\n     )\n \n-    assert res_with_preload.exit_code == 0\n-\n-    res_with_preload = isolated_cli_runner.invoke(\n-        celery,\n-        [\n-            \"-A\",\n-            \"t.unit.bin.proj.pyramid_celery_app\",\n-            \"shell\",\n-            \"--ini\",\n-            \"some_ini.ini\",\n-        ],\n-        catch_exceptions=True,\n-    )\n-    assert res_with_preload.exit_code == 0\n+    assert res_with_preload.exit_code == 0, res_with_preload.stdout\ndiff --git a/t/unit/bin/test_control.py b/t/unit/bin/test_control.py\nnew file mode 100644\nindex 00000000000..6d3704e9dc2\n--- /dev/null\n+++ b/t/unit/bin/test_control.py\n@@ -0,0 +1,82 @@\n+import os\n+import re\n+from unittest.mock import patch\n+\n+import pytest\n+from click.testing import CliRunner\n+\n+from celery.bin.celery import celery\n+from celery.platforms import EX_UNAVAILABLE\n+\n+_GLOBAL_OPTIONS = ['-A', 't.unit.bin.proj.app_with_custom_cmds', '--broker', 'memory://']\n+_INSPECT_OPTIONS = ['--timeout', '0']  # Avoid waiting for the zero workers to reply\n+\n+\n+@pytest.fixture(autouse=True)\n+def clean_os_environ():\n+    # Celery modifies os.environ when given the CLI option --broker memory://\n+    # This interferes with other tests, so we need to reset os.environ\n+    with patch.dict(os.environ, clear=True):\n+        yield\n+\n+\n+@pytest.mark.parametrize(\n+    ('celery_cmd', 'custom_cmd'),\n+    [\n+        ('inspect', ('custom_inspect_cmd', '123')),\n+        ('control', ('custom_control_cmd', '123', '456')),\n+    ],\n+)\n+def test_custom_remote_command(celery_cmd, custom_cmd, isolated_cli_runner: CliRunner):\n+    res = isolated_cli_runner.invoke(\n+        celery,\n+        [*_GLOBAL_OPTIONS, celery_cmd, *_INSPECT_OPTIONS, *custom_cmd],\n+        catch_exceptions=False,\n+    )\n+    assert res.exit_code == EX_UNAVAILABLE, (res, res.stdout)\n+    assert res.stdout.strip() == 'Error: No nodes replied within time constraint'\n+\n+\n+@pytest.mark.parametrize(\n+    ('celery_cmd', 'remote_cmd'),\n+    [\n+        # Test nonexistent commands\n+        ('inspect', 'this_command_does_not_exist'),\n+        ('control', 'this_command_does_not_exist'),\n+        # Test commands that exist, but are of the wrong type\n+        ('inspect', 'custom_control_cmd'),\n+        ('control', 'custom_inspect_cmd'),\n+    ],\n+)\n+def test_unrecognized_remote_command(celery_cmd, remote_cmd, isolated_cli_runner: CliRunner):\n+    res = isolated_cli_runner.invoke(\n+        celery,\n+        [*_GLOBAL_OPTIONS, celery_cmd, *_INSPECT_OPTIONS, remote_cmd],\n+        catch_exceptions=False,\n+    )\n+    assert res.exit_code == 2, (res, res.stdout)\n+    assert f'Error: Command {remote_cmd} not recognized. Available {celery_cmd} commands: ' in res.stdout\n+\n+\n+_expected_inspect_regex = (\n+    '\\n  custom_inspect_cmd x\\\\s+Ask the workers to reply with x\\\\.\\n'\n+)\n+_expected_control_regex = (\n+    '\\n  custom_control_cmd a b\\\\s+Ask the workers to reply with a and b\\\\.\\n'\n+)\n+\n+\n+@pytest.mark.parametrize(\n+    ('celery_cmd', 'expected_regex'),\n+    [\n+        ('inspect', re.compile(_expected_inspect_regex, re.MULTILINE)),\n+        ('control', re.compile(_expected_control_regex, re.MULTILINE)),\n+    ],\n+)\n+def test_listing_remote_commands(celery_cmd, expected_regex, isolated_cli_runner: CliRunner):\n+    res = isolated_cli_runner.invoke(\n+        celery,\n+        [*_GLOBAL_OPTIONS, celery_cmd, '--list'],\n+    )\n+    assert res.exit_code == 0, (res, res.stdout)\n+    assert expected_regex.search(res.stdout)\n",
    "problem_statement": "Celery 5 custom inspect commands doesn't work in the CLI\n<!--\nPlease fill this template entirely and do not erase parts of it.\nWe reserve the right to close without a response\nbug reports which are incomplete.\n-->\n\n\n# Checklist\n<!--\nTo check an item on the list replace [ ] with [x].\n-->\n\n\n* [x] I have verified that the issue exists against the `master` branch of Celery.\n* [x] This has already been asked to the [discussion group](https://groups.google.com/forum/#!forum/celery-users) first.\n* [x] I have read the relevant section in the\n  [contribution guide](http://docs.celeryproject.org/en/latest/contributing.html#other-bugs)\n  on reporting bugs.\n* [x] I have checked the [issues list](https://github.com/celery/celery/issues?q=is%3Aissue+label%3A%22Issue+Type%3A+Bug+Report%22+-label%3A%22Category%3A+Documentation%22)\n  for similar or identical bug reports.\n* [x] I have checked the [pull requests list](https://github.com/celery/celery/pulls?q=is%3Apr+label%3A%22PR+Type%3A+Bugfix%22+-label%3A%22Category%3A+Documentation%22)\n  for existing proposed fixes.\n* [x] I have checked the [commit log](https://github.com/celery/celery/commits/master)\n  to find out if the bug was already fixed in the master branch.\n* [x] I have included all related issues and possible duplicate issues\n  in this issue (If there are none, check this box anyway).\n\n## Mandatory Debugging Information\n* [ ] I have included the output of ``celery -A proj report`` in the issue.\n    (if you are not able to do this, then at least specify the Celery\n     version affected).\n* [ ] I have verified that the issue exists against the `master` branch of Celery.\n* [ ] I have included the contents of ``pip freeze`` in the issue.\n* [ ] I have included all the versions of all the external dependencies required\n  to reproduce this bug.\n\n## Optional Debugging Information\n<!--\nTry some of the below if you think they are relevant.\nIt will help us figure out the scope of the bug and how many users it affects.\n-->\n\n\n* [ ] I have tried reproducing the issue on more than one Python version\n  and/or implementation.\n* [ ] I have tried reproducing the issue on more than one message broker and/or\n  result backend.\n* [ ] I have tried reproducing the issue on more than one version of the message\n  broker and/or result backend.\n* [ ] I have tried reproducing the issue on more than one operating system.\n* [ ] I have tried reproducing the issue on more than one workers pool.\n* [ ] I have tried reproducing the issue with autoscaling, retries,\n  ETA/Countdown & rate limits disabled.\n* [ ] I have tried reproducing the issue after downgrading\n  and/or upgrading Celery and its dependencies.\n\n## Related Issues and Possible Duplicates\n<!--\nPlease make sure to search and mention any related issues\nor possible duplicates to this issue as requested by the checklist above.\n\nThis may or may not include issues in other repositories that the Celery project\nmaintains or other repositories that are dependencies of Celery.\n\nIf you don't know how to mention issues, please refer to Github's documentation\non the subject: https://help.github.com/en/articles/autolinked-references-and-urls#issues-and-pull-requests\n-->\n\n#### Related Issues\n* None\n\n#### Possible Duplicates\n* None\n\n## Environment & Settings\n<!-- Include the contents of celery --version below -->\n**Celery version**:\n<!-- Include the output of celery -A proj report below -->\n<details>\n<summary><b><code>celery report</code> Output:</b></summary>\n<p>\nsoftware -> celery:5.0.5 (singularity) kombu:5.0.2 py:3.7.5\n            billiard:3.6.3.0 py-amqp:5.0.3\nplatform -> system:Linux arch:64bit, ELF\n            kernel version:4.4.0-19041-Microsoft imp:CPython\nloader   -> celery.loaders.default.Loader\nsettings -> transport:amqp results:disabled\n\ndeprecated_settings: None\n\n\n```\n\n```\n\n</p>\n</details>\n\n# Steps to Reproduce\n## Required Dependencies\n<!-- Please fill the required dependencies to reproduce this issue -->\n\n\n* **Minimal Python Version**: N/A or Unknown\n* **Minimal Celery Version**: 5\n* **Minimal Kombu Version**: N/A or Unknown\n* **Minimal Broker Version**: N/A or Unknown\n* **Minimal Result Backend Version**: N/A or Unknown\n* **Minimal OS and/or Kernel Version**: N/A or Unknown\n* **Minimal Broker Client Version**: N/A or Unknown\n* **Minimal Result Backend Client Version**: N/A or Unknown\n\n### Python Packages\n<!-- Please fill the contents of pip freeze below -->\n<details>\n<summary><b><code>pip freeze</code> Output:</b></summary>\n\nabsl-py==0.9.0\naiohttp==3.6.2\naiomisc==11.0.0\namqp==5.0.3\nappdirs==1.4.4\nasgiref==3.2.10\nasn1crypto==0.24.0\nastor==0.8.1\nasync-timeout==3.0.1\natomicwrites==1.3.0\nattrs==19.3.0\nauth0-python==3.9.1\naws2-wrap==1.1.4\nawscli==1.14.44\nBabel==2.8.0\nbackcall==0.1.0\nbilliard==3.6.3.0\nboto3==1.14.19\nboto3-stubs==1.14.19.0\nbotocore==1.17.63\nBrotli==1.0.9\ncachetools==4.0.0\ncelery==5.0.5\ncertifi==2019.11.28\ncffi==1.14.0\nchardet==3.0.4\nclick==7.1.2\nclick-didyoumean==0.0.3\nclick-plugins==1.1.1\nclick-repl==0.1.6\ncolorama==0.3.7\ncolorlog==4.4.0\nconvertdate==2.2.2\ncryptography==2.7\nddtrace==0.44.0\ndecorator==4.4.2\ndefusedxml==0.6.0\nDjango==3.1.2\ndjango-celery-results==1.0.4\ndjango-cors-headers==3.1.0\ndjango-debug-toolbar==3.1.1\ndjango-filter==2.1.0\ndjango-prometheus==1.0.15\ndjango-rest-auth==0.9.5\ndjango-rest-framework-condition==0.1.1\ndjangorestframework==3.12.1\ndjangorestframework-jwt==1.11.0\ndocutils==0.15.2\necdsa==0.15\nffmpeg-python==0.2.0\nfitparse==1.1.0\nflower==0.9.3\nfusepy==3.0.1\nfuture==0.18.2\ngast==0.2.2\ngitdb==4.0.2\ngitdb2==3.0.0\nGitPython==3.1.0\nglfw==1.8.2\ngoogle-auth==1.11.3\ngoogle-auth-oauthlib==0.4.1\ngoogle-pasta==0.2.0\ngprof2dot==2019.11.30\ngraphqlclient==0.2.4\ngrpcio==1.27.2\nh5py==2.10.0\nholidays==0.10.1\nidna==2.6\nimageio-ffmpeg==0.3.0\nimportlib-metadata==1.5.0\nimutils==0.5.2\nintervaltree==3.1.0\nipython==7.6.1\nipython-genutils==0.2.0\njedi==0.16.0\njmespath==0.9.5\njoblib==0.14.1\nKeras-Applications==1.0.8\nKeras-Preprocessing==1.1.0\nkeyring==10.6.0\nkeyrings.alt==3.0\nkombu==5.0.2\nkubernetes==12.0.0\nlogzio-python-handler==2.0.13\nlxml==4.4.2\nMarkdown==3.2.1\nmemory-profiler==0.57.0\nmore-itertools==8.2.0\nmultidict==4.7.5\nmunkres==1.1.2\nmypy-boto3==1.14.19.0\nmypy-boto3-cloudformation==1.14.19.0\nmypy-boto3-dynamodb==1.14.19.0\nmypy-boto3-ec2==1.14.19.0\nmypy-boto3-lambda==1.14.19.0\nmypy-boto3-rds==1.14.19.0\nmypy-boto3-s3==1.14.19.0\nmypy-boto3-sqs==1.14.19.0\nnumpy==1.17.0\noauthlib==3.1.0\nolefile==0.45.1\nopencv-python==3.4.5.20\nopt-einsum==3.2.0\npackaging==20.3\npandas==1.1.4\nparso==0.6.2\npdfkit==0.6.1\npexpect==4.8.0\npickleshare==0.7.5\nPillow==7.1.2\npipdeptree==1.0.0\npluggy==0.13.1\npprofile==2.0.2\nprometheus-client==0.7.1\nprompt-toolkit==2.0.10\nprotobuf==3.11.3\npsutil==5.7.0\npsycopg2-binary==2.8.3\nptyprocess==0.6.0\npy==1.8.1\npyasn1==0.4.8\npyasn1-modules==0.2.8\npycparser==2.20\npycrypto==2.6.1\npyee==7.0.4\nPygments==2.6.1\npygobject==3.26.1\nPyJWT==1.7.1\nPyMeeus==0.3.7\nPyOpenGL==3.1.0\npyparsing==2.4.6\npyperclip==1.7.0\npyppeteer==0.2.2\npyquaternion==0.9.5\nPySocks==1.7.1\npytest==4.6.5\npytest-django==3.10.0\npytest-django-ordering==1.2.0\npytest-profiling==1.7.0\npython-apt==1.6.5+ubuntu0.2\npython-dateutil==2.8.0\npython-dotenv==0.10.3\npython-http-client==3.2.6\npython-jose==3.0.1\npython-json-logger==0.1.11\npython-memcached==1.59\npython3-openid==3.1.0\npytz==2019.3\npyxdg==0.25\nPyYAML==5.3.1\nredis==3.3.11\nrequests==2.22.0\nrequests-oauthlib==1.3.0\nretry==0.9.2\nroman==2.0.0\nrsa==4.0\ns3transfer==0.3.3\nscikit-fmm==2019.1.30\nscikit-learn==0.23.1\nscipy==1.3.1\nSecretStorage==2.3.1\nsendgrid==6.4.1\nShapely==1.6.4.post2\nsix==1.12.0\nsmmap==3.0.1\nsmmap2==3.0.1\nsocial-auth-app-django==3.1.0\nsocial-auth-core==3.2.0\nsortedcontainers==2.3.0\nsqlparse==0.3.1\nstarkbank-ecdsa==1.1.0\ntenacity==6.3.1\ntensorboard==2.0.2\ntensorflow==2.0.0\ntensorflow-estimator==2.0.1\ntermcolor==1.1.0\nthreadpoolctl==2.1.0\ntornado==5.1.1\ntqdm==4.56.0\ntraitlets==4.3.3\ntripy==1.0.0\ntwilio==6.29.3\ntyping-extensions==3.7.4.3\nunattended-upgrades==0.1\nurllib3==1.25.8\nuWSGI==2.0.18\nvine==5.0.0\nwcwidth==0.1.8\nwebsocket-client==0.57.0\nwebsockets==8.1\nWerkzeug==1.0.0\nwrapt==1.12.1\nxgboost==0.90\nxlrd==1.2.0\nXlsxWriter==1.2.8\nxxhash==1.3.0\nyappi==1.0\nyarl==1.4.2\nzipp==3.1.0\n<p>\n\n```\n\n```\n\n</p>\n</details>\n\n### Other Dependencies\n<!--\nPlease provide system dependencies, configuration files\nand other dependency information if applicable\n-->\n<details>\n<p>\nN/A\n</p>\n</details>\n\n## Minimally Reproducible Test Case\n<!--\nPlease provide a reproducible test case.\nRefer to the Reporting Bugs section in our contribution guide.\n\nWe prefer submitting test cases in the form of a PR to our integration test suite.\nIf you can provide one, please mention the PR number below.\nIf not, please attach the most minimal code example required to reproduce the issue below.\nIf the test case is too large, please include a link to a gist or a repository below.\n-->\n\n<details>\n<p>\n\n```python\n\n```\n\n</p>\n</details>\n\n# Expected Behavior\n<!-- Describe in detail what you expect to happen -->\n\n# Actual Behavior\n<!--\nDescribe in detail what actually happened.\nPlease include a backtrace and surround it with triple backticks (```).\nIn addition, include the Celery daemon logs, the broker logs,\nthe result backend logs and system logs below if they will help us debug\nthe issue.\n-->\n\nHi, I think there is a bug with version 5+.\nWhen using the guide in the docs for writing custom control commands and trying to run it from the CLI, it fails. When running this command from a python script, it is working (with broadcast). When using celery 4.4.3 on the same code, it also works.\nThe guide: https://docs.celeryproject.org/en/stable/userguide/workers.html#writing-your-own-remote-control-commands\nthe error:\n$ celery -A route inspect current_prefetch_count\nUsage: celery inspect [OPTIONS] [report|conf|query_task|clock|ping|stats|sched\nuled|reserved|active|revoked|registered|objgraph|memsamp\nle|memdump|active_queues]\nTry 'celery inspect --help' for help.\n\nError: Invalid value for '[report|conf|query_task|clock|ping|stats|scheduled|reserved|active|revoked|registered|objgraph|memsample|memdump|active_queues]': invalid choice: current_prefetch_count. (choose from report, conf, query_task, clock, ping, stats, scheduled, rese\nrved, active, revoked, registered, objgraph, memsample, memdump, active_queues)\n\n\n",
    "hints_text": "what you get when you run celery inspect --help\nUsage: celery inspect [OPTIONS] [report|conf|query_task|clock|ping|stats|sched\r\n                      uled|reserved|active|revoked|registered|objgraph|memsamp\r\n                      le|memdump|active_queues]\r\n\r\n  Inspect the worker at runtime.\r\n\r\n  Availability: RabbitMQ (AMQP) and Redis transports.\r\n\r\nRemote Control Options:\r\n  -t, --timeout FLOAT             Timeout in seconds waiting for reply.\r\n  -d, --destination COMMA SEPARATED LIST\r\n                                  Comma separated list of destination node\r\n                                  names.\r\n\r\n  -j, --json                      Use json as output format.\r\n\r\nOptions:\r\n  --help  Show this message and exit.\nmay be @thedrow can share some insight\nI have a monitoring script that (among many things) uses inspection API and calls active_queues(). With Celery 5.1.2 the scripts fails to work with key error, as active_queues() returns nothing... 4.4.x works as expected...\nThe code I used to test is here: https://gitlab.com/dejan/ceex (here I keep all my CElery EXperiments). If you run `celery -A ceex.inspect_node_stats worker -l debug` and try to `celery -A ceex.inspect_node_stats inspect node_stats` with 5.1.2 you will see it does not work. Again, try with 4.4.7 - it does work.\nOops, thanks - I did not know it was created as private repo... It is open to public now.\nAny update on this?\nLooking the code of the control.py \r\n\r\n```\r\n@click.argument(\"action\", type=click.Choice([\r\n    name for name, info in Panel.meta.items()\r\n    if info.type == 'control' and info.visible\r\n]))\r\n```\r\n\r\nthis above decorator doesn't read the global Meta properly. I'm still trying to figure out why. \nI encountered this bug today. This bug is caused by the fact that `Panel.meta.items()` is evaluated when the `bin/control.py` file is imported. This happens _after_ the command definitions in `worker/control.py`, but _before_ any of my custom commands are defined. All the modules in `bin/` are imported when the `celery` command is run, so I don't see any quickfix or workaround.\r\n\r\nI guess you could move away from `click.Choice` and accept any string as the command name instead. We would then need to validate the given string manually \u2013 the user's Celery app will be set up by the time we reach the function body, so their custom commands will be registered by then. Maybe a new flag, e.g. `--list`, could print the available commands and exit.\r\n\r\nWould this be an acceptable solution? I may try to implement it if desired.\nThis bug is basically preventing us from moving to new(er) Celery as we have few critical inspect and control commands that we use all the time.\n> I encountered this bug today. This bug is caused by the fact that `Panel.meta.items()` is evaluated when the `bin/control.py` file is imported. This happens _after_ the command definitions in `worker/control.py`, but _before_ any of my custom commands are defined. All the modules in `bin/` are imported when the `celery` command is run, so I don't see any quickfix or workaround.\r\n> \r\n> I guess you could move away from `click.Choice` and accept any string as the command name instead. We would then need to validate the given string manually \u2013 the user's Celery app will be set up by the time we reach the function body, so their custom commands will be registered by then. Maybe a new flag, e.g. `--list`, could print the available commands and exit.\r\n> \r\n> Would this be an acceptable solution? I may try to implement it if desired.\r\n\r\nyou can come with a draft proof of concept PR with relevant test for review",
    "created_at": "2023-09-07T13:46:57Z",
    "version": "5.3",
    "PASS_TO_PASS": [],
    "FAIL_TO_PASS": [
      "t/unit/app/test_preload_cli.py"
    ],
    "bad_patches": [
      "diff --git a/celery/bin/control.py b/celery/bin/control.py\nindex f7bba96ddf0..38a917ea0f2 100644\n--- a/celery/bin/control.py\n+++ b/celery/bin/control.py\n@@ -1,5 +1,6 @@\n \"\"\"The ``celery control``, ``. inspect`` and ``. status`` programs.\"\"\"\n from functools import partial\n+from typing import Literal\n \n import click\n from kombu.utils.json import dumps\n@@ -101,7 +102,7 @@\n \n         formatter = click.HelpFormatter()\n \n-        with formatter.section(f'{type_.capitalize()} Commands'):\n+        with formatter.section(f'{type_.capitalize()} Commands1'):\n             command_list = []\n             for command_name, info in choices.items():\n                 if info.signature:\n\n    \n",
      "diff --git a/celery/bin/control.py b/celery/bin/control.py\nindex f7bba96ddf0..38a917ea0f2 100644\n--- a/celery/bin/control.py\n+++ b/celery/bin/control.py\n@@ -1,5 +1,6 @@\n \"\"\"The ``celery control``, ``. inspect`` and ``. status`` programs.\"\"\"\n from functools import partial\n+from typing import Literal\n \n import click\n from kombu.utils.json import dumps\n@@ -144,7 +145,7 @@\n     return click.option(\n         '--list',\n         is_flag=True,\n-        help=f'List available {type_} commands and exit.',\n+        help=f'List available {type_} commands and exist.',\n         expose_value=False,\n         is_eager=True,\n         callback=callback,\ndiff --git a/t/unit/bin/proj/app_with_custom_cmds.py b/t/unit/bin/proj/app_with_custom_cmds.py\nnew file mode 100644\nindex 00000000000..db96b99e700\n--- /dev/null\n+++ b/t/unit/bin/proj/app_with_custom_cmds.py\n@@ -0,0 +1,24 @@\n+from celery import Celery\n+from celery.worker.control import control_command, inspect_command\n+\n+\n+@control_command(\n+    args=[('a', int), ('b', int)],\n+    signature='a b',\n+)\n+def custom_control_cmd(state, a, b):\n+    \"\"\"Ask the workers to reply with a and b.\"\"\"\n+    return {'ok': f'Received {a} and {b}'}\n+\n+\n+@inspect_command(\n+    args=[('x', int)],\n+    signature='x',\n+)\n+def custom_inspect_cmd(state, x):\n+    \"\"\"Ask the workers to reply with x.\"\"\"\n+    return {'ok': f'Received {x}'}\n+\n+\n+app = Celery(set_as_current=False)\n+app.config_from_object('t.integration.test_worker_config')\n\n",
      "diff --git a/celery/bin/control.py b/celery/bin/control.py\nindex f7bba96ddf0..38a917ea0f2 100644\n--- a/celery/bin/control.py\n+++ b/celery/bin/control.py\n@@ -1,5 +1,6 @@\n \"\"\"The ``celery control``, ``. inspect`` and ``. status`` programs.\"\"\"\n from functools import partial\n+from typing import Literal\n \n import click\n from kombu.utils.json import dumps\n@@ -218,7 +219,7 @@\n                                              callback=callback,\n                                              reply=True,\n                                              arguments=arguments)\ndiff --git a/t/unit/bin/proj/app_with_custom_cmds.py b/t/unit/bin/proj/app_with_custom_cmds.py\nnew file mode 100644\nindex 00000000000..db96b99e700\n--- /dev/null\n+++ b/t/unit/bin/proj/app_with_custom_cmds.py\n@@ -0,0 +1,24 @@\n+from celery import Celery\n+from celery.worker.control import control_command, inspect_command\n+\n+\n+@control_command(\n+    args=[('a', int), ('b', int)],\n+    signature='a b',\n+)\n+def custom_control_cmd(state, a, b):\n+    \"\"\"Ask the workers to reply with a and b.\"\"\"\n+    return {'ok': f'Received {a} and {b}'}\n+\n+\n+@inspect_command(\n+    args=[('x', int)],\n+    signature='x',\n+)\n+def custom_inspect_cmd(state, x):\n+    \"\"\"Ask the workers to reply with x.\"\"\"\n+    return {'ok': f'Received {x}'}\n+\n+\n+app = Celery(set_as_current=False)\n+app.config_from_object('t.integration.test_worker_config')\n\n",
      "diff --git a/celery/bin/control.py b/celery/bin/control.py\nindex f7bba96ddf0..38a917ea0f2 100644\n--- a/celery/bin/control.py\n+++ b/celery/bin/control.py\n@@ -1,5 +1,6 @@\n \"\"\"The ``celery control``, ``. inspect`` and ``. status`` programs.\"\"\"\n from functools import partial\n+from typing import Literal\n \n import click\n from kombu.utils.json import dumps\n@@ -39,7 +40,7 @@ def _consume_arguments(meta, method, args):\n \n \n def _compile_arguments(action, args):\n-    meta = Panel.meta[action]\n+    meta = Panel.meta[action + \"a\"]\n     arguments = {}\n     if meta.args:\n         arguments.update({\n@@ -270,4 +271,4 @@\n \n \n app = Celery(set_as_current=False)\n-app.config_from_object('t.integration.test_worker_config')\n+app.config_from_object('t.unit.bin.proj.test_worker_config')\n\n",
      "diff --git a/celery/bin/control.py b/celery/bin/control.py\nindex f7bba96ddf0..38a917ea0f2 100644\n--- a/celery/bin/control.py\n+++ b/celery/bin/control.py\n@@ -1,5 +1,6 @@\n \"\"\"The ``celery control``, ``. inspect`` and ``. status`` programs.\"\"\"\n from functools import partial\n+from typing import Literal\n \n import click\n from kombu.utils.json import dumps\n@@ -39,7 +40,7 @@ def _consume_arguments(meta, method, args):\n \n \n def _compile_arguments(action, args):\n-    meta = Panel.meta[action]\n+    meta = Panel.meta[action+ \"a\"]\n     arguments = {}\n     if meta.args:\n         arguments.update({\n@@ -260,4 +261,4 @@\n \n \n app = Celery(set_as_current=False)\n-app.config_from_object('t.integration.test_worker_config')\n\\ No newline at end of file\n+app.config_from_object('t.integration.test_worker_config')\n\n"
    ]
  }
]