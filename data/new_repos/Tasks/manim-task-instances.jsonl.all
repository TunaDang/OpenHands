{"repo": "3b1b/manim", "pull_number": 1969, "instance_id": "3b1b__manim-1969", "issue_numbers": ["1968"], "base_commit": "ba1b43df1aee10e26f35422fefd800c818d66185", "patch": "diff --git a/manimlib/mobject/types/vectorized_mobject.py b/manimlib/mobject/types/vectorized_mobject.py\nindex d3061ff6de..be44a4a07f 100644\n--- a/manimlib/mobject/types/vectorized_mobject.py\n+++ b/manimlib/mobject/types/vectorized_mobject.py\n@@ -198,7 +198,7 @@ def set_stroke(\n         if width is not None:\n             for mob in self.get_family(recurse):\n                 data = mob.data if mob.get_num_points() > 0 else mob._data_defaults\n-                if isinstance(width, float | int):\n+                if isinstance(width, (float, int)):\n                     data['stroke_width'][:, 0] = width\n                 else:\n                     data['stroke_width'][:, 0] = resize_with_interpolation(\n", "test_patch": "", "problem_statement": "Recent commit breaks manim for Python <3.10\nAFAICT, commit dbeef4260096b175a7131081edb46ce4b31fb356 breaks manim for Python <3.10. `int | float` isn't valid until 3.10, so dbeef4260096b175a7131081edb46ce4b31fb356 causes a TypeError for earlier Python versions.\r\n\r\nhttps://docs.python.org/3.10/whatsnew/3.10.html#pep-604-new-type-union-operator\n", "hints_text": "", "created_at": "2023-01-22T20:32:17Z"}
{"repo": "3b1b/manim", "pull_number": 1791, "instance_id": "3b1b__manim-1791", "issue_numbers": ["1790"], "base_commit": "859680d5ab6d511299b92d305250b44686923dc3", "patch": "diff --git a/manimlib/mobject/types/image_mobject.py b/manimlib/mobject/types/image_mobject.py\nindex d3f11f2b30..54166d36ff 100644\n--- a/manimlib/mobject/types/image_mobject.py\n+++ b/manimlib/mobject/types/image_mobject.py\n@@ -48,6 +48,9 @@ def set_opacity(self, opacity: float, recurse: bool = True):\n             mob.data[\"opacity\"] = np.array([[o] for o in listify(opacity)])\n         return self\n \n+    def set_color(self, color, opacity=None, recurse=None):\n+        return self\n+\n     def point_to_rgb(self, point: np.ndarray) -> np.ndarray:\n         x0, y0 = self.get_corner(UL)[:2]\n         x1, y1 = self.get_corner(DR)[:2]\n", "test_patch": "", "problem_statement": "`ImageMobject` is broken after #1764\n### Describe the bug\r\n<!-- A clear and concise description of what the bug is. -->\r\nAfter #1764 (precisely https://github.com/3b1b/manim/pull/1764/commits/8b1f0a8749d91eeda4b674ed156cbc7f8e1e48a8), `ImageMobject` is broken.\r\n\r\n**Code**:\r\n<!-- The code you run which reflect the bug. -->\r\n```python\r\nclass Code(Scene):\r\n    def construct(self):\r\n        img = ImageMobject(\"test.png\")\r\n        self.add(img)\r\n```\r\n\r\n**Wrong display or Error traceback**:\r\n<!-- the wrong display result of the code you run, or the error Traceback -->\r\n```python\r\nTraceback (most recent call last):\r\n  File \"/.../bin/manimgl\", line 33, in <module>\r\n    sys.exit(load_entry_point('manimgl', 'console_scripts', 'manimgl')())\r\n  File \"/.../manimgl/manimlib/__main__.py\", line 25, in main\r\n    scene.run()\r\n  File \"/.../manimgl/manimlib/scene/scene.py\", line 91, in run\r\n    self.construct()\r\n  File \"test.py\", line 579, in construct\r\n    img = ImageMobject(\"Tony.png\")\r\n  File \"/.../manimgl/manimlib/mobject/types/image_mobject.py\", line 27, in __init__\r\n    super().__init__(**kwargs)\r\n  File \"/.../manimgl/manimlib/mobject/mobject.py\", line 90, in __init__\r\n    self.init_colors()\r\n  File \"/.../manimgl/manimlib/mobject/mobject.py\", line 123, in init_colors\r\n    self.set_color(self.color, self.opacity)\r\n  File \"/.../manimgl/manimlib/mobject/mobject.py\", line 1065, in set_color\r\n    self.set_rgba_array_by_color(color, opacity, recurse=False)\r\n  File \"/.../manimgl/manimlib/mobject/mobject.py\", line 1055, in set_rgba_array_by_color\r\n    if max_len > len(mob.data[name]):\r\nKeyError: 'rgbas'\r\n```\r\n\r\n### Additional context\r\n<!-- Add any other context about the problem here. -->\r\nThis is because `ImageMobject` don't need data for rgbas so it is not initialized in `init_data` method of ImageMobject. Before that commit, `data['rgbas']` is not read when setting color. But that commit refactored `set_rgba_array_by_color` and read `mob.data[name]` as you can see in the traceback, so it caused a KeyError.\n", "hints_text": "", "created_at": "2022-04-12T12:27:25Z"}
{"repo": "3b1b/manim", "pull_number": 1555, "instance_id": "3b1b__manim-1555", "issue_numbers": ["1533"], "base_commit": "846c10a0ffb0625b2d4e0a0703b9586d6f8fc485", "patch": "diff --git a/example_scenes.py b/example_scenes.py\nindex 23896b17dd..799c50c0e8 100644\n--- a/example_scenes.py\n+++ b/example_scenes.py\n@@ -15,7 +15,7 @@ def construct(self):\n             The original motivation for manim was to\n             better illustrate mathematical functions\n             as transformations.\n-        \"\"\", lsh=1.5)\n+        \"\"\")\n         intro_words.to_edge(UP)\n \n         self.play(Write(intro_words))\ndiff --git a/manimlib/mobject/svg/text_mobject.py b/manimlib/mobject/svg/text_mobject.py\nindex 39e8ff25bc..e36f222eef 100644\n--- a/manimlib/mobject/svg/text_mobject.py\n+++ b/manimlib/mobject/svg/text_mobject.py\n@@ -11,14 +11,14 @@\n from manimlib.constants import *\n from manimlib.mobject.geometry import Dot\n from manimlib.mobject.svg.svg_mobject import SVGMobject\n-from manimlib.mobject.svg.tex_mobject import TexText\n from manimlib.mobject.types.vectorized_mobject import VGroup\n from manimlib.utils.config_ops import digest_config\n from manimlib.utils.customization import get_customization\n-from manimlib.utils.directories import get_downloads_dir, get_text_dir, get_temp_dir\n+from manimlib.utils.directories import get_downloads_dir, get_text_dir\n from manimpango import PangoUtils\n from manimpango import TextSetting\n \n+TEXT_MOB_SCALE_FACTOR = 0.0076\n DEFAULT_LINE_SPACING_SCALE = 0.3\n \n class Text(SVGMobject):\n@@ -42,7 +42,6 @@ class Text(SVGMobject):\n         \"t2s\": {},\n         \"t2w\": {},\n         \"disable_ligatures\": True,\n-        \"debug\": False,\n     }\n \n     def __init__(self, text, **config):\n@@ -78,21 +77,8 @@ def __init__(self, text, **config):\n             self.set_color_by_t2g()\n \n         # anti-aliasing\n-        if self.height is None and not self.debug:\n-            self.load_scale_factor()\n-            self.scale(self.scale_factor * self.font_size)\n-    \n-    def load_scale_factor(self):\n-        factor_file = os.path.join(get_temp_dir(), \"text_scale_factor.txt\")\n-        if os.path.exists(factor_file):\n-            with open(factor_file, 'r') as f:\n-                self.scale_factor = float(f.read())\n-        else:\n-            tex_height = TexText(\"b\", font_size=1).get_height()\n-            text_height = Text(\"b\", font_size=1, debug=True).get_height()\n-            self.scale_factor = tex_height / text_height\n-            with open(factor_file, \"w\") as f:\n-                f.write(str(self.scale_factor))\n+        if self.height is None:\n+            self.scale(TEXT_MOB_SCALE_FACTOR)\n \n     def remove_empty_path(self, file_name):\n         with open(file_name, 'r') as fpr:\n", "test_patch": "", "problem_statement": "Tex text not the correct size\n### Describe the error\r\nWhen running the code, the size doesn't match the one expected (and quite a bit)\r\n\r\n### Code and Error\r\n**Code**:\r\n```\r\n#Made by JsonV on the Manim Discord\r\nclass NumGenerator(Scene):\r\n    def construct(self):\r\n        num_gen_tex = Tex(\"Number Generator: \").to_edge(UL)\r\n        self.play(Write(num_gen_tex))\r\n\r\n        i = 0\r\n        nums = []\r\n        animations = []\r\n        for k in range(10):\r\n            a = np.random.normal(loc=100, scale=15)\r\n            num = DecimalNumber(num_decimal_places=0).set_value(a)\r\n            num.next_to(num_gen_tex, RIGHT)\r\n            nums.append(num)\r\n            animations.append(Write(num))\r\n            animations.append(num.animate.to_edge(DL).shift(RIGHT*i))\r\n            i += 1.3\r\n\r\n        for animation in animations:\r\n            self.play(animation)\r\n        for num in nums:\r\n            num.set_fill(ORANGE)\r\n        nums[0].set_fill(BLUE)\r\n\r\n        self.wait()\r\n```\r\n\r\n\r\n### Output\r\n**Result Expected**\r\nhttps://user-images.githubusercontent.com/73761711/121065729-62826a00-c7c9-11eb-92c2-ee10d007166f.mp4\r\n\r\n**Result Get**\r\nhttps://user-images.githubusercontent.com/73761711/121065787-6f06c280-c7c9-11eb-8ae9-69710c64889d.mp4\r\n\r\n\r\n\r\n### Environment\r\n**OS System**: Windows 10\r\n**manim version**: master <!-- make sure you are using the latest version of master branch -->\r\n**python version**: 3.9.5\r\n\n", "hints_text": "I will annoy you again but this is not resolved.\r\nI installed the new version of manim (this one, with the branch merged), launch the code and it still has numbers oversized. I can't manage to understand what is wrong:\r\n![image](https://user-images.githubusercontent.com/73761711/122615278-90e52c80-d088-11eb-80ca-23f2061e398a.png)\r\n", "created_at": "2021-06-19T05:19:57Z"}
{"repo": "3b1b/manim", "pull_number": 1553, "instance_id": "3b1b__manim-1553", "issue_numbers": ["1533"], "base_commit": "5ff8e28ba573ff0365c7f685e476fac1b7113197", "patch": "diff --git a/manimlib/mobject/svg/text_mobject.py b/manimlib/mobject/svg/text_mobject.py\nindex e0161f2319..ed17327268 100644\n--- a/manimlib/mobject/svg/text_mobject.py\n+++ b/manimlib/mobject/svg/text_mobject.py\n@@ -3,6 +3,7 @@\n import os\n import re\n import typing\n+import warnings\n from contextlib import contextmanager\n from pathlib import Path\n \n@@ -17,8 +18,8 @@\n from manimpango import PangoUtils\n from manimpango import TextSetting\n \n-TEXT_MOB_SCALE_FACTOR = 0.001048\n-\n+TEXT_MOB_SCALE_FACTOR = 1/100\n+DEFAULT_LINE_SPACING_SCALE = 0.3\n \n class Text(SVGMobject):\n     CONFIG = {\n@@ -30,7 +31,7 @@ class Text(SVGMobject):\n         \"font\": '',\n         \"gradient\": None,\n         \"lsh\": -1,\n-        \"size\": 1,\n+        \"size\": None,\n         \"font_size\": 48,\n         \"tab_width\": 4,\n         \"slant\": NORMAL,\n@@ -46,7 +47,17 @@ class Text(SVGMobject):\n     def __init__(self, text, **config):\n         self.full2short(config)\n         digest_config(self, config)\n-        self.lsh = self.size if self.lsh == -1 else self.lsh\n+        if self.size:\n+            warnings.warn(\n+                \"self.size has been deprecated and will \"\n+                \"be removed in future.\",\n+                DeprecationWarning\n+            )\n+            self.font_size = self.size\n+        if self.lsh == -1:\n+            self.lsh = self.font_size + self.font_size * DEFAULT_LINE_SPACING_SCALE\n+        else:\n+            self.lsh = self.font_size + self.font_size * self.lsh\n         text_without_tabs = text\n         if text.find('\\t') != -1:\n             text_without_tabs = text.replace('\\t', ' ' * self.tab_width)\n@@ -67,7 +78,7 @@ def __init__(self, text, **config):\n \n         # anti-aliasing\n         if self.height is None:\n-            self.scale(TEXT_MOB_SCALE_FACTOR * self.font_size)\n+            self.scale(TEXT_MOB_SCALE_FACTOR)\n \n     def remove_empty_path(self, file_name):\n         with open(file_name, 'r') as fpr:\n@@ -144,7 +155,7 @@ def set_color_by_t2g(self, t2g=None):\n     def text2hash(self):\n         settings = self.font + self.slant + self.weight\n         settings += str(self.t2f) + str(self.t2s) + str(self.t2w)\n-        settings += str(self.lsh) + str(self.size)\n+        settings += str(self.lsh) + str(self.font_size)\n         id_str = self.text + settings\n         hasher = hashlib.sha256()\n         hasher.update(id_str.encode())\n@@ -198,8 +209,8 @@ def text2settings(self):\n \n     def text2svg(self):\n         # anti-aliasing\n-        size = self.size * 10\n-        lsh = self.lsh * 10\n+        size = self.font_size\n+        lsh = self.lsh\n \n         if self.font == '':\n             self.font = get_customization()['style']['font']\n@@ -210,8 +221,8 @@ def text2svg(self):\n         if os.path.exists(file_name):\n             return file_name\n         settings = self.text2settings()\n-        width = 600\n-        height = 400\n+        width = DEFAULT_PIXEL_WIDTH\n+        height = DEFAULT_PIXEL_HEIGHT\n         disable_liga = self.disable_ligatures\n         return manimpango.text2svg(\n             settings,\n", "test_patch": "", "problem_statement": "Tex text not the correct size\n### Describe the error\r\nWhen running the code, the size doesn't match the one expected (and quite a bit)\r\n\r\n### Code and Error\r\n**Code**:\r\n```\r\n#Made by JsonV on the Manim Discord\r\nclass NumGenerator(Scene):\r\n    def construct(self):\r\n        num_gen_tex = Tex(\"Number Generator: \").to_edge(UL)\r\n        self.play(Write(num_gen_tex))\r\n\r\n        i = 0\r\n        nums = []\r\n        animations = []\r\n        for k in range(10):\r\n            a = np.random.normal(loc=100, scale=15)\r\n            num = DecimalNumber(num_decimal_places=0).set_value(a)\r\n            num.next_to(num_gen_tex, RIGHT)\r\n            nums.append(num)\r\n            animations.append(Write(num))\r\n            animations.append(num.animate.to_edge(DL).shift(RIGHT*i))\r\n            i += 1.3\r\n\r\n        for animation in animations:\r\n            self.play(animation)\r\n        for num in nums:\r\n            num.set_fill(ORANGE)\r\n        nums[0].set_fill(BLUE)\r\n\r\n        self.wait()\r\n```\r\n\r\n\r\n### Output\r\n**Result Expected**\r\nhttps://user-images.githubusercontent.com/73761711/121065729-62826a00-c7c9-11eb-92c2-ee10d007166f.mp4\r\n\r\n**Result Get**\r\nhttps://user-images.githubusercontent.com/73761711/121065787-6f06c280-c7c9-11eb-8ae9-69710c64889d.mp4\r\n\r\n\r\n\r\n### Environment\r\n**OS System**: Windows 10\r\n**manim version**: master <!-- make sure you are using the latest version of master branch -->\r\n**python version**: 3.9.5\r\n\n", "hints_text": "", "created_at": "2021-06-18T12:35:11Z"}
{"repo": "3b1b/manim", "pull_number": 1543, "instance_id": "3b1b__manim-1543", "issue_numbers": ["1533"], "base_commit": "b4f23e8d8ecce42acfb630e541830197c0f12bec", "patch": "diff --git a/docs/source/development/changelog.rst b/docs/source/development/changelog.rst\nindex 573df074ea..5fe48f0840 100644\n--- a/docs/source/development/changelog.rst\n+++ b/docs/source/development/changelog.rst\n@@ -16,6 +16,7 @@ Fixed bugs\n - Fixed chaining animation in example scenes\n - Fixed the default color of tip\n - Fixed a typo in ``ShowPassingFlashWithThinningStrokeWidth``\n+- Fixed the default size of ``Text``\n \n New Features\n ^^^^^^^^^^^^\ndiff --git a/manimlib/mobject/svg/text_mobject.py b/manimlib/mobject/svg/text_mobject.py\nindex ed17327268..39e8ff25bc 100644\n--- a/manimlib/mobject/svg/text_mobject.py\n+++ b/manimlib/mobject/svg/text_mobject.py\n@@ -11,14 +11,14 @@\n from manimlib.constants import *\n from manimlib.mobject.geometry import Dot\n from manimlib.mobject.svg.svg_mobject import SVGMobject\n+from manimlib.mobject.svg.tex_mobject import TexText\n from manimlib.mobject.types.vectorized_mobject import VGroup\n from manimlib.utils.config_ops import digest_config\n from manimlib.utils.customization import get_customization\n-from manimlib.utils.directories import get_downloads_dir, get_text_dir\n+from manimlib.utils.directories import get_downloads_dir, get_text_dir, get_temp_dir\n from manimpango import PangoUtils\n from manimpango import TextSetting\n \n-TEXT_MOB_SCALE_FACTOR = 1/100\n DEFAULT_LINE_SPACING_SCALE = 0.3\n \n class Text(SVGMobject):\n@@ -42,6 +42,7 @@ class Text(SVGMobject):\n         \"t2s\": {},\n         \"t2w\": {},\n         \"disable_ligatures\": True,\n+        \"debug\": False,\n     }\n \n     def __init__(self, text, **config):\n@@ -77,8 +78,21 @@ def __init__(self, text, **config):\n             self.set_color_by_t2g()\n \n         # anti-aliasing\n-        if self.height is None:\n-            self.scale(TEXT_MOB_SCALE_FACTOR)\n+        if self.height is None and not self.debug:\n+            self.load_scale_factor()\n+            self.scale(self.scale_factor * self.font_size)\n+    \n+    def load_scale_factor(self):\n+        factor_file = os.path.join(get_temp_dir(), \"text_scale_factor.txt\")\n+        if os.path.exists(factor_file):\n+            with open(factor_file, 'r') as f:\n+                self.scale_factor = float(f.read())\n+        else:\n+            tex_height = TexText(\"b\", font_size=1).get_height()\n+            text_height = Text(\"b\", font_size=1, debug=True).get_height()\n+            self.scale_factor = tex_height / text_height\n+            with open(factor_file, \"w\") as f:\n+                f.write(str(self.scale_factor))\n \n     def remove_empty_path(self, file_name):\n         with open(file_name, 'r') as fpr:\n", "test_patch": "", "problem_statement": "Tex text not the correct size\n### Describe the error\r\nWhen running the code, the size doesn't match the one expected (and quite a bit)\r\n\r\n### Code and Error\r\n**Code**:\r\n```\r\n#Made by JsonV on the Manim Discord\r\nclass NumGenerator(Scene):\r\n    def construct(self):\r\n        num_gen_tex = Tex(\"Number Generator: \").to_edge(UL)\r\n        self.play(Write(num_gen_tex))\r\n\r\n        i = 0\r\n        nums = []\r\n        animations = []\r\n        for k in range(10):\r\n            a = np.random.normal(loc=100, scale=15)\r\n            num = DecimalNumber(num_decimal_places=0).set_value(a)\r\n            num.next_to(num_gen_tex, RIGHT)\r\n            nums.append(num)\r\n            animations.append(Write(num))\r\n            animations.append(num.animate.to_edge(DL).shift(RIGHT*i))\r\n            i += 1.3\r\n\r\n        for animation in animations:\r\n            self.play(animation)\r\n        for num in nums:\r\n            num.set_fill(ORANGE)\r\n        nums[0].set_fill(BLUE)\r\n\r\n        self.wait()\r\n```\r\n\r\n\r\n### Output\r\n**Result Expected**\r\nhttps://user-images.githubusercontent.com/73761711/121065729-62826a00-c7c9-11eb-92c2-ee10d007166f.mp4\r\n\r\n**Result Get**\r\nhttps://user-images.githubusercontent.com/73761711/121065787-6f06c280-c7c9-11eb-8ae9-69710c64889d.mp4\r\n\r\n\r\n\r\n### Environment\r\n**OS System**: Windows 10\r\n**manim version**: master <!-- make sure you are using the latest version of master branch -->\r\n**python version**: 3.9.5\r\n\n", "hints_text": "", "created_at": "2021-06-15T11:15:02Z"}
{"repo": "3b1b/manim", "pull_number": 1355, "instance_id": "3b1b__manim-1355", "issue_numbers": ["1354"], "base_commit": "8f52c7bda8e298d15d3958ba76bc56648d4a9e19", "patch": "diff --git a/manimlib/mobject/number_line.py b/manimlib/mobject/number_line.py\nindex 1e50692e7f..8736ee6cbd 100644\n--- a/manimlib/mobject/number_line.py\n+++ b/manimlib/mobject/number_line.py\n@@ -99,7 +99,7 @@ def get_tick(self, x, size=None):\n         return result\n \n     def get_tick_marks(self):\n-        return self.tick_marks\n+        return self.ticks\n \n     def number_to_point(self, number):\n         alpha = float(number - self.x_min) / (self.x_max - self.x_min)\ndiff --git a/manimlib/scene/graph_scene.py b/manimlib/scene/graph_scene.py\nindex 6bfc6d34d5..cc3faf78f7 100644\n--- a/manimlib/scene/graph_scene.py\n+++ b/manimlib/scene/graph_scene.py\n@@ -82,7 +82,7 @@ def setup_axes(self, animate=False):\n         if len(self.x_labeled_nums) > 0:\n             if self.exclude_zero_label:\n                 self.x_labeled_nums = [x for x in self.x_labeled_nums if x != 0]\n-            x_axis.add_numbers(*self.x_labeled_nums)\n+            x_axis.add_numbers(self.x_labeled_nums)\n         if self.x_axis_label:\n             x_label = TexText(self.x_axis_label)\n             x_label.next_to(\n@@ -116,7 +116,7 @@ def setup_axes(self, animate=False):\n         if len(self.y_labeled_nums) > 0:\n             if self.exclude_zero_label:\n                 self.y_labeled_nums = [y for y in self.y_labeled_nums if y != 0]\n-            y_axis.add_numbers(*self.y_labeled_nums)\n+            y_axis.add_numbers(self.y_labeled_nums)\n         if self.y_axis_label:\n             y_label = TexText(self.y_axis_label)\n             y_label.next_to(\n", "test_patch": "", "problem_statement": "Trouble with setup_axes( )\n### Describe the error\r\nI'm new using Manim and I tried to animate a basic graph plot. When I run the code is displayed a error in self.setup_axes(). It is related with \"tick_marks\". What should I do?\r\n\r\n### Code and Error\r\n**Code**:\r\nfrom manimlib.imports import *\r\nimport numpy as np \r\n\r\n\r\nclass Plot2yLabelNumbers(GraphScene):\r\n    CONFIG = {\r\n        \"y_min\": 0,\r\n        \"y_max\": 100,\r\n        \"y_axis_config\": {\"tick_frequency\": 10},\r\n        \"y_labeled_nums\": np.arange(0, 100, 10)\r\n    }\r\n\r\n    def construct(self):\r\n        self.setup_axes()\r\n        dot = Dot().move_to(self.coords_to_point(PI / 2, 20))\r\n        func_graph = self.get_graph(lambda x: 20 * np.sin(x))\r\n        self.add(dot,func_graph)\r\n**Error**:\r\nTraceback (most recent call last):\r\n  File \"manim.py\", line 5, in <module>\r\n    manimlib.main()\r\n  File \"/home/hugo/manim-master/manimlib/__init__.py\", line 12, in main\r\n    scene.run()\r\n  File \"/home/hugo/manim-master/manimlib/scene/scene.py\", line 75, in run\r\n    self.construct()\r\n  File \"/home/hugo/Documentos/grafica.py\", line 14, in construct\r\n    self.setup_axes()\r\n  File \"/home/hugo/manim-master/manimlib/scene/graph_scene.py\", line 89, in setup_axes\r\n    x_axis.get_tick_marks(), UP + RIGHT,\r\n  File \"/home/hugo/manim-master/manimlib/mobject/number_line.py\", line 102, in get_tick_marks\r\n    return self.tick_marks\r\nAttributeError: 'NumberLine' object has no attribute 'tick_marks'\r\n\r\n\r\n### Environment\r\n**OS System**: Ubuntu\r\n**manim version**: I reinstalled it today\r\n**python version**: 3.8\n", "hints_text": "", "created_at": "2021-02-05T06:06:29Z"}
{"repo": "3b1b/manim", "pull_number": 1343, "instance_id": "3b1b__manim-1343", "issue_numbers": ["1330"], "base_commit": "3938f81c1b4a5ee81d5bfc6563c17a225f7e5068", "patch": "diff --git a/manimlib/window.py b/manimlib/window.py\nindex 9a883e22b1..eeb60ae52b 100644\n--- a/manimlib/window.py\n+++ b/manimlib/window.py\n@@ -12,7 +12,6 @@ class Window(PygletWindow):\n     resizable = True\n     gl_version = (3, 3)\n     vsync = True\n-    samples = 1\n     cursor = True\n \n     def __init__(self, scene, **kwargs):\n", "test_patch": "", "problem_statement": "Error after installing manim\nI installed all manim & dependecies, but when I ran `python -m manim example_scenes.py OpeningManimExample`, I got the following error:\r\n`Traceback (most recent call last):\r\n  File \"c:\\users\\jm\\anaconda3\\lib\\runpy.py\", line 194, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"c:\\users\\jm\\anaconda3\\lib\\runpy.py\", line 87, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\jm\\Documents\\work\\manim_new\\manim\\manim.py\", line 5, in <module>\r\n    manimlib.main()\r\n  File \"C:\\Users\\jm\\Documents\\work\\manim_new\\manim\\manimlib\\__init__.py\", line 9, in main\r\n    scenes = manimlib.extract_scene.main(config)\r\n  File \"C:\\Users\\jm\\Documents\\work\\manim_new\\manim\\manimlib\\extract_scene.py\", line 113, in main\r\n    scenes = get_scenes_to_render(all_scene_classes, scene_config, config)\r\n  File \"C:\\Users\\jm\\Documents\\work\\manim_new\\manim\\manimlib\\extract_scene.py\", line 74, in get_scenes_to_render\r\n    scene = scene_class(**scene_config)\r\n  File \"C:\\Users\\jm\\Documents\\work\\manim_new\\manim\\manimlib\\scene\\scene.py\", line 44, in __init__\r\n    self.window = Window(self, **self.window_config)\r\n  File \"C:\\Users\\jm\\Documents\\work\\manim_new\\manim\\manimlib\\window.py\", line 19, in __init__\r\n    super().__init__(**kwargs)\r\n  File \"C:\\Users\\jm\\Envs\\manim.new\\lib\\site-packages\\moderngl_window\\context\\pyglet\\window.py\", line 51, in __init__\r\n    self._window = PygletWrapper(\r\n  File \"C:\\Users\\jm\\Envs\\manim.new\\lib\\site-packages\\pyglet\\window\\win32\\__init__.py\", line 134, in __init__\r\n    super(Win32Window, self).__init__(*args, **kwargs)\r\n  File \"C:\\Users\\jm\\Envs\\manim.new\\lib\\site-packages\\pyglet\\window\\__init__.py\", line 603, in __init__\r\n    config = screen.get_best_config(config)\r\n  File \"C:\\Users\\jm\\Envs\\manim.new\\lib\\site-packages\\pyglet\\canvas\\base.py\", line 194, in get_best_config\r\n    raise window.NoSuchConfigException()\r\npyglet.window.NoSuchConfigException`.\r\nAny advice? And thank you\n", "hints_text": "Try to comment out this line?\r\nhttps://github.com/3b1b/manim/blob/fe85d4e02f6935c49fb0b88eebbd492dfff2d324/manimlib/window.py#L15\n@TonyCrane  Thanks a lot. I had the same problem. And your method is really useful!\nFor others (on Windows?) who have seen the above error and still have issues, I had to:\r\n1) Install miktek to get rid of the File Not Found error.\r\n2) And change this line:\r\nhttps://github.com/3b1b/manim/blob/fe85d4e02f6935c49fb0b88eebbd492dfff2d324/manimlib/animation/creation.py#L136\r\nto this:\r\n```python\r\n            self.lag_ratio = min(4.0 / max(0.1, length), 0.2)\r\n```\r\nto get rid of the `ZeroDivisionError: float division by zero` error.\r\n", "created_at": "2021-02-03T09:23:59Z"}
{"repo": "3b1b/manim", "pull_number": 780, "instance_id": "3b1b__manim-780", "issue_numbers": ["779"], "base_commit": "0e1da5ef28bd939d84dce6142435f729271ee2d2", "patch": "diff --git a/docs/source/installation/windows.rst b/docs/source/installation/windows.rst\nindex 5f6a836b38..ebdd5ce62c 100644\n--- a/docs/source/installation/windows.rst\n+++ b/docs/source/installation/windows.rst\n@@ -54,7 +54,7 @@ Install manim python dependencies with ``pip install -r requirement.txt``\n Test the installation\n ---------------------\n \n-Type in ``python -m manim -h`` and if nothing went wrong during the installtion process you should see the help text.\n+Type in ``python -m manim -h`` and if nothing went wrong during the installation process you should see the help text.\n \n Use ``python -m manim example_scenes.py SquareToCircle -pl`` to render the example scene and the file should play after rendering. The movie file should be\n in ``media/videos/example_scenes/480p15``\n", "test_patch": "", "problem_statement": "Simple typo in the Windows Installation Documentation\nReplace installtion with installation.\n", "hints_text": "", "created_at": "2019-10-31T11:40:24Z"}
{"repo": "3b1b/manim", "pull_number": 663, "instance_id": "3b1b__manim-663", "issue_numbers": ["662"], "base_commit": "49582c35919097585699598ad0ca49fe3f2117b5", "patch": "diff --git a/environment.yml b/environment.yml\nindex 85e1923fa9..60b257c647 100644\n--- a/environment.yml\n+++ b/environment.yml\n@@ -5,7 +5,7 @@ channels:\n dependencies:\n   - python=3.7\n   - cairo\n-  - ffmpeg \n+  - ffmpeg\n   - colour==0.1.5\n   - numpy==1.15.0\n   - pillow==5.2.0\n@@ -14,4 +14,6 @@ dependencies:\n   - opencv==3.4.2\n   - pycairo==1.18.0\n   - pydub==0.23.0\n-  - pyreadline\n\\ No newline at end of file\n+  - ffmpeg\n+  - pip:\n+    - pyreadline\n", "test_patch": "", "problem_statement": "Conda environment: pyreadline not available\nThe issue can be resolved by installing pyreadline package via pip.\n", "hints_text": "Change the last line with following code in `environment.yml`\r\n```\r\n  - pip:\r\n    - pyreadline\r\n```\r\nThis worked for me!", "created_at": "2019-08-01T13:45:16Z"}
{"repo": "3b1b/manim", "pull_number": 520, "instance_id": "3b1b__manim-520", "issue_numbers": ["519"], "base_commit": "c579c7d99f2f507cf90b1334b9128e11e1824968", "patch": "diff --git a/README.md b/README.md\nindex 5ac0ba1761..012d9df4b1 100644\n--- a/README.md\n+++ b/README.md\n@@ -49,6 +49,14 @@ manim.py example_scenes.py SquareToCircle -pl\n     python3 manim.py example_scenes.py SquareToCircle -pl\n     ```\n \n+\n+## Anaconda Install\n+\n+* Install sox and latex as above. \n+* Create a conda environment using `conda env create -f environment.yml`\n+* **WINDOWS ONLY** Install `pyreadline` via `pip install pyreadline`. \n+\n+\n ### Using `virtualenv` and `virtualenvwrapper`\n After installing `virtualenv` and `virtualenvwrapper`\n ```sh\ndiff --git a/environment.yml b/environment.yml\nnew file mode 100644\nindex 0000000000..85e1923fa9\n--- /dev/null\n+++ b/environment.yml\n@@ -0,0 +1,17 @@\n+name: manim\n+channels:\n+  - defaults\n+  - conda-forge\n+dependencies:\n+  - python=3.7\n+  - cairo\n+  - ffmpeg \n+  - colour==0.1.5\n+  - numpy==1.15.0\n+  - pillow==5.2.0\n+  - scipy==1.1.0\n+  - tqdm==4.24.0\n+  - opencv==3.4.2\n+  - pycairo==1.18.0\n+  - pydub==0.23.0\n+  - pyreadline\n\\ No newline at end of file\n", "test_patch": "", "problem_statement": "Conda environment for installing manim on Windows\n### Feature request\r\n\r\nIt would be nice to install manim using anaconda environment for windows. The anaconda environment file can be used to automatically install most of the external packages, e.g. cairo, ffmpeg, and other pip dependencies. \r\n\r\nOnly sox, and latex need to be installed separately. \r\n\n", "hints_text": "", "created_at": "2019-04-30T19:47:25Z"}
{"repo": "3b1b/manim", "pull_number": 313, "instance_id": "3b1b__manim-313", "issue_numbers": ["284"], "base_commit": "6964db2bd58e3d5ad905320a137a39a610e32e61", "patch": "diff --git a/.travis.yml b/.travis.yml\nnew file mode 100644\nindex 0000000000..28d37e987b\n--- /dev/null\n+++ b/.travis.yml\n@@ -0,0 +1,22 @@\n+group: travis_latest\n+language: python\n+cache: pip\n+matrix:\n+  include:\n+    - python: 3.7\n+      dist: xenial    # required for Python 3.7 (travis-ci/travis-ci#9069)\n+      sudo: required  # required for Python 3.7 (travis-ci/travis-ci#9069)\n+install:\n+  - pip install --upgrade pip\n+  - pip install -r requirements.txt\n+  - pip install flake8\n+before_script:\n+  # stop the build if there are Python syntax errors or undefined names\n+  - flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics\n+  # exit-zero treats all errors as warnings.  The GitHub editor is 127 chars wide\n+  - flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n+script:\n+  - true  # add other tests here\n+notifications:\n+  on_success: change\n+  on_failure: change  # `always` will be the setting once code changes slow down\ndiff --git a/README.md b/README.md\nindex 50f91451e7..84a7cff45f 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,6 +1,9 @@\n # Manim\n Animation engine for explanatory math videos.\n \n+[![build](https://img.shields.io/travis/3b1b/manim.svg \"Travis build status\")](https://travis-ci.com/3b1b/manim)\n+\n+\n For those who want to play around with this tool, I should be upfront that I've mostly had my own use cases (i.e. 3b1b videos) in mind while building it, and it might not be the most friendly thing to get up and running.  In particular, I have not done a great job tracking requirements, writing\n tests, and documentation, to put it euphemistically, almost exclusively takes the form of naming conventions.\n \n", "test_patch": "", "problem_statement": "Suggestion: Add some automated testing like Travis CI, Circle CI, Appveyor\nThey are all free for Open Source projects like this one.\r\n\r\nhttps://github.com/marketplace/category/continuous-integration\n", "hints_text": "It's pretty clear from [the history of conversations on this topic](https://github.com/3b1b/manim/issues?utf8=\u2713&q=continuous+integration) that the developers prioritize quick development over the more stable yet slower approach with continuous integration, and the decision makes sense in light of the motivations outlined in the README.\r\n\r\nThat said, the beauty of open source is that we can make this change ourselves. I've started a fork with Circle CI at https://github.com/eulertour/manim, and I'm going to add more tests and documentation in an effort to make a more stable version of this project that's more accessible to the open source community. Any contributions or suggestions to help with this would be greatly appreciated.\r\n\r\nI don't mean to plug myself or anything, but the developers have made it clear that maintaining the software isn't a big priority right now. I just want to see this project get the growth and attention it deserves.\nPeople who want to develop fast use CI.\nThat may be, but it's clear that there's no interest in adding it to this repository. The beauty of open source is that we can do it on our own.", "created_at": "2018-09-24T07:38:01Z"}
{"repo": "3b1b/manim", "pull_number": 174, "instance_id": "3b1b__manim-174", "issue_numbers": ["123"], "base_commit": "d0a674780e5d470acf8c9c1526ad8ee916ad484f", "patch": "diff --git a/topics/geometry.py b/topics/geometry.py\nindex fe98bb11e6..81ca1316e3 100644\n--- a/topics/geometry.py\n+++ b/topics/geometry.py\n@@ -25,8 +25,8 @@ def generate_points(self):\n         anchors = np.array([\n             np.cos(a)*RIGHT+np.sin(a)*UP\n             for a in np.linspace(\n-                self.start_angle, \n-                self.start_angle + self.angle, \n+                self.start_angle,\n+                self.start_angle + self.angle,\n                 self.num_anchors\n             )\n         ])\n@@ -56,7 +56,7 @@ def add_tip(self, tip_length = 0.25, at_start = False, at_end = True):\n             p1, p2 = self.points[-3:-1]\n             # self.points[-2:] did overshoot\n             start_arrow = Arrow(\n-                p1, 2*p2 - p1, \n+                p1, 2*p2 - p1,\n                 tip_length = tip_length,\n                 max_tip_length_to_length_ratio = 2.0\n             )\n@@ -66,16 +66,12 @@ def add_tip(self, tip_length = 0.25, at_start = False, at_end = True):\n             p4, p3 = self.points[1:3]\n             # self.points[:2] did overshoot\n             end_arrow = Arrow(\n-                p3, 2*p4 - p3, \n+                p3, 2*p4 - p3,\n                 tip_length = tip_length,\n                 max_tip_length_to_length_ratio = 2.0\n             )\n             self.add(end_arrow.split()[-1])\n-        \n \n-\n-\n-        \n         self.set_color(self.get_color())\n         return self\n \n@@ -100,7 +96,7 @@ def stop_angle(self):\n     def set_bound_angles(self,start=0,stop=np.pi):\n         self.start_angle = start\n         self.angle = stop - start\n-        \n+\n         return self\n \n \n@@ -132,7 +128,7 @@ def __init__(self, start_point, end_point, angle = TAU/4, **kwargs):\n             radius = radius,\n             start_angle = start_angle,\n             **kwargs)\n-        \n+\n         self.move_arc_center_to(arc_center)\n \n class CurvedArrow(ArcBetweenPoints):\n@@ -145,7 +141,7 @@ def __init__(self, start_point, end_point, angle = TAU/4, **kwargs):\n         else:\n             ArcBetweenPoints.__init__(self, end_point, start_point, angle = -angle, **kwargs)\n             self.add_tip(at_start = False, at_end = True)\n-        \n+\n \n class CurvedDoubleArrow(ArcBetweenPoints):\n \n@@ -483,7 +479,7 @@ def __init__(self, *args, **kwargs):\n         self.init_colors()\n \n     def init_tip(self):\n-        self.tip = self.add_tip()\n+        self.add_tip()\n \n     def add_tip(self, add_at_end = True):\n         tip = VMobject(\n@@ -496,13 +492,16 @@ def add_tip(self, add_at_end = True):\n         )\n         self.set_tip_points(tip, add_at_end, preserve_normal = False)\n         self.add(tip)\n+        if not hasattr(self, 'tip'):\n+            self.tip = []\n+        self.tip.append(tuple((tip, add_at_end)))\n         return tip\n \n     def add_rectangular_stem(self):\n         self.rect = Rectangle(\n             stroke_width = 0,\n-            fill_color = self.tip.get_fill_color(),\n-            fill_opacity = self.tip.get_fill_opacity()\n+            fill_color = self.tip[0][0].get_fill_color(),\n+            fill_opacity = self.tip[0][0].get_fill_opacity()\n         )\n         self.add_to_back(self.rect)\n         self.set_stroke(width = 0)\n@@ -511,7 +510,7 @@ def add_rectangular_stem(self):\n     def set_rectangular_stem_points(self):\n         start, end = self.get_start_and_end()\n         vect = end - start\n-        tip_base_points = self.tip.get_anchors()[1:]\n+        tip_base_points = self.tip[0][0].get_anchors()[1:]\n         tip_base = center_of_mass(tip_base_points)\n         tbp1, tbp2 = tip_base_points\n         perp_vect = tbp2 - tbp1\n@@ -535,8 +534,8 @@ def set_rectangular_stem_points(self):\n         return self\n \n     def set_tip_points(\n-        self, tip, \n-        add_at_end = True, \n+        self, tip,\n+        add_at_end = True,\n         tip_length = None,\n         preserve_normal = True,\n         ):\n@@ -564,7 +563,7 @@ def set_tip_points(\n             v *= tip_length/np.linalg.norm(v)\n         ratio = self.tip_width_to_length_ratio\n         tip.set_points_as_corners([\n-            end_point, \n+            end_point,\n             end_point-vect+perp_vect*ratio/2,\n             end_point-vect-perp_vect*ratio/2,\n         ])\n@@ -572,7 +571,7 @@ def set_tip_points(\n         return self\n \n     def get_normal_vector(self):\n-        p0, p1, p2 = self.tip.get_anchors()\n+        p0, p1, p2 = self.tip[0][0].get_anchors()\n         result = np.cross(p2 - p1, p1 - p0)\n         norm = np.linalg.norm(result)\n         if norm == 0:\n@@ -586,7 +585,7 @@ def reset_normal_vector(self):\n \n     def get_end(self):\n         if hasattr(self, \"tip\"):\n-            return self.tip.get_anchors()[0]\n+            return self.tip[0][0].get_anchors()[0]\n         else:\n             return Line.get_end(self)\n \n@@ -595,14 +594,16 @@ def get_tip(self):\n \n     def put_start_and_end_on(self, *args, **kwargs):\n         Line.put_start_and_end_on(self, *args, **kwargs)\n-        self.set_tip_points(self.tip, preserve_normal = False)\n+        self.set_tip_points(self.tip[0][0], preserve_normal = False)\n         self.set_rectangular_stem_points()\n         return self\n \n     def scale(self, scale_factor, **kwargs):\n         Line.scale(self, scale_factor, **kwargs)\n         if self.preserve_tip_size_when_scaling:\n-            self.set_tip_points(self.tip)\n+            for t in self.tip:\n+                print(t)\n+                self.set_tip_points(t[0], add_at_end=t[1])\n         if self.use_rectangular_stem:\n             self.set_rectangular_stem_points()\n         return self\n@@ -622,8 +623,7 @@ def __init__(self, direction, **kwargs):\n \n class DoubleArrow(Arrow):\n     def init_tip(self):\n-        self.tip = self.add_tip()\n-        self.second_tip = self.add_tip(add_at_end = False)\n+        self.tip = [(self.add_tip(), True), (self.add_tip(add_at_end = False), False)]\n \n class CubicBezier(VMobject):\n     def __init__(self, points, **kwargs):\n@@ -681,7 +681,7 @@ class Square(Rectangle):\n     def __init__(self, **kwargs):\n         digest_config(self, kwargs)\n         Rectangle.__init__(\n-            self, \n+            self,\n             height = self.side_length,\n             width = self.side_length,\n             **kwargs\n@@ -762,7 +762,7 @@ class Cross(VGroup):\n         \"stroke_width\" : 6,\n     }\n     def __init__(self, mobject, **kwargs):\n-        VGroup.__init__(self, \n+        VGroup.__init__(self,\n             Line(UP+LEFT, DOWN+RIGHT),\n             Line(UP+RIGHT, DOWN+LEFT),\n         )\n", "test_patch": "", "problem_statement": "Tips of DoubleArrow scale differently\nSomething I have noticed, but don't need to work right now. And couldn't figure out how to fix fast.\r\n\r\n```\r\nfrom helpers import *\r\nfrom mobject import Mobject\r\nfrom mobject.vectorized_mobject import *\r\nfrom animation.animation import Animation\r\nfrom animation.transform import *\r\nfrom animation.simple_animations import *\r\nfrom topics.geometry import *\r\nfrom scene import Scene\r\nfrom camera import Camera\r\n\r\n\r\nclass SampleScene(Scene):\r\n\r\n    def construct(self):\r\n\r\n        mob = DoubleArrow([-1,-1,0],[1,1,0])\r\n        self.add(mob)\r\n\r\n        self.play(\r\n            mob.scale,2\r\n        )\r\n```\r\n\r\ngives:\r\n\r\n![samplescene](https://user-images.githubusercontent.com/13440601/36206940-829f5b0c-1194-11e8-9520-298b4c0acd41.png)\r\n\n", "hints_text": "", "created_at": "2018-03-25T20:23:18Z"}
{"repo": "3b1b/manim", "pull_number": 98, "instance_id": "3b1b__manim-98", "issue_numbers": ["96", "96"], "base_commit": "994749ceadf9f87f2ebe40bbb795fbb2b696f377", "patch": "diff --git a/old_projects/nn/network.py b/old_projects/nn/network.py\nindex 3ec390da4a..2aa3aab432 100644\n--- a/old_projects/nn/network.py\n+++ b/old_projects/nn/network.py\n@@ -29,6 +29,12 @@\n # DEFAULT_LAYER_SIZES = [28**2, 80, 10]\n DEFAULT_LAYER_SIZES = [28**2, 16, 16, 10]\n \n+try:\n+    xrange          # Python 2\n+except NameError:\n+    xrange = range  # Python 3\n+\n+\n class Network(object):\n     def __init__(self, sizes, non_linearity = \"sigmoid\"):\n         \"\"\"The list ``sizes`` contains the number of neurons in the\ndiff --git a/old_projects/number_line_scene.py b/old_projects/number_line_scene.py\nindex d81c1bcd18..5054f4551a 100644\n--- a/old_projects/number_line_scene.py\n+++ b/old_projects/number_line_scene.py\n@@ -1,6 +1,10 @@\n import numpy as np\n-from animation.transform import Transform\n+from animation.transform import ApplyMethod, Transform\n+from constants import RIGHT, SPACE_WIDTH, UP\n+from helpers import counterclockwise_path, straight_path\n from point_cloud_mobject import Point\n+from scene import Scene\n+from topics.geometry import Line\n from topics.number_line import NumberLine\n \n class NumberLineScene(Scene):\n@@ -23,7 +27,7 @@ def zoom_in_on(self, number, zoom_factor, run_time = 2.0):\n             number_at_center = number\n         )\n         new_displayed_numbers = new_number_line.default_numbers_to_display()\n-        new_number_mobs = new_number_line.get_number_mobjects(*new_displayed_numbers)        \n+        new_number_mobs = new_number_line.get_number_mobjects(*new_displayed_numbers)\n \n         transforms = []\n         additional_mobjects = []\n@@ -78,11 +82,3 @@ def show_multiplication(self, num, **kwargs):\n             ApplyMethod(mob.shift, (num-1)*mob.get_center()[0]*RIGHT, **kwargs)\n             for mob in self.number_mobs\n         ])\n-\n-\n-\n-\n-\n-\n-\n-\n", "test_patch": "", "problem_statement": "10 undefined names in old_projects\nflake8 testing of https://github.com/3b1b/manim on Python 2.7.14\r\n\r\n$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__\r\n```\r\n./old_projects/number_line_scene.py:6:23: F821 undefined name 'Scene'\r\nclass NumberLineScene(Scene):\r\n                      ^\r\n./old_projects/number_line_scene.py:15:18: F821 undefined name 'SPACE_WIDTH'\r\n        radius = SPACE_WIDTH/unit_length_to_spatial_width\r\n                 ^\r\n./old_projects/number_line_scene.py:49:40: F821 undefined name 'UP'\r\n            new_point += mob_center[1]*UP\r\n                                       ^\r\n./old_projects/number_line_scene.py:53:35: F821 undefined name 'ApplyMethod'\r\n                transforms.append(ApplyMethod(mob.shift, new_point - mob_center))\r\n                                  ^\r\n./old_projects/number_line_scene.py:55:35: F821 undefined name 'Line'\r\n        line_to_hide_pixelation = Line(\r\n                                  ^\r\n./old_projects/number_line_scene.py:72:39: F821 undefined name 'straight_path'\r\n                kwargs[\"path_func\"] = straight_path\r\n                                      ^\r\n./old_projects/number_line_scene.py:74:39: F821 undefined name 'counterclockwise_path'\r\n                kwargs[\"path_func\"] = counterclockwise_path()\r\n                                      ^\r\n./old_projects/number_line_scene.py:76:13: F821 undefined name 'ApplyMethod'\r\n            ApplyMethod(self.number_line.stretch, num, 0, **kwargs)\r\n            ^\r\n./old_projects/number_line_scene.py:78:13: F821 undefined name 'ApplyMethod'\r\n            ApplyMethod(mob.shift, (num-1)*mob.get_center()[0]*RIGHT, **kwargs)\r\n            ^\r\n./old_projects/number_line_scene.py:78:64: F821 undefined name 'RIGHT'\r\n            ApplyMethod(mob.shift, (num-1)*mob.get_center()[0]*RIGHT, **kwargs)\r\n                                                               ^\r\n10    F821 undefined name 'Scene'\r\n```\n10 undefined names in old_projects\nflake8 testing of https://github.com/3b1b/manim on Python 2.7.14\r\n\r\n$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__\r\n```\r\n./old_projects/number_line_scene.py:6:23: F821 undefined name 'Scene'\r\nclass NumberLineScene(Scene):\r\n                      ^\r\n./old_projects/number_line_scene.py:15:18: F821 undefined name 'SPACE_WIDTH'\r\n        radius = SPACE_WIDTH/unit_length_to_spatial_width\r\n                 ^\r\n./old_projects/number_line_scene.py:49:40: F821 undefined name 'UP'\r\n            new_point += mob_center[1]*UP\r\n                                       ^\r\n./old_projects/number_line_scene.py:53:35: F821 undefined name 'ApplyMethod'\r\n                transforms.append(ApplyMethod(mob.shift, new_point - mob_center))\r\n                                  ^\r\n./old_projects/number_line_scene.py:55:35: F821 undefined name 'Line'\r\n        line_to_hide_pixelation = Line(\r\n                                  ^\r\n./old_projects/number_line_scene.py:72:39: F821 undefined name 'straight_path'\r\n                kwargs[\"path_func\"] = straight_path\r\n                                      ^\r\n./old_projects/number_line_scene.py:74:39: F821 undefined name 'counterclockwise_path'\r\n                kwargs[\"path_func\"] = counterclockwise_path()\r\n                                      ^\r\n./old_projects/number_line_scene.py:76:13: F821 undefined name 'ApplyMethod'\r\n            ApplyMethod(self.number_line.stretch, num, 0, **kwargs)\r\n            ^\r\n./old_projects/number_line_scene.py:78:13: F821 undefined name 'ApplyMethod'\r\n            ApplyMethod(mob.shift, (num-1)*mob.get_center()[0]*RIGHT, **kwargs)\r\n            ^\r\n./old_projects/number_line_scene.py:78:64: F821 undefined name 'RIGHT'\r\n            ApplyMethod(mob.shift, (num-1)*mob.get_center()[0]*RIGHT, **kwargs)\r\n                                                               ^\r\n10    F821 undefined name 'Scene'\r\n```\n", "hints_text": "\n", "created_at": "2018-01-29T09:28:46Z"}
