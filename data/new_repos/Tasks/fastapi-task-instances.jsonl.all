{"repo": "fastapi/fastapi", "pull_number": 12811, "instance_id": "fastapi__fastapi-12811", "issue_numbers": ["12554"], "base_commit": "3f2b4339aaff79983423643cae003c1378b0f54a", "patch": "diff --git a/docs/en/docs/tutorial/path-params.md b/docs/en/docs/tutorial/path-params.md\nindex fd9e745856fc4..7e83d3ae57e7f 100644\n--- a/docs/en/docs/tutorial/path-params.md\n+++ b/docs/en/docs/tutorial/path-params.md\n@@ -2,9 +2,7 @@\n \n You can declare path \"parameters\" or \"variables\" with the same syntax used by Python format strings:\n \n-```Python hl_lines=\"6-7\"\n-{!../../docs_src/path_params/tutorial001.py!}\n-```\n+{* ../../docs_src/path_params/tutorial001.py hl[6:7] *}\n \n The value of the path parameter `item_id` will be passed to your function as the argument `item_id`.\n \n@@ -18,9 +16,7 @@ So, if you run this example and go to <a href=\"http://127.0.0.1:8000/items/foo\"\n \n You can declare the type of a path parameter in the function, using standard Python type annotations:\n \n-```Python hl_lines=\"7\"\n-{!../../docs_src/path_params/tutorial002.py!}\n-```\n+{* ../../docs_src/path_params/tutorial002.py hl[7] *}\n \n In this case, `item_id` is declared to be an `int`.\n \n@@ -123,17 +119,13 @@ And then you can also have a path `/users/{user_id}` to get data about a specifi\n \n Because *path operations* are evaluated in order, you need to make sure that the path for `/users/me` is declared before the one for `/users/{user_id}`:\n \n-```Python hl_lines=\"6  11\"\n-{!../../docs_src/path_params/tutorial003.py!}\n-```\n+{* ../../docs_src/path_params/tutorial003.py hl[6,11] *}\n \n Otherwise, the path for `/users/{user_id}` would match also for `/users/me`, \"thinking\" that it's receiving a parameter `user_id` with a value of `\"me\"`.\n \n Similarly, you cannot redefine a path operation:\n \n-```Python hl_lines=\"6  11\"\n-{!../../docs_src/path_params/tutorial003b.py!}\n-```\n+{* ../../docs_src/path_params/tutorial003b.py hl[6,11] *}\n \n The first one will always be used since the path matches first.\n \n@@ -149,9 +141,7 @@ By inheriting from `str` the API docs will be able to know that the values must\n \n Then create class attributes with fixed values, which will be the available valid values:\n \n-```Python hl_lines=\"1  6-9\"\n-{!../../docs_src/path_params/tutorial005.py!}\n-```\n+{* ../../docs_src/path_params/tutorial005.py hl[1,6:9] *}\n \n /// info\n \n@@ -169,9 +159,7 @@ If you are wondering, \"AlexNet\", \"ResNet\", and \"LeNet\" are just names of Machine\n \n Then create a *path parameter* with a type annotation using the enum class you created (`ModelName`):\n \n-```Python hl_lines=\"16\"\n-{!../../docs_src/path_params/tutorial005.py!}\n-```\n+{* ../../docs_src/path_params/tutorial005.py hl[16] *}\n \n ### Check the docs\n \n@@ -187,17 +175,13 @@ The value of the *path parameter* will be an *enumeration member*.\n \n You can compare it with the *enumeration member* in your created enum `ModelName`:\n \n-```Python hl_lines=\"17\"\n-{!../../docs_src/path_params/tutorial005.py!}\n-```\n+{* ../../docs_src/path_params/tutorial005.py hl[17] *}\n \n #### Get the *enumeration value*\n \n You can get the actual value (a `str` in this case) using `model_name.value`, or in general, `your_enum_member.value`:\n \n-```Python hl_lines=\"20\"\n-{!../../docs_src/path_params/tutorial005.py!}\n-```\n+{* ../../docs_src/path_params/tutorial005.py hl[20] *}\n \n /// tip\n \n@@ -211,9 +195,7 @@ You can return *enum members* from your *path operation*, even nested in a JSON\n \n They will be converted to their corresponding values (strings in this case) before returning them to the client:\n \n-```Python hl_lines=\"18  21  23\"\n-{!../../docs_src/path_params/tutorial005.py!}\n-```\n+{* ../../docs_src/path_params/tutorial005.py hl[18,21,23] *}\n \n In your client you will get a JSON response like:\n \n@@ -252,9 +234,7 @@ In this case, the name of the parameter is `file_path`, and the last part, `:pat\n \n So, you can use it with:\n \n-```Python hl_lines=\"6\"\n-{!../../docs_src/path_params/tutorial004.py!}\n-```\n+{* ../../docs_src/path_params/tutorial004.py hl[6] *}\n \n /// tip\n \n", "test_patch": "", "problem_statement": "Update docs include syntax for source examples\n### Privileged issue\r\n\r\n- [X] I'm @tiangolo or he asked me directly to create an issue here.\r\n\r\n### Issue Content\r\n\r\nThis is a good first contribution. :nerd_face: \r\n\r\nThe code examples shown in the docs are actual Python files. They are even tested in CI, that's why you can always copy paste an example and it will always work, the example is tested.\r\n\r\nThe way those examples are included in the docs used a specific format. But now there's a new format available that is much simpler and easier to use than the previous one, in particular in complex cases, for example when there are examples in multiple versions of Python.\r\n\r\nBut not all the docs have the new format yet. The docs should use the new format to include examples. That is the task. :nerd_face: \r\n\r\n**It should be done as one PR per page updated.**\r\n\r\n## Simple Example\r\n\r\nBefore, the format was like:\r\n\r\n````markdown\r\n```Python hl_lines=\"3\"\r\n{!../../docs_src/first_steps/tutorial001.py!}\r\n```\r\n````\r\n\r\nNow the new format looks like:\r\n\r\n````markdown\r\n{* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n````\r\n\r\n* Instead of `{!` and `!}` it uses `{*` and `*}`\r\n* It no longer has a line above with:\r\n\r\n````markdown\r\n```Python\r\n````\r\n\r\n* And it no longer has a line below with:\r\n\r\n````markdown\r\n```\r\n````\r\n\r\n* The highlight is no longer a line with e.g. `hl_lines=\"3\"` (to highlight line 3), but instead in the same line there's a `hl[3]`.\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12552\r\n\r\n## Multiple Python Versions\r\n\r\nThere are some cases where there are variants of the same example for multiple versions of Python, or for using `Annotated` or not.\r\n\r\nIn those cases, the current include examples have syntax for tabs, and notes saying `Annotated` should be preferred. For example:\r\n\r\n````markdown\r\n//// tab | Python 3.9+\r\n\r\n```Python hl_lines=\"4  8  12\"\r\n{!> ../../docs_src/security/tutorial006_an_py39.py!}\r\n```\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n```Python hl_lines=\"2  7  11\"\r\n{!> ../../docs_src/security/tutorial006_an.py!}\r\n```\r\n\r\n////\r\n\r\n//// tab | Python 3.8+ non-Annotated\r\n\r\n/// tip\r\n\r\nPrefer to use the `Annotated` version if possible.\r\n\r\n///\r\n\r\n```Python hl_lines=\"2  6  10\"\r\n{!> ../../docs_src/security/tutorial006.py!}\r\n```\r\n\r\n////\r\n````\r\n\r\nIn these cases, it should be updated to only include the first one (the others will be included automatically :sunglasses: ):\r\n\r\n````markdown\r\n{* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n````\r\n\r\n* The syntax for tabs is also removed, all the other variants are included automatically.\r\n* The highlight lines are included for that same first file, the fragment with `hl_lines=\"4  8  12\"` is replaced with `hl[4,8,12]`\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12553\r\n\r\n## Highlight Lines\r\n\r\n### Simple Lines\r\n\r\nWhen there's a fragment like:\r\n\r\n````markdown\r\nhl_lines=\"4  8  12\"\r\n````\r\n\r\nThat means it is highlighting the lines 4, 8, and 12.\r\n\r\nThe new syntax is on the same include line:\r\n\r\n````markdown\r\nhl[4,8,12]\r\n````\r\n\r\n* It separates individual lines by commas.\r\n* It uses `hl`, with square brackets around.\r\n\r\n### Line Ranges\r\n\r\nWhen there are line ranges, like:\r\n\r\n````markdown\r\nhl_lines=\"4-6\"\r\n````\r\n\r\nThat means it is highlighting lines from 4 to 6 (so, 4, 5, and 6).\r\n\r\nThe new syntax uses `:` instead of `-` for the ranges:\r\n\r\n````markdown\r\nhl[4:6]\r\n````\r\n\r\n### Multiple Highlights\r\n\r\nThere are some highlights that include individual lines and also line ranges, for example the old syntax was:\r\n\r\n````markdown\r\nhl_lines=\"2  4-6  8-11  13\"\r\n````\r\n\r\nThat means it is highlighting:\r\n\r\n* Line 2\r\n* Lines from 4 to 6 (so, 4, 5, and 6)\r\n* Lines from 8 to 11 (so, 8, 9, 10, and 11)\r\n* Line 13\r\n\r\nThe new syntax separates by commas instead of spaces:\r\n\r\n````markdown\r\nhl[2,4:6,8:11,13]\r\n````\r\n\r\n## Include Specific Lines\r\n\r\nIn some cases, there are specific lines included instead of the entire file.\r\n\r\nFor example, the old syntax was:\r\n\r\n````markdown\r\n```Python hl_lines=\"7\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py[ln:1-7]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n````\r\n\r\nIn this example, the lines included are from line 1 to line 7 (lines 1, 2, 3, 4, 5, 6, 7). In the old syntax, it's defined with the fragment:\r\n\r\n````markdown\r\n[ln:1-7]\r\n````\r\n\r\nIn the new syntax, the included code from above would be:\r\n\r\n````markdown\r\n{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:7] hl[7] *}\r\n````\r\n\r\n* The lines to include that were defined with the fragment `[ln:1-7]`, are now defined with `ln[1:7]`\r\n\r\nThe new syntax `ln` as in `ln[1:7]` also supports multiple lines and ranges to include.\r\n\r\n### Comments Between Line Ranges\r\n\r\nIn the old syntax, when there are ranges of code included, there are comments like:\r\n\r\n````markdown\r\n# Code below omitted \ud83d\udc47\r\n````\r\n\r\nThe new syntax generates those comments automatically based on the line ranges.\r\n\r\n### Real Example\r\n\r\nA more real example of the include with the old syntax looked like this:\r\n\r\n````markdown\r\n//// tab | Python 3.10+\r\n\r\n```Python hl_lines=\"7\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py[ln:1-7]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n\r\n//// tab | Python 3.9+\r\n\r\n```Python hl_lines=\"9\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py39.py[ln:1-9]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py39.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n```Python hl_lines=\"9\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001.py[ln:1-9]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n````\r\n\r\nIn the new syntax, that is replaced with this:\r\n\r\n````markdown\r\n{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:7] hl[7] *}\r\n````\r\n\r\n* The only file that needs to be included and defined is the first one, and the lines to include and highlight are also needed for the first file.\r\n* All the other file includes, full file preview, comments, etc. are generated automatically.\r\n\r\n---\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12555\r\n\r\n## Help\r\n\r\nDo you want to help? Please do!\r\n\r\nRemember **it should be done as one PR per page updated.**\r\n\r\nIf you see a page that doesn't fit these cases, leave it as is, I'll take care of it later.\r\n\r\nBefore submitting a PR, check if there's another one already handling that file.\r\n\r\nPlease name the PR including the file path, for example:\r\n\r\n````markdown\r\n\ud83d\udcdd Update includes for `docs/tutorial/create-db-and-table.md`\r\n````\n", "hints_text": "Osis\r\n\r\nOn Sat, Oct 26, 2024, 6:37 PM Sebasti\u00e1n Ram\u00edrez ***@***.***>\r\nwrote:\r\n\r\n> Privileged issue\r\n>\r\n>    - I'm @tiangolo <https://github.com/tiangolo> or he asked me directly\r\n>    to create an issue here.\r\n>\r\n> Issue Content\r\n>\r\n> This is a good first contribution. \ud83e\udd13\r\n>\r\n> The code examples shown in the docs are actual Python files. They are even\r\n> tested in CI, that's why you can always copy paste an example and it will\r\n> always work, the example is tested.\r\n>\r\n> The way those examples are included in the docs used a specific format.\r\n> But now there's a new format available that is much simpler and easier to\r\n> use than the previous one, in particular in complex cases, for example when\r\n> there are examples in multiple versions of Python.\r\n>\r\n> But not all the docs have the new format yet. The docs should use the new\r\n> format to include examples. That is the task. \ud83e\udd13\r\n>\r\n> It should be done as one PR per page updated.\r\n> Simple Example\r\n>\r\n> Before, the format was like:\r\n>\r\n> ```Python hl_lines=\"3\"\r\n> {!../../docs_src/first_steps/tutorial001.py!}```\r\n>\r\n> Now the new format looks like:\r\n>\r\n> {* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n>\r\n>\r\n>    - Instead of {! and !} it uses {* and *}\r\n>    - It no longer has a line above with:\r\n>\r\n> ```Python\r\n>\r\n>\r\n>    - And it no longer has a line below with:\r\n>\r\n> ```\r\n>\r\n>\r\n>    - The highlight is no longer a line with e.g. hl_lines=\"3\" (to\r\n>    highlight line 3), but instead in the same line there's a hl[3].\r\n>\r\n> An example PR: #12552 <https://github.com/fastapi/fastapi/pull/12552>\r\n> Multiple Python Versions\r\n>\r\n> There are some cases where there are variants of the same example for\r\n> multiple versions of Python, or for using Annotated or not.\r\n>\r\n> In those cases, the current include examples have syntax for tabs, and\r\n> notes saying Annotated should be preferred. For example:\r\n>\r\n> //// tab | Python 3.9+\r\n> ```Python hl_lines=\"4  8  12\"\r\n> {!> ../../docs_src/security/tutorial006_an_py39.py!}```\r\n>\r\n> ////\r\n>\r\n> //// tab | Python 3.8+\r\n> ```Python hl_lines=\"2  7  11\"\r\n> {!> ../../docs_src/security/tutorial006_an.py!}```\r\n>\r\n> ////\r\n>\r\n> //// tab | Python 3.8+ non-Annotated\r\n>\r\n> /// tip\r\n>\r\n> Prefer to use the `Annotated` version if possible.\r\n>\r\n> ///\r\n> ```Python hl_lines=\"2  6  10\"\r\n> {!> ../../docs_src/security/tutorial006.py!}```\r\n>\r\n> ////\r\n>\r\n> In these cases, it should be updated to only include the first one (the\r\n> others will be included automatically \ud83d\ude0e ):\r\n>\r\n> {* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n>\r\n>\r\n>    - The syntax for tabs is also removed, all the other variants are\r\n>    included automatically.\r\n>    - The highlight lines are included for that same first file, the\r\n>    fragment with hl_lines=\"4 8 12\" is replaced with hl[4,8,12]\r\n>\r\n> An example PR: #12553 <https://github.com/fastapi/fastapi/pull/12553>\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/fastapi/fastapi/issues/12554>, or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/ABCOVL2FRNCDPALCW7LAZRLZ5OHY5AVCNFSM6AAAAABQUZLFL2VHI2DSMVQWIX3LMV43ASLTON2WKOZSGYYTKOBVGYYDINA>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n\nIeje\r\n\r\nOn Sat, Oct 26, 2024, 6:54 PM Rajendra Prasad K ***@***.***>\r\nwrote:\r\n\r\n> Osis\r\n>\r\n> On Sat, Oct 26, 2024, 6:37 PM Sebasti\u00e1n Ram\u00edrez ***@***.***>\r\n> wrote:\r\n>\r\n>> Privileged issue\r\n>>\r\n>>    - I'm @tiangolo <https://github.com/tiangolo> or he asked me directly\r\n>>    to create an issue here.\r\n>>\r\n>> Issue Content\r\n>>\r\n>> This is a good first contribution. \ud83e\udd13\r\n>>\r\n>> The code examples shown in the docs are actual Python files. They are\r\n>> even tested in CI, that's why you can always copy paste an example and it\r\n>> will always work, the example is tested.\r\n>>\r\n>> The way those examples are included in the docs used a specific format.\r\n>> But now there's a new format available that is much simpler and easier to\r\n>> use than the previous one, in particular in complex cases, for example when\r\n>> there are examples in multiple versions of Python.\r\n>>\r\n>> But not all the docs have the new format yet. The docs should use the new\r\n>> format to include examples. That is the task. \ud83e\udd13\r\n>>\r\n>> It should be done as one PR per page updated.\r\n>> Simple Example\r\n>>\r\n>> Before, the format was like:\r\n>>\r\n>> ```Python hl_lines=\"3\"\r\n>> {!../../docs_src/first_steps/tutorial001.py!}```\r\n>>\r\n>> Now the new format looks like:\r\n>>\r\n>> {* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n>>\r\n>>\r\n>>    - Instead of {! and !} it uses {* and *}\r\n>>    - It no longer has a line above with:\r\n>>\r\n>> ```Python\r\n>>\r\n>>\r\n>>    - And it no longer has a line below with:\r\n>>\r\n>> ```\r\n>>\r\n>>\r\n>>    - The highlight is no longer a line with e.g. hl_lines=\"3\" (to\r\n>>    highlight line 3), but instead in the same line there's a hl[3].\r\n>>\r\n>> An example PR: #12552 <https://github.com/fastapi/fastapi/pull/12552>\r\n>> Multiple Python Versions\r\n>>\r\n>> There are some cases where there are variants of the same example for\r\n>> multiple versions of Python, or for using Annotated or not.\r\n>>\r\n>> In those cases, the current include examples have syntax for tabs, and\r\n>> notes saying Annotated should be preferred. For example:\r\n>>\r\n>> //// tab | Python 3.9+\r\n>> ```Python hl_lines=\"4  8  12\"\r\n>> {!> ../../docs_src/security/tutorial006_an_py39.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> //// tab | Python 3.8+\r\n>> ```Python hl_lines=\"2  7  11\"\r\n>> {!> ../../docs_src/security/tutorial006_an.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> //// tab | Python 3.8+ non-Annotated\r\n>>\r\n>> /// tip\r\n>>\r\n>> Prefer to use the `Annotated` version if possible.\r\n>>\r\n>> ///\r\n>> ```Python hl_lines=\"2  6  10\"\r\n>> {!> ../../docs_src/security/tutorial006.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> In these cases, it should be updated to only include the first one (the\r\n>> others will be included automatically \ud83d\ude0e ):\r\n>>\r\n>> {* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n>>\r\n>>\r\n>>    - The syntax for tabs is also removed, all the other variants are\r\n>>    included automatically.\r\n>>    - The highlight lines are included for that same first file, the\r\n>>    fragment with hl_lines=\"4 8 12\" is replaced with hl[4,8,12]\r\n>>\r\n>> An example PR: #12553 <https://github.com/fastapi/fastapi/pull/12553>\r\n>>\r\n>> \u2014\r\n>> Reply to this email directly, view it on GitHub\r\n>> <https://github.com/fastapi/fastapi/issues/12554>, or unsubscribe\r\n>> <https://github.com/notifications/unsubscribe-auth/ABCOVL2FRNCDPALCW7LAZRLZ5OHY5AVCNFSM6AAAAABQUZLFL2VHI2DSMVQWIX3LMV43ASLTON2WKOZSGYYTKOBVGYYDINA>\r\n>> .\r\n>> You are receiving this because you are subscribed to this thread.Message\r\n>> ID: ***@***.***>\r\n>>\r\n>\r\n\ni want to contribute \r\nWill the issue be assigned?\n@FarhanAliRaza the issue is not assigned, there are many PRs that would come out of this, one PR per page fixed, so, you can just take a page that has the old syntax, check there are no other PRs handling it, then update the syntax, and make a PR for it.\n> @FarhanAliRaza the issue is not assigned, there are many PRs that would come out of this, one PR per page fixed, so, you can just take a page that has the old syntax, check there are no other PRs handling it, then update the syntax, and make a PR for it.\r\n\r\nthe game is kicked off \ud83d\ude04\nwhat about cases like this that has title\r\n`Python hl_lines=\"1  3\" title=\"app/routers/users.py\"\r\n{!../../docs_src/bigger_applications/app/routers/users.py!}`\r\n\n@FarhanAliRaza  do you know why your CI/CD passes successfully two of mine have failed now.\r\n\n@philipokiokio, your commits look fine for me . This is the error https://github.com/fastapi/fastapi/actions/runs/11533792038/job/32107125447?pr=12560\n@FarhanAliRaza cool, thanks man.\n> what about cases like this that has title `Python hl_lines=\"1 3\" title=\"app/routers/users.py\" {!../../docs_src/bigger_applications/app/routers/users.py!}`\r\n\r\n@tiangolo \n@FarhanAliRaza As suggested by @tiangolo, it'd be easier for everyone to understand which pages you're working on, if you can set the title of your PR with the file path.\r\n\r\nThanks for understanding.\r\n\r\nA reference PR from @tiangolo for your perusal: https://github.com/fastapi/fastapi/pull/12552\nHi @krishnamadhavan \r\n\r\nso when tabs were used above some code was deleted. is this the expected contribution. example\r\n\r\n```#### Tuple and Set\r\n\r\nYou would do the same to declare `tuple`s and `set`s:\r\n\r\n//// tab | Python 3.9+\r\n\r\n{* ../../docs_src/python_types/tutorial007_py39.py hl[1] *}\r\n\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n\r\n{* ../../docs_src/python_types/tutorial007.py hl[1,4] *}\r\n\r\n////```\r\n\r\n\r\n\r\n\r\nunlike the example above there was a tutorial for py 3.10\n> @FarhanAliRaza As suggested by @tiangolo, it'd be easier for everyone to understand which pages you're working on, if you can set the title of your PR with the file path.\n> \n> Thanks for understanding.\n> \n> A reference PR from @tiangolo for your perusal: https://github.com/fastapi/fastapi/pull/12552\n\nUpdated.\nCan you answer my above question?\nHope I got the tabs/ multi python version right :)\n> Hi @krishnamadhavan\r\n> \r\n> so when tabs were used above some code was deleted. is this the expected contribution. example\r\n> \r\n> ```\r\n> \r\n> You would do the same to declare `tuple`s and `set`s:\r\n> \r\n> //// tab | Python 3.9+\r\n> \r\n> {* ../../docs_src/python_types/tutorial007_py39.py hl[1] *}\r\n> \r\n> \r\n> ////\r\n> \r\n> //// tab | Python 3.8+\r\n> \r\n> \r\n> {* ../../docs_src/python_types/tutorial007.py hl[1,4] *}\r\n> \r\n> ////```\r\n> \r\n> \r\n> \r\n> \r\n> unlike the example above there was a tutorial for py 3.10\r\n> ```\r\n\r\n@philipokiokio I believe you're talking about [this PR](https://github.com/fastapi/fastapi/pull/12555/files) from @tiangolo . If you're mentioning about the `<details>` and `<summary>` block, it was used to collapse and expand.\r\n\r\nBut since we're combining the different version definitions into a single line, I think we should be good there.\nI just added  PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n\r\n/edit\r\n\r\n@tiangolo \r\nIn the generated document I only see one tab labelled Python 3.8+\r\n\r\nAlthough the code it's importing `Annotated` from`typing` rather than `typing_extensions` and it's also using the pipe symbol for Union types and I don't see the `Older versions and variants`. \r\n\r\nI suspect it's because the scripts parent directories are named differently but I may as well made a mistake.\n> I just added PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n\r\nI'm also a new contributor. But, yes, it looks good to me :)\n> > I just added PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n> \r\n> I'm also a new contributor. But, yes, it looks good to me :)\r\n\r\nSorry for some reason I thought you were part of the main contributors :)\n> @FarhanAliRaza do you know why your CI/CD passes successfully two of mine have failed now.\r\n\r\n@philipokiokio This is the root cause of the issue on one of your PRs.\r\n\r\nhttps://github.com/fastapi/fastapi/actions/runs/11533755181/job/32107030159#step:10:45\r\n\r\nAnd this is the source of the bug from your PR: https://github.com/fastapi/fastapi/pull/12557/files#diff-3ef115741af186b4dc8aeaf7382b191f3d9466167b5248ae49fe71fd32cb47eaR119\nI just created this one #12585 ... i hope is fine :)\nThanks everyone for the help here! :bow: :rocket: \r\n\r\nIf you see a page that doesn't fit the cases described above, leave it as is, I'll take care of it later. It's probably that I don't have an established way to handle that case yet and I'll have to update it later. :nerd_face: \n> In these cases, it should be updated to only include the first one (the others will be included automatically \ud83d\ude0e ):\r\n\r\nIn my PRs preview pages, I indeed get automatically the variants but we lose the highlights on the variants code, is it intentional ? did I miss something ?\nCan anyone help me find out why the tests are failing\r\nhttps://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602\n> Can anyone help me find out why the tests are failing https://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602\r\n\r\nThis is what GitHub CI says.\r\n\r\nhttps://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602#step:10:45\r\n\r\n\r\nBut when I took a look at your PR, I can see a `>` character. I've commented on your PR hoping that'd help.\nIt seems there is an issue in the build caused by \r\n\r\n`PendingDeprecationWarning: Please use import python_multipart instead` in `test_multipart_installation.py`\r\n\r\nI would hold off until it gets fixed by the main contributors :)\nHey @tiangolo, are we just waiting on #12627 to start merging the new syntax PRs?\n@manvillej no worries, we are already handling the new PRs (by \"we\" I mean @alejsdev :sweat_smile: :nerd_face: ).\r\n\r\nAnd that PR was just merged so no more false positive errors in CI.\nHi @tiangolo, \r\nFor a good starting point, I would like to contribute to update fastapi docs. I am french so I have been starting to update the french doc and in the order of the directory. First file `fr/docs/advanced/additional-responses.md` I want to update, contains Python directives : `Python hl_lines=\"3\"` but also Json directives like that : `JSON hl_lines=\"4-16\"`\r\nIs there something to do with Json directives also ? Or I don't mind about Json comment. \n@tiangolo I don't know if this issue is the correct place, but a question Discussion also doesn't seem as a best fit. If its relevant i can later move to a separate issue.\r\n\r\nOne more thing that was updated in Material for MkDocs was that admonitions with some text defined with a pipe `|` don't need double quotes anymore, but currently most of the docs still have it.\r\n\r\nSo the code:\r\n\r\n```md\r\n/// info| \"Nota\"\r\n...\r\n///\r\n```` \r\n\r\nwill render with the double quotes.\r\n![image](https://github.com/user-attachments/assets/9b7c9c38-44d5-4a58-a58a-d85a1b578673)\r\n\r\nWhereas:\r\n\r\n```md\r\n/// info | Nota\r\n...\r\n///\r\n```\r\n![image](https://github.com/user-attachments/assets/d1b91c71-3124-434f-8501-4739f8a9738f)\r\n\r\nrenders normally,\r\n\r\nI used a Vim regular expression to find all the occurences of this pattern, and if it is valid problem, i want to contribute replacing by texts without double quotes.\r\n\r\n```vim\r\n\" finds double quoted texts after \"/// | \" then replaces by the text inside the quotes \r\n:%s/\\/\\/\\/ .* | \\zs\"\\(.*\\)\"\\ze/\\1\r\n```\r\n \r\nThis regular expression can also be applied to every file in a folder using Vim with the command `args` : \r\n```sh\r\n# opening all docs with vim\r\nvim docs/<language>/docs\r\n```\r\n```vim\r\n\" adding all files of a folder to the arguments\r\n:args <folder_name>/*\r\n\" updating with the regular expression\r\n:argdo %s/\\/\\/\\/ .* | \\zs\"\\(.*\\)\"\\ze/\\1/g | update\r\n```` \r\n\r\nSome example of this behavior is in the portuguese translation of `body-multiple-params`, [here](https://fastapi.tiangolo.com/pt/tutorial/body-multiple-params/#misture-path-query-e-parametros-de-corpo).", "created_at": "2024-11-09T12:28:43Z"}
{"repo": "fastapi/fastapi", "pull_number": 12809, "instance_id": "fastapi__fastapi-12809", "issue_numbers": ["12554"], "base_commit": "62b318e585ba2287dfbbabd8ed557413252b0e35", "patch": "diff --git a/docs/en/docs/tutorial/path-operation-configuration.md b/docs/en/docs/tutorial/path-operation-configuration.md\nindex 4ca6ebf1334bd..c78d20ea6310c 100644\n--- a/docs/en/docs/tutorial/path-operation-configuration.md\n+++ b/docs/en/docs/tutorial/path-operation-configuration.md\n@@ -16,29 +16,7 @@ You can pass directly the `int` code, like `404`.\n \n But if you don't remember what each number code is for, you can use the shortcut constants in `status`:\n \n-//// tab | Python 3.10+\n-\n-```Python hl_lines=\"1  15\"\n-{!> ../../docs_src/path_operation_configuration/tutorial001_py310.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.9+\n-\n-```Python hl_lines=\"3  17\"\n-{!> ../../docs_src/path_operation_configuration/tutorial001_py39.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.8+\n-\n-```Python hl_lines=\"3  17\"\n-{!> ../../docs_src/path_operation_configuration/tutorial001.py!}\n-```\n-\n-////\n+{* ../../docs_src/path_operation_configuration/tutorial001_py310.py hl[1,15] *}\n \n That status code will be used in the response and will be added to the OpenAPI schema.\n \n@@ -54,29 +32,7 @@ You could also use `from starlette import status`.\n \n You can add tags to your *path operation*, pass the parameter `tags` with a `list` of `str` (commonly just one `str`):\n \n-//// tab | Python 3.10+\n-\n-```Python hl_lines=\"15  20  25\"\n-{!> ../../docs_src/path_operation_configuration/tutorial002_py310.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.9+\n-\n-```Python hl_lines=\"17  22  27\"\n-{!> ../../docs_src/path_operation_configuration/tutorial002_py39.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.8+\n-\n-```Python hl_lines=\"17  22  27\"\n-{!> ../../docs_src/path_operation_configuration/tutorial002.py!}\n-```\n-\n-////\n+{* ../../docs_src/path_operation_configuration/tutorial002_py310.py hl[15,20,25] *}\n \n They will be added to the OpenAPI schema and used by the automatic documentation interfaces:\n \n@@ -90,37 +46,13 @@ In these cases, it could make sense to store the tags in an `Enum`.\n \n **FastAPI** supports that the same way as with plain strings:\n \n-```Python hl_lines=\"1  8-10  13  18\"\n-{!../../docs_src/path_operation_configuration/tutorial002b.py!}\n-```\n+{* ../../docs_src/path_operation_configuration/tutorial002b.py hl[1,8:10,13,18] *}\n \n ## Summary and description\n \n You can add a `summary` and `description`:\n \n-//// tab | Python 3.10+\n-\n-```Python hl_lines=\"18-19\"\n-{!> ../../docs_src/path_operation_configuration/tutorial003_py310.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.9+\n-\n-```Python hl_lines=\"20-21\"\n-{!> ../../docs_src/path_operation_configuration/tutorial003_py39.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.8+\n-\n-```Python hl_lines=\"20-21\"\n-{!> ../../docs_src/path_operation_configuration/tutorial003.py!}\n-```\n-\n-////\n+{* ../../docs_src/path_operation_configuration/tutorial003_py310.py hl[18:19] *}\n \n ## Description from docstring\n \n@@ -128,29 +60,7 @@ As descriptions tend to be long and cover multiple lines, you can declare the *p\n \n You can write <a href=\"https://en.wikipedia.org/wiki/Markdown\" class=\"external-link\" target=\"_blank\">Markdown</a> in the docstring, it will be interpreted and displayed correctly (taking into account docstring indentation).\n \n-//// tab | Python 3.10+\n-\n-```Python hl_lines=\"17-25\"\n-{!> ../../docs_src/path_operation_configuration/tutorial004_py310.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.9+\n-\n-```Python hl_lines=\"19-27\"\n-{!> ../../docs_src/path_operation_configuration/tutorial004_py39.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.8+\n-\n-```Python hl_lines=\"19-27\"\n-{!> ../../docs_src/path_operation_configuration/tutorial004.py!}\n-```\n-\n-////\n+{* ../../docs_src/path_operation_configuration/tutorial004_py310.py hl[17:25] *}\n \n It will be used in the interactive docs:\n \n@@ -160,29 +70,7 @@ It will be used in the interactive docs:\n \n You can specify the response description with the parameter `response_description`:\n \n-//// tab | Python 3.10+\n-\n-```Python hl_lines=\"19\"\n-{!> ../../docs_src/path_operation_configuration/tutorial005_py310.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.9+\n-\n-```Python hl_lines=\"21\"\n-{!> ../../docs_src/path_operation_configuration/tutorial005_py39.py!}\n-```\n-\n-////\n-\n-//// tab | Python 3.8+\n-\n-```Python hl_lines=\"21\"\n-{!> ../../docs_src/path_operation_configuration/tutorial005.py!}\n-```\n-\n-////\n+{* ../../docs_src/path_operation_configuration/tutorial005_py310.py hl[19] *}\n \n /// info\n \n@@ -204,9 +92,7 @@ So, if you don't provide one, **FastAPI** will automatically generate one of \"Su\n \n If you need to mark a *path operation* as <abbr title=\"obsolete, recommended not to use it\">deprecated</abbr>, but without removing it, pass the parameter `deprecated`:\n \n-```Python hl_lines=\"16\"\n-{!../../docs_src/path_operation_configuration/tutorial006.py!}\n-```\n+{* ../../docs_src/path_operation_configuration/tutorial006.py hl[16] *}\n \n It will be clearly marked as deprecated in the interactive docs:\n \n", "test_patch": "", "problem_statement": "Update docs include syntax for source examples\n### Privileged issue\r\n\r\n- [X] I'm @tiangolo or he asked me directly to create an issue here.\r\n\r\n### Issue Content\r\n\r\nThis is a good first contribution. :nerd_face: \r\n\r\nThe code examples shown in the docs are actual Python files. They are even tested in CI, that's why you can always copy paste an example and it will always work, the example is tested.\r\n\r\nThe way those examples are included in the docs used a specific format. But now there's a new format available that is much simpler and easier to use than the previous one, in particular in complex cases, for example when there are examples in multiple versions of Python.\r\n\r\nBut not all the docs have the new format yet. The docs should use the new format to include examples. That is the task. :nerd_face: \r\n\r\n**It should be done as one PR per page updated.**\r\n\r\n## Simple Example\r\n\r\nBefore, the format was like:\r\n\r\n````markdown\r\n```Python hl_lines=\"3\"\r\n{!../../docs_src/first_steps/tutorial001.py!}\r\n```\r\n````\r\n\r\nNow the new format looks like:\r\n\r\n````markdown\r\n{* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n````\r\n\r\n* Instead of `{!` and `!}` it uses `{*` and `*}`\r\n* It no longer has a line above with:\r\n\r\n````markdown\r\n```Python\r\n````\r\n\r\n* And it no longer has a line below with:\r\n\r\n````markdown\r\n```\r\n````\r\n\r\n* The highlight is no longer a line with e.g. `hl_lines=\"3\"` (to highlight line 3), but instead in the same line there's a `hl[3]`.\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12552\r\n\r\n## Multiple Python Versions\r\n\r\nThere are some cases where there are variants of the same example for multiple versions of Python, or for using `Annotated` or not.\r\n\r\nIn those cases, the current include examples have syntax for tabs, and notes saying `Annotated` should be preferred. For example:\r\n\r\n````markdown\r\n//// tab | Python 3.9+\r\n\r\n```Python hl_lines=\"4  8  12\"\r\n{!> ../../docs_src/security/tutorial006_an_py39.py!}\r\n```\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n```Python hl_lines=\"2  7  11\"\r\n{!> ../../docs_src/security/tutorial006_an.py!}\r\n```\r\n\r\n////\r\n\r\n//// tab | Python 3.8+ non-Annotated\r\n\r\n/// tip\r\n\r\nPrefer to use the `Annotated` version if possible.\r\n\r\n///\r\n\r\n```Python hl_lines=\"2  6  10\"\r\n{!> ../../docs_src/security/tutorial006.py!}\r\n```\r\n\r\n////\r\n````\r\n\r\nIn these cases, it should be updated to only include the first one (the others will be included automatically :sunglasses: ):\r\n\r\n````markdown\r\n{* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n````\r\n\r\n* The syntax for tabs is also removed, all the other variants are included automatically.\r\n* The highlight lines are included for that same first file, the fragment with `hl_lines=\"4  8  12\"` is replaced with `hl[4,8,12]`\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12553\r\n\r\n## Highlight Lines\r\n\r\n### Simple Lines\r\n\r\nWhen there's a fragment like:\r\n\r\n````markdown\r\nhl_lines=\"4  8  12\"\r\n````\r\n\r\nThat means it is highlighting the lines 4, 8, and 12.\r\n\r\nThe new syntax is on the same include line:\r\n\r\n````markdown\r\nhl[4,8,12]\r\n````\r\n\r\n* It separates individual lines by commas.\r\n* It uses `hl`, with square brackets around.\r\n\r\n### Line Ranges\r\n\r\nWhen there are line ranges, like:\r\n\r\n````markdown\r\nhl_lines=\"4-6\"\r\n````\r\n\r\nThat means it is highlighting lines from 4 to 6 (so, 4, 5, and 6).\r\n\r\nThe new syntax uses `:` instead of `-` for the ranges:\r\n\r\n````markdown\r\nhl[4:6]\r\n````\r\n\r\n### Multiple Highlights\r\n\r\nThere are some highlights that include individual lines and also line ranges, for example the old syntax was:\r\n\r\n````markdown\r\nhl_lines=\"2  4-6  8-11  13\"\r\n````\r\n\r\nThat means it is highlighting:\r\n\r\n* Line 2\r\n* Lines from 4 to 6 (so, 4, 5, and 6)\r\n* Lines from 8 to 11 (so, 8, 9, 10, and 11)\r\n* Line 13\r\n\r\nThe new syntax separates by commas instead of spaces:\r\n\r\n````markdown\r\nhl[2,4:6,8:11,13]\r\n````\r\n\r\n## Include Specific Lines\r\n\r\nIn some cases, there are specific lines included instead of the entire file.\r\n\r\nFor example, the old syntax was:\r\n\r\n````markdown\r\n```Python hl_lines=\"7\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py[ln:1-7]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n````\r\n\r\nIn this example, the lines included are from line 1 to line 7 (lines 1, 2, 3, 4, 5, 6, 7). In the old syntax, it's defined with the fragment:\r\n\r\n````markdown\r\n[ln:1-7]\r\n````\r\n\r\nIn the new syntax, the included code from above would be:\r\n\r\n````markdown\r\n{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:7] hl[7] *}\r\n````\r\n\r\n* The lines to include that were defined with the fragment `[ln:1-7]`, are now defined with `ln[1:7]`\r\n\r\nThe new syntax `ln` as in `ln[1:7]` also supports multiple lines and ranges to include.\r\n\r\n### Comments Between Line Ranges\r\n\r\nIn the old syntax, when there are ranges of code included, there are comments like:\r\n\r\n````markdown\r\n# Code below omitted \ud83d\udc47\r\n````\r\n\r\nThe new syntax generates those comments automatically based on the line ranges.\r\n\r\n### Real Example\r\n\r\nA more real example of the include with the old syntax looked like this:\r\n\r\n````markdown\r\n//// tab | Python 3.10+\r\n\r\n```Python hl_lines=\"7\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py[ln:1-7]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n\r\n//// tab | Python 3.9+\r\n\r\n```Python hl_lines=\"9\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py39.py[ln:1-9]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py39.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n```Python hl_lines=\"9\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001.py[ln:1-9]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n````\r\n\r\nIn the new syntax, that is replaced with this:\r\n\r\n````markdown\r\n{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:7] hl[7] *}\r\n````\r\n\r\n* The only file that needs to be included and defined is the first one, and the lines to include and highlight are also needed for the first file.\r\n* All the other file includes, full file preview, comments, etc. are generated automatically.\r\n\r\n---\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12555\r\n\r\n## Help\r\n\r\nDo you want to help? Please do!\r\n\r\nRemember **it should be done as one PR per page updated.**\r\n\r\nIf you see a page that doesn't fit these cases, leave it as is, I'll take care of it later.\r\n\r\nBefore submitting a PR, check if there's another one already handling that file.\r\n\r\nPlease name the PR including the file path, for example:\r\n\r\n````markdown\r\n\ud83d\udcdd Update includes for `docs/tutorial/create-db-and-table.md`\r\n````\n", "hints_text": "Osis\r\n\r\nOn Sat, Oct 26, 2024, 6:37 PM Sebasti\u00e1n Ram\u00edrez ***@***.***>\r\nwrote:\r\n\r\n> Privileged issue\r\n>\r\n>    - I'm @tiangolo <https://github.com/tiangolo> or he asked me directly\r\n>    to create an issue here.\r\n>\r\n> Issue Content\r\n>\r\n> This is a good first contribution. \ud83e\udd13\r\n>\r\n> The code examples shown in the docs are actual Python files. They are even\r\n> tested in CI, that's why you can always copy paste an example and it will\r\n> always work, the example is tested.\r\n>\r\n> The way those examples are included in the docs used a specific format.\r\n> But now there's a new format available that is much simpler and easier to\r\n> use than the previous one, in particular in complex cases, for example when\r\n> there are examples in multiple versions of Python.\r\n>\r\n> But not all the docs have the new format yet. The docs should use the new\r\n> format to include examples. That is the task. \ud83e\udd13\r\n>\r\n> It should be done as one PR per page updated.\r\n> Simple Example\r\n>\r\n> Before, the format was like:\r\n>\r\n> ```Python hl_lines=\"3\"\r\n> {!../../docs_src/first_steps/tutorial001.py!}```\r\n>\r\n> Now the new format looks like:\r\n>\r\n> {* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n>\r\n>\r\n>    - Instead of {! and !} it uses {* and *}\r\n>    - It no longer has a line above with:\r\n>\r\n> ```Python\r\n>\r\n>\r\n>    - And it no longer has a line below with:\r\n>\r\n> ```\r\n>\r\n>\r\n>    - The highlight is no longer a line with e.g. hl_lines=\"3\" (to\r\n>    highlight line 3), but instead in the same line there's a hl[3].\r\n>\r\n> An example PR: #12552 <https://github.com/fastapi/fastapi/pull/12552>\r\n> Multiple Python Versions\r\n>\r\n> There are some cases where there are variants of the same example for\r\n> multiple versions of Python, or for using Annotated or not.\r\n>\r\n> In those cases, the current include examples have syntax for tabs, and\r\n> notes saying Annotated should be preferred. For example:\r\n>\r\n> //// tab | Python 3.9+\r\n> ```Python hl_lines=\"4  8  12\"\r\n> {!> ../../docs_src/security/tutorial006_an_py39.py!}```\r\n>\r\n> ////\r\n>\r\n> //// tab | Python 3.8+\r\n> ```Python hl_lines=\"2  7  11\"\r\n> {!> ../../docs_src/security/tutorial006_an.py!}```\r\n>\r\n> ////\r\n>\r\n> //// tab | Python 3.8+ non-Annotated\r\n>\r\n> /// tip\r\n>\r\n> Prefer to use the `Annotated` version if possible.\r\n>\r\n> ///\r\n> ```Python hl_lines=\"2  6  10\"\r\n> {!> ../../docs_src/security/tutorial006.py!}```\r\n>\r\n> ////\r\n>\r\n> In these cases, it should be updated to only include the first one (the\r\n> others will be included automatically \ud83d\ude0e ):\r\n>\r\n> {* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n>\r\n>\r\n>    - The syntax for tabs is also removed, all the other variants are\r\n>    included automatically.\r\n>    - The highlight lines are included for that same first file, the\r\n>    fragment with hl_lines=\"4 8 12\" is replaced with hl[4,8,12]\r\n>\r\n> An example PR: #12553 <https://github.com/fastapi/fastapi/pull/12553>\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/fastapi/fastapi/issues/12554>, or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/ABCOVL2FRNCDPALCW7LAZRLZ5OHY5AVCNFSM6AAAAABQUZLFL2VHI2DSMVQWIX3LMV43ASLTON2WKOZSGYYTKOBVGYYDINA>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n\nIeje\r\n\r\nOn Sat, Oct 26, 2024, 6:54 PM Rajendra Prasad K ***@***.***>\r\nwrote:\r\n\r\n> Osis\r\n>\r\n> On Sat, Oct 26, 2024, 6:37 PM Sebasti\u00e1n Ram\u00edrez ***@***.***>\r\n> wrote:\r\n>\r\n>> Privileged issue\r\n>>\r\n>>    - I'm @tiangolo <https://github.com/tiangolo> or he asked me directly\r\n>>    to create an issue here.\r\n>>\r\n>> Issue Content\r\n>>\r\n>> This is a good first contribution. \ud83e\udd13\r\n>>\r\n>> The code examples shown in the docs are actual Python files. They are\r\n>> even tested in CI, that's why you can always copy paste an example and it\r\n>> will always work, the example is tested.\r\n>>\r\n>> The way those examples are included in the docs used a specific format.\r\n>> But now there's a new format available that is much simpler and easier to\r\n>> use than the previous one, in particular in complex cases, for example when\r\n>> there are examples in multiple versions of Python.\r\n>>\r\n>> But not all the docs have the new format yet. The docs should use the new\r\n>> format to include examples. That is the task. \ud83e\udd13\r\n>>\r\n>> It should be done as one PR per page updated.\r\n>> Simple Example\r\n>>\r\n>> Before, the format was like:\r\n>>\r\n>> ```Python hl_lines=\"3\"\r\n>> {!../../docs_src/first_steps/tutorial001.py!}```\r\n>>\r\n>> Now the new format looks like:\r\n>>\r\n>> {* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n>>\r\n>>\r\n>>    - Instead of {! and !} it uses {* and *}\r\n>>    - It no longer has a line above with:\r\n>>\r\n>> ```Python\r\n>>\r\n>>\r\n>>    - And it no longer has a line below with:\r\n>>\r\n>> ```\r\n>>\r\n>>\r\n>>    - The highlight is no longer a line with e.g. hl_lines=\"3\" (to\r\n>>    highlight line 3), but instead in the same line there's a hl[3].\r\n>>\r\n>> An example PR: #12552 <https://github.com/fastapi/fastapi/pull/12552>\r\n>> Multiple Python Versions\r\n>>\r\n>> There are some cases where there are variants of the same example for\r\n>> multiple versions of Python, or for using Annotated or not.\r\n>>\r\n>> In those cases, the current include examples have syntax for tabs, and\r\n>> notes saying Annotated should be preferred. For example:\r\n>>\r\n>> //// tab | Python 3.9+\r\n>> ```Python hl_lines=\"4  8  12\"\r\n>> {!> ../../docs_src/security/tutorial006_an_py39.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> //// tab | Python 3.8+\r\n>> ```Python hl_lines=\"2  7  11\"\r\n>> {!> ../../docs_src/security/tutorial006_an.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> //// tab | Python 3.8+ non-Annotated\r\n>>\r\n>> /// tip\r\n>>\r\n>> Prefer to use the `Annotated` version if possible.\r\n>>\r\n>> ///\r\n>> ```Python hl_lines=\"2  6  10\"\r\n>> {!> ../../docs_src/security/tutorial006.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> In these cases, it should be updated to only include the first one (the\r\n>> others will be included automatically \ud83d\ude0e ):\r\n>>\r\n>> {* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n>>\r\n>>\r\n>>    - The syntax for tabs is also removed, all the other variants are\r\n>>    included automatically.\r\n>>    - The highlight lines are included for that same first file, the\r\n>>    fragment with hl_lines=\"4 8 12\" is replaced with hl[4,8,12]\r\n>>\r\n>> An example PR: #12553 <https://github.com/fastapi/fastapi/pull/12553>\r\n>>\r\n>> \u2014\r\n>> Reply to this email directly, view it on GitHub\r\n>> <https://github.com/fastapi/fastapi/issues/12554>, or unsubscribe\r\n>> <https://github.com/notifications/unsubscribe-auth/ABCOVL2FRNCDPALCW7LAZRLZ5OHY5AVCNFSM6AAAAABQUZLFL2VHI2DSMVQWIX3LMV43ASLTON2WKOZSGYYTKOBVGYYDINA>\r\n>> .\r\n>> You are receiving this because you are subscribed to this thread.Message\r\n>> ID: ***@***.***>\r\n>>\r\n>\r\n\ni want to contribute \r\nWill the issue be assigned?\n@FarhanAliRaza the issue is not assigned, there are many PRs that would come out of this, one PR per page fixed, so, you can just take a page that has the old syntax, check there are no other PRs handling it, then update the syntax, and make a PR for it.\n> @FarhanAliRaza the issue is not assigned, there are many PRs that would come out of this, one PR per page fixed, so, you can just take a page that has the old syntax, check there are no other PRs handling it, then update the syntax, and make a PR for it.\r\n\r\nthe game is kicked off \ud83d\ude04\nwhat about cases like this that has title\r\n`Python hl_lines=\"1  3\" title=\"app/routers/users.py\"\r\n{!../../docs_src/bigger_applications/app/routers/users.py!}`\r\n\n@FarhanAliRaza  do you know why your CI/CD passes successfully two of mine have failed now.\r\n\n@philipokiokio, your commits look fine for me . This is the error https://github.com/fastapi/fastapi/actions/runs/11533792038/job/32107125447?pr=12560\n@FarhanAliRaza cool, thanks man.\n> what about cases like this that has title `Python hl_lines=\"1 3\" title=\"app/routers/users.py\" {!../../docs_src/bigger_applications/app/routers/users.py!}`\r\n\r\n@tiangolo \n@FarhanAliRaza As suggested by @tiangolo, it'd be easier for everyone to understand which pages you're working on, if you can set the title of your PR with the file path.\r\n\r\nThanks for understanding.\r\n\r\nA reference PR from @tiangolo for your perusal: https://github.com/fastapi/fastapi/pull/12552\nHi @krishnamadhavan \r\n\r\nso when tabs were used above some code was deleted. is this the expected contribution. example\r\n\r\n```#### Tuple and Set\r\n\r\nYou would do the same to declare `tuple`s and `set`s:\r\n\r\n//// tab | Python 3.9+\r\n\r\n{* ../../docs_src/python_types/tutorial007_py39.py hl[1] *}\r\n\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n\r\n{* ../../docs_src/python_types/tutorial007.py hl[1,4] *}\r\n\r\n////```\r\n\r\n\r\n\r\n\r\nunlike the example above there was a tutorial for py 3.10\n> @FarhanAliRaza As suggested by @tiangolo, it'd be easier for everyone to understand which pages you're working on, if you can set the title of your PR with the file path.\n> \n> Thanks for understanding.\n> \n> A reference PR from @tiangolo for your perusal: https://github.com/fastapi/fastapi/pull/12552\n\nUpdated.\nCan you answer my above question?\nHope I got the tabs/ multi python version right :)\n> Hi @krishnamadhavan\r\n> \r\n> so when tabs were used above some code was deleted. is this the expected contribution. example\r\n> \r\n> ```\r\n> \r\n> You would do the same to declare `tuple`s and `set`s:\r\n> \r\n> //// tab | Python 3.9+\r\n> \r\n> {* ../../docs_src/python_types/tutorial007_py39.py hl[1] *}\r\n> \r\n> \r\n> ////\r\n> \r\n> //// tab | Python 3.8+\r\n> \r\n> \r\n> {* ../../docs_src/python_types/tutorial007.py hl[1,4] *}\r\n> \r\n> ////```\r\n> \r\n> \r\n> \r\n> \r\n> unlike the example above there was a tutorial for py 3.10\r\n> ```\r\n\r\n@philipokiokio I believe you're talking about [this PR](https://github.com/fastapi/fastapi/pull/12555/files) from @tiangolo . If you're mentioning about the `<details>` and `<summary>` block, it was used to collapse and expand.\r\n\r\nBut since we're combining the different version definitions into a single line, I think we should be good there.\nI just added  PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n\r\n/edit\r\n\r\n@tiangolo \r\nIn the generated document I only see one tab labelled Python 3.8+\r\n\r\nAlthough the code it's importing `Annotated` from`typing` rather than `typing_extensions` and it's also using the pipe symbol for Union types and I don't see the `Older versions and variants`. \r\n\r\nI suspect it's because the scripts parent directories are named differently but I may as well made a mistake.\n> I just added PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n\r\nI'm also a new contributor. But, yes, it looks good to me :)\n> > I just added PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n> \r\n> I'm also a new contributor. But, yes, it looks good to me :)\r\n\r\nSorry for some reason I thought you were part of the main contributors :)\n> @FarhanAliRaza do you know why your CI/CD passes successfully two of mine have failed now.\r\n\r\n@philipokiokio This is the root cause of the issue on one of your PRs.\r\n\r\nhttps://github.com/fastapi/fastapi/actions/runs/11533755181/job/32107030159#step:10:45\r\n\r\nAnd this is the source of the bug from your PR: https://github.com/fastapi/fastapi/pull/12557/files#diff-3ef115741af186b4dc8aeaf7382b191f3d9466167b5248ae49fe71fd32cb47eaR119\nI just created this one #12585 ... i hope is fine :)\nThanks everyone for the help here! :bow: :rocket: \r\n\r\nIf you see a page that doesn't fit the cases described above, leave it as is, I'll take care of it later. It's probably that I don't have an established way to handle that case yet and I'll have to update it later. :nerd_face: \n> In these cases, it should be updated to only include the first one (the others will be included automatically \ud83d\ude0e ):\r\n\r\nIn my PRs preview pages, I indeed get automatically the variants but we lose the highlights on the variants code, is it intentional ? did I miss something ?\nCan anyone help me find out why the tests are failing\r\nhttps://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602\n> Can anyone help me find out why the tests are failing https://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602\r\n\r\nThis is what GitHub CI says.\r\n\r\nhttps://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602#step:10:45\r\n\r\n\r\nBut when I took a look at your PR, I can see a `>` character. I've commented on your PR hoping that'd help.\nIt seems there is an issue in the build caused by \r\n\r\n`PendingDeprecationWarning: Please use import python_multipart instead` in `test_multipart_installation.py`\r\n\r\nI would hold off until it gets fixed by the main contributors :)\nHey @tiangolo, are we just waiting on #12627 to start merging the new syntax PRs?\n@manvillej no worries, we are already handling the new PRs (by \"we\" I mean @alejsdev :sweat_smile: :nerd_face: ).\r\n\r\nAnd that PR was just merged so no more false positive errors in CI.\nHi @tiangolo, \r\nFor a good starting point, I would like to contribute to update fastapi docs. I am french so I have been starting to update the french doc and in the order of the directory. First file `fr/docs/advanced/additional-responses.md` I want to update, contains Python directives : `Python hl_lines=\"3\"` but also Json directives like that : `JSON hl_lines=\"4-16\"`\r\nIs there something to do with Json directives also ? Or I don't mind about Json comment. \n@tiangolo I don't know if this issue is the correct place, but a question Discussion also doesn't seem as a best fit. If its relevant i can later move to a separate issue.\r\n\r\nOne more thing that was updated in Material for MkDocs was that admonitions with some text defined with a pipe `|` don't need double quotes anymore, but currently most of the docs still have it.\r\n\r\nSo the code:\r\n\r\n```md\r\n/// info| \"Nota\"\r\n...\r\n///\r\n```` \r\n\r\nwill render with the double quotes.\r\n![image](https://github.com/user-attachments/assets/9b7c9c38-44d5-4a58-a58a-d85a1b578673)\r\n\r\nWhereas:\r\n\r\n```md\r\n/// info | Nota\r\n...\r\n///\r\n```\r\n![image](https://github.com/user-attachments/assets/d1b91c71-3124-434f-8501-4739f8a9738f)\r\n\r\nrenders normally,\r\n\r\nI used a Vim regular expression to find all the occurences of this pattern, and if it is valid problem, i want to contribute replacing by texts without double quotes.\r\n\r\n```vim\r\n\" finds double quoted texts after \"/// | \" then replaces by the text inside the quotes \r\n:%s/\\/\\/\\/ .* | \\zs\"\\(.*\\)\"\\ze/\\1\r\n```\r\n \r\nThis regular expression can also be applied to every file in a folder using Vim with the command `args` : \r\n```sh\r\n# opening all docs with vim\r\nvim docs/<language>/docs\r\n```\r\n```vim\r\n\" adding all files of a folder to the arguments\r\n:args <folder_name>/*\r\n\" updating with the regular expression\r\n:argdo %s/\\/\\/\\/ .* | \\zs\"\\(.*\\)\"\\ze/\\1/g | update\r\n```` \r\n\r\nSome example of this behavior is in the portuguese translation of `body-multiple-params`, [here](https://fastapi.tiangolo.com/pt/tutorial/body-multiple-params/#misture-path-query-e-parametros-de-corpo).", "created_at": "2024-11-09T12:13:06Z"}
{"repo": "fastapi/fastapi", "pull_number": 12807, "instance_id": "fastapi__fastapi-12807", "issue_numbers": ["12554"], "base_commit": "f91d193d6304ac6598cf76850a6be87a382ed63b", "patch": "diff --git a/docs/en/docs/tutorial/middleware.md b/docs/en/docs/tutorial/middleware.md\nindex 7c4954c7b704e..16d853018d165 100644\n--- a/docs/en/docs/tutorial/middleware.md\n+++ b/docs/en/docs/tutorial/middleware.md\n@@ -31,9 +31,7 @@ The middleware function receives:\n     * Then it returns the `response` generated by the corresponding *path operation*.\n * You can then further modify the `response` before returning it.\n \n-```Python hl_lines=\"8-9  11  14\"\n-{!../../docs_src/middleware/tutorial001.py!}\n-```\n+{* ../../docs_src/middleware/tutorial001.py hl[8:9,11,14] *}\n \n /// tip\n \n@@ -59,11 +57,10 @@ And also after the `response` is generated, before returning it.\n \n For example, you could add a custom header `X-Process-Time` containing the time in seconds that it took to process the request and generate a response:\n \n-```Python hl_lines=\"10  12-13\"\n-{!../../docs_src/middleware/tutorial001.py!}\n-```\n+{* ../../docs_src/middleware/tutorial001.py hl[10,12:13] *}\n \n /// tip\n+```Python hl_lines=\"10  12-13\"\n \n Here we use <a href=\"https://docs.python.org/3/library/time.html#time.perf_counter\" class=\"external-link\" target=\"_blank\">`time.perf_counter()`</a> instead of `time.time()` because it can be more precise for these use cases. \ud83e\udd13\n \n", "test_patch": "", "problem_statement": "Update docs include syntax for source examples\n### Privileged issue\r\n\r\n- [X] I'm @tiangolo or he asked me directly to create an issue here.\r\n\r\n### Issue Content\r\n\r\nThis is a good first contribution. :nerd_face: \r\n\r\nThe code examples shown in the docs are actual Python files. They are even tested in CI, that's why you can always copy paste an example and it will always work, the example is tested.\r\n\r\nThe way those examples are included in the docs used a specific format. But now there's a new format available that is much simpler and easier to use than the previous one, in particular in complex cases, for example when there are examples in multiple versions of Python.\r\n\r\nBut not all the docs have the new format yet. The docs should use the new format to include examples. That is the task. :nerd_face: \r\n\r\n**It should be done as one PR per page updated.**\r\n\r\n## Simple Example\r\n\r\nBefore, the format was like:\r\n\r\n````markdown\r\n```Python hl_lines=\"3\"\r\n{!../../docs_src/first_steps/tutorial001.py!}\r\n```\r\n````\r\n\r\nNow the new format looks like:\r\n\r\n````markdown\r\n{* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n````\r\n\r\n* Instead of `{!` and `!}` it uses `{*` and `*}`\r\n* It no longer has a line above with:\r\n\r\n````markdown\r\n```Python\r\n````\r\n\r\n* And it no longer has a line below with:\r\n\r\n````markdown\r\n```\r\n````\r\n\r\n* The highlight is no longer a line with e.g. `hl_lines=\"3\"` (to highlight line 3), but instead in the same line there's a `hl[3]`.\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12552\r\n\r\n## Multiple Python Versions\r\n\r\nThere are some cases where there are variants of the same example for multiple versions of Python, or for using `Annotated` or not.\r\n\r\nIn those cases, the current include examples have syntax for tabs, and notes saying `Annotated` should be preferred. For example:\r\n\r\n````markdown\r\n//// tab | Python 3.9+\r\n\r\n```Python hl_lines=\"4  8  12\"\r\n{!> ../../docs_src/security/tutorial006_an_py39.py!}\r\n```\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n```Python hl_lines=\"2  7  11\"\r\n{!> ../../docs_src/security/tutorial006_an.py!}\r\n```\r\n\r\n////\r\n\r\n//// tab | Python 3.8+ non-Annotated\r\n\r\n/// tip\r\n\r\nPrefer to use the `Annotated` version if possible.\r\n\r\n///\r\n\r\n```Python hl_lines=\"2  6  10\"\r\n{!> ../../docs_src/security/tutorial006.py!}\r\n```\r\n\r\n////\r\n````\r\n\r\nIn these cases, it should be updated to only include the first one (the others will be included automatically :sunglasses: ):\r\n\r\n````markdown\r\n{* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n````\r\n\r\n* The syntax for tabs is also removed, all the other variants are included automatically.\r\n* The highlight lines are included for that same first file, the fragment with `hl_lines=\"4  8  12\"` is replaced with `hl[4,8,12]`\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12553\r\n\r\n## Highlight Lines\r\n\r\n### Simple Lines\r\n\r\nWhen there's a fragment like:\r\n\r\n````markdown\r\nhl_lines=\"4  8  12\"\r\n````\r\n\r\nThat means it is highlighting the lines 4, 8, and 12.\r\n\r\nThe new syntax is on the same include line:\r\n\r\n````markdown\r\nhl[4,8,12]\r\n````\r\n\r\n* It separates individual lines by commas.\r\n* It uses `hl`, with square brackets around.\r\n\r\n### Line Ranges\r\n\r\nWhen there are line ranges, like:\r\n\r\n````markdown\r\nhl_lines=\"4-6\"\r\n````\r\n\r\nThat means it is highlighting lines from 4 to 6 (so, 4, 5, and 6).\r\n\r\nThe new syntax uses `:` instead of `-` for the ranges:\r\n\r\n````markdown\r\nhl[4:6]\r\n````\r\n\r\n### Multiple Highlights\r\n\r\nThere are some highlights that include individual lines and also line ranges, for example the old syntax was:\r\n\r\n````markdown\r\nhl_lines=\"2  4-6  8-11  13\"\r\n````\r\n\r\nThat means it is highlighting:\r\n\r\n* Line 2\r\n* Lines from 4 to 6 (so, 4, 5, and 6)\r\n* Lines from 8 to 11 (so, 8, 9, 10, and 11)\r\n* Line 13\r\n\r\nThe new syntax separates by commas instead of spaces:\r\n\r\n````markdown\r\nhl[2,4:6,8:11,13]\r\n````\r\n\r\n## Include Specific Lines\r\n\r\nIn some cases, there are specific lines included instead of the entire file.\r\n\r\nFor example, the old syntax was:\r\n\r\n````markdown\r\n```Python hl_lines=\"7\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py[ln:1-7]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n````\r\n\r\nIn this example, the lines included are from line 1 to line 7 (lines 1, 2, 3, 4, 5, 6, 7). In the old syntax, it's defined with the fragment:\r\n\r\n````markdown\r\n[ln:1-7]\r\n````\r\n\r\nIn the new syntax, the included code from above would be:\r\n\r\n````markdown\r\n{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:7] hl[7] *}\r\n````\r\n\r\n* The lines to include that were defined with the fragment `[ln:1-7]`, are now defined with `ln[1:7]`\r\n\r\nThe new syntax `ln` as in `ln[1:7]` also supports multiple lines and ranges to include.\r\n\r\n### Comments Between Line Ranges\r\n\r\nIn the old syntax, when there are ranges of code included, there are comments like:\r\n\r\n````markdown\r\n# Code below omitted \ud83d\udc47\r\n````\r\n\r\nThe new syntax generates those comments automatically based on the line ranges.\r\n\r\n### Real Example\r\n\r\nA more real example of the include with the old syntax looked like this:\r\n\r\n````markdown\r\n//// tab | Python 3.10+\r\n\r\n```Python hl_lines=\"7\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py[ln:1-7]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py310.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n\r\n//// tab | Python 3.9+\r\n\r\n```Python hl_lines=\"9\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py39.py[ln:1-9]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001_py39.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n```Python hl_lines=\"9\"\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001.py[ln:1-9]!}\r\n\r\n# Code below omitted \ud83d\udc47\r\n```\r\n\r\n<details>\r\n<summary>\ud83d\udc40 Full file preview</summary>\r\n\r\n```Python\r\n{!> ../../docs_src/separate_openapi_schemas/tutorial001.py!}\r\n```\r\n\r\n</details>\r\n\r\n////\r\n````\r\n\r\nIn the new syntax, that is replaced with this:\r\n\r\n````markdown\r\n{* ../../docs_src/separate_openapi_schemas/tutorial001_py310.py ln[1:7] hl[7] *}\r\n````\r\n\r\n* The only file that needs to be included and defined is the first one, and the lines to include and highlight are also needed for the first file.\r\n* All the other file includes, full file preview, comments, etc. are generated automatically.\r\n\r\n---\r\n\r\nAn example PR: https://github.com/fastapi/fastapi/pull/12555\r\n\r\n## Help\r\n\r\nDo you want to help? Please do!\r\n\r\nRemember **it should be done as one PR per page updated.**\r\n\r\nIf you see a page that doesn't fit these cases, leave it as is, I'll take care of it later.\r\n\r\nBefore submitting a PR, check if there's another one already handling that file.\r\n\r\nPlease name the PR including the file path, for example:\r\n\r\n````markdown\r\n\ud83d\udcdd Update includes for `docs/tutorial/create-db-and-table.md`\r\n````\n", "hints_text": "Osis\r\n\r\nOn Sat, Oct 26, 2024, 6:37 PM Sebasti\u00e1n Ram\u00edrez ***@***.***>\r\nwrote:\r\n\r\n> Privileged issue\r\n>\r\n>    - I'm @tiangolo <https://github.com/tiangolo> or he asked me directly\r\n>    to create an issue here.\r\n>\r\n> Issue Content\r\n>\r\n> This is a good first contribution. \ud83e\udd13\r\n>\r\n> The code examples shown in the docs are actual Python files. They are even\r\n> tested in CI, that's why you can always copy paste an example and it will\r\n> always work, the example is tested.\r\n>\r\n> The way those examples are included in the docs used a specific format.\r\n> But now there's a new format available that is much simpler and easier to\r\n> use than the previous one, in particular in complex cases, for example when\r\n> there are examples in multiple versions of Python.\r\n>\r\n> But not all the docs have the new format yet. The docs should use the new\r\n> format to include examples. That is the task. \ud83e\udd13\r\n>\r\n> It should be done as one PR per page updated.\r\n> Simple Example\r\n>\r\n> Before, the format was like:\r\n>\r\n> ```Python hl_lines=\"3\"\r\n> {!../../docs_src/first_steps/tutorial001.py!}```\r\n>\r\n> Now the new format looks like:\r\n>\r\n> {* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n>\r\n>\r\n>    - Instead of {! and !} it uses {* and *}\r\n>    - It no longer has a line above with:\r\n>\r\n> ```Python\r\n>\r\n>\r\n>    - And it no longer has a line below with:\r\n>\r\n> ```\r\n>\r\n>\r\n>    - The highlight is no longer a line with e.g. hl_lines=\"3\" (to\r\n>    highlight line 3), but instead in the same line there's a hl[3].\r\n>\r\n> An example PR: #12552 <https://github.com/fastapi/fastapi/pull/12552>\r\n> Multiple Python Versions\r\n>\r\n> There are some cases where there are variants of the same example for\r\n> multiple versions of Python, or for using Annotated or not.\r\n>\r\n> In those cases, the current include examples have syntax for tabs, and\r\n> notes saying Annotated should be preferred. For example:\r\n>\r\n> //// tab | Python 3.9+\r\n> ```Python hl_lines=\"4  8  12\"\r\n> {!> ../../docs_src/security/tutorial006_an_py39.py!}```\r\n>\r\n> ////\r\n>\r\n> //// tab | Python 3.8+\r\n> ```Python hl_lines=\"2  7  11\"\r\n> {!> ../../docs_src/security/tutorial006_an.py!}```\r\n>\r\n> ////\r\n>\r\n> //// tab | Python 3.8+ non-Annotated\r\n>\r\n> /// tip\r\n>\r\n> Prefer to use the `Annotated` version if possible.\r\n>\r\n> ///\r\n> ```Python hl_lines=\"2  6  10\"\r\n> {!> ../../docs_src/security/tutorial006.py!}```\r\n>\r\n> ////\r\n>\r\n> In these cases, it should be updated to only include the first one (the\r\n> others will be included automatically \ud83d\ude0e ):\r\n>\r\n> {* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n>\r\n>\r\n>    - The syntax for tabs is also removed, all the other variants are\r\n>    included automatically.\r\n>    - The highlight lines are included for that same first file, the\r\n>    fragment with hl_lines=\"4 8 12\" is replaced with hl[4,8,12]\r\n>\r\n> An example PR: #12553 <https://github.com/fastapi/fastapi/pull/12553>\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/fastapi/fastapi/issues/12554>, or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/ABCOVL2FRNCDPALCW7LAZRLZ5OHY5AVCNFSM6AAAAABQUZLFL2VHI2DSMVQWIX3LMV43ASLTON2WKOZSGYYTKOBVGYYDINA>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID: ***@***.***>\r\n>\r\n\nIeje\r\n\r\nOn Sat, Oct 26, 2024, 6:54 PM Rajendra Prasad K ***@***.***>\r\nwrote:\r\n\r\n> Osis\r\n>\r\n> On Sat, Oct 26, 2024, 6:37 PM Sebasti\u00e1n Ram\u00edrez ***@***.***>\r\n> wrote:\r\n>\r\n>> Privileged issue\r\n>>\r\n>>    - I'm @tiangolo <https://github.com/tiangolo> or he asked me directly\r\n>>    to create an issue here.\r\n>>\r\n>> Issue Content\r\n>>\r\n>> This is a good first contribution. \ud83e\udd13\r\n>>\r\n>> The code examples shown in the docs are actual Python files. They are\r\n>> even tested in CI, that's why you can always copy paste an example and it\r\n>> will always work, the example is tested.\r\n>>\r\n>> The way those examples are included in the docs used a specific format.\r\n>> But now there's a new format available that is much simpler and easier to\r\n>> use than the previous one, in particular in complex cases, for example when\r\n>> there are examples in multiple versions of Python.\r\n>>\r\n>> But not all the docs have the new format yet. The docs should use the new\r\n>> format to include examples. That is the task. \ud83e\udd13\r\n>>\r\n>> It should be done as one PR per page updated.\r\n>> Simple Example\r\n>>\r\n>> Before, the format was like:\r\n>>\r\n>> ```Python hl_lines=\"3\"\r\n>> {!../../docs_src/first_steps/tutorial001.py!}```\r\n>>\r\n>> Now the new format looks like:\r\n>>\r\n>> {* ../../docs_src/first_steps/tutorial001.py hl[3] *}\r\n>>\r\n>>\r\n>>    - Instead of {! and !} it uses {* and *}\r\n>>    - It no longer has a line above with:\r\n>>\r\n>> ```Python\r\n>>\r\n>>\r\n>>    - And it no longer has a line below with:\r\n>>\r\n>> ```\r\n>>\r\n>>\r\n>>    - The highlight is no longer a line with e.g. hl_lines=\"3\" (to\r\n>>    highlight line 3), but instead in the same line there's a hl[3].\r\n>>\r\n>> An example PR: #12552 <https://github.com/fastapi/fastapi/pull/12552>\r\n>> Multiple Python Versions\r\n>>\r\n>> There are some cases where there are variants of the same example for\r\n>> multiple versions of Python, or for using Annotated or not.\r\n>>\r\n>> In those cases, the current include examples have syntax for tabs, and\r\n>> notes saying Annotated should be preferred. For example:\r\n>>\r\n>> //// tab | Python 3.9+\r\n>> ```Python hl_lines=\"4  8  12\"\r\n>> {!> ../../docs_src/security/tutorial006_an_py39.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> //// tab | Python 3.8+\r\n>> ```Python hl_lines=\"2  7  11\"\r\n>> {!> ../../docs_src/security/tutorial006_an.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> //// tab | Python 3.8+ non-Annotated\r\n>>\r\n>> /// tip\r\n>>\r\n>> Prefer to use the `Annotated` version if possible.\r\n>>\r\n>> ///\r\n>> ```Python hl_lines=\"2  6  10\"\r\n>> {!> ../../docs_src/security/tutorial006.py!}```\r\n>>\r\n>> ////\r\n>>\r\n>> In these cases, it should be updated to only include the first one (the\r\n>> others will be included automatically \ud83d\ude0e ):\r\n>>\r\n>> {* ../../docs_src/security/tutorial006_an_py39.py hl[4,8,12] *}\r\n>>\r\n>>\r\n>>    - The syntax for tabs is also removed, all the other variants are\r\n>>    included automatically.\r\n>>    - The highlight lines are included for that same first file, the\r\n>>    fragment with hl_lines=\"4 8 12\" is replaced with hl[4,8,12]\r\n>>\r\n>> An example PR: #12553 <https://github.com/fastapi/fastapi/pull/12553>\r\n>>\r\n>> \u2014\r\n>> Reply to this email directly, view it on GitHub\r\n>> <https://github.com/fastapi/fastapi/issues/12554>, or unsubscribe\r\n>> <https://github.com/notifications/unsubscribe-auth/ABCOVL2FRNCDPALCW7LAZRLZ5OHY5AVCNFSM6AAAAABQUZLFL2VHI2DSMVQWIX3LMV43ASLTON2WKOZSGYYTKOBVGYYDINA>\r\n>> .\r\n>> You are receiving this because you are subscribed to this thread.Message\r\n>> ID: ***@***.***>\r\n>>\r\n>\r\n\ni want to contribute \r\nWill the issue be assigned?\n@FarhanAliRaza the issue is not assigned, there are many PRs that would come out of this, one PR per page fixed, so, you can just take a page that has the old syntax, check there are no other PRs handling it, then update the syntax, and make a PR for it.\n> @FarhanAliRaza the issue is not assigned, there are many PRs that would come out of this, one PR per page fixed, so, you can just take a page that has the old syntax, check there are no other PRs handling it, then update the syntax, and make a PR for it.\r\n\r\nthe game is kicked off \ud83d\ude04\nwhat about cases like this that has title\r\n`Python hl_lines=\"1  3\" title=\"app/routers/users.py\"\r\n{!../../docs_src/bigger_applications/app/routers/users.py!}`\r\n\n@FarhanAliRaza  do you know why your CI/CD passes successfully two of mine have failed now.\r\n\n@philipokiokio, your commits look fine for me . This is the error https://github.com/fastapi/fastapi/actions/runs/11533792038/job/32107125447?pr=12560\n@FarhanAliRaza cool, thanks man.\n> what about cases like this that has title `Python hl_lines=\"1 3\" title=\"app/routers/users.py\" {!../../docs_src/bigger_applications/app/routers/users.py!}`\r\n\r\n@tiangolo \n@FarhanAliRaza As suggested by @tiangolo, it'd be easier for everyone to understand which pages you're working on, if you can set the title of your PR with the file path.\r\n\r\nThanks for understanding.\r\n\r\nA reference PR from @tiangolo for your perusal: https://github.com/fastapi/fastapi/pull/12552\nHi @krishnamadhavan \r\n\r\nso when tabs were used above some code was deleted. is this the expected contribution. example\r\n\r\n```#### Tuple and Set\r\n\r\nYou would do the same to declare `tuple`s and `set`s:\r\n\r\n//// tab | Python 3.9+\r\n\r\n{* ../../docs_src/python_types/tutorial007_py39.py hl[1] *}\r\n\r\n\r\n////\r\n\r\n//// tab | Python 3.8+\r\n\r\n\r\n{* ../../docs_src/python_types/tutorial007.py hl[1,4] *}\r\n\r\n////```\r\n\r\n\r\n\r\n\r\nunlike the example above there was a tutorial for py 3.10\n> @FarhanAliRaza As suggested by @tiangolo, it'd be easier for everyone to understand which pages you're working on, if you can set the title of your PR with the file path.\n> \n> Thanks for understanding.\n> \n> A reference PR from @tiangolo for your perusal: https://github.com/fastapi/fastapi/pull/12552\n\nUpdated.\nCan you answer my above question?\nHope I got the tabs/ multi python version right :)\n> Hi @krishnamadhavan\r\n> \r\n> so when tabs were used above some code was deleted. is this the expected contribution. example\r\n> \r\n> ```\r\n> \r\n> You would do the same to declare `tuple`s and `set`s:\r\n> \r\n> //// tab | Python 3.9+\r\n> \r\n> {* ../../docs_src/python_types/tutorial007_py39.py hl[1] *}\r\n> \r\n> \r\n> ////\r\n> \r\n> //// tab | Python 3.8+\r\n> \r\n> \r\n> {* ../../docs_src/python_types/tutorial007.py hl[1,4] *}\r\n> \r\n> ////```\r\n> \r\n> \r\n> \r\n> \r\n> unlike the example above there was a tutorial for py 3.10\r\n> ```\r\n\r\n@philipokiokio I believe you're talking about [this PR](https://github.com/fastapi/fastapi/pull/12555/files) from @tiangolo . If you're mentioning about the `<details>` and `<summary>` block, it was used to collapse and expand.\r\n\r\nBut since we're combining the different version definitions into a single line, I think we should be good there.\nI just added  PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n\r\n/edit\r\n\r\n@tiangolo \r\nIn the generated document I only see one tab labelled Python 3.8+\r\n\r\nAlthough the code it's importing `Annotated` from`typing` rather than `typing_extensions` and it's also using the pipe symbol for Union types and I don't see the `Older versions and variants`. \r\n\r\nI suspect it's because the scripts parent directories are named differently but I may as well made a mistake.\n> I just added PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n\r\nI'm also a new contributor. But, yes, it looks good to me :)\n> > I just added PR #12566. Is anyone able to check if I got the multiple python versions / tabs bit right so I can crack on with more PRs?\r\n> \r\n> I'm also a new contributor. But, yes, it looks good to me :)\r\n\r\nSorry for some reason I thought you were part of the main contributors :)\n> @FarhanAliRaza do you know why your CI/CD passes successfully two of mine have failed now.\r\n\r\n@philipokiokio This is the root cause of the issue on one of your PRs.\r\n\r\nhttps://github.com/fastapi/fastapi/actions/runs/11533755181/job/32107030159#step:10:45\r\n\r\nAnd this is the source of the bug from your PR: https://github.com/fastapi/fastapi/pull/12557/files#diff-3ef115741af186b4dc8aeaf7382b191f3d9466167b5248ae49fe71fd32cb47eaR119\nI just created this one #12585 ... i hope is fine :)\nThanks everyone for the help here! :bow: :rocket: \r\n\r\nIf you see a page that doesn't fit the cases described above, leave it as is, I'll take care of it later. It's probably that I don't have an established way to handle that case yet and I'll have to update it later. :nerd_face: \n> In these cases, it should be updated to only include the first one (the others will be included automatically \ud83d\ude0e ):\r\n\r\nIn my PRs preview pages, I indeed get automatically the variants but we lose the highlights on the variants code, is it intentional ? did I miss something ?\nCan anyone help me find out why the tests are failing\r\nhttps://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602\n> Can anyone help me find out why the tests are failing https://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602\r\n\r\nThis is what GitHub CI says.\r\n\r\nhttps://github.com/fastapi/fastapi/actions/runs/11536985036/job/32113864270?pr=12602#step:10:45\r\n\r\n\r\nBut when I took a look at your PR, I can see a `>` character. I've commented on your PR hoping that'd help.\nIt seems there is an issue in the build caused by \r\n\r\n`PendingDeprecationWarning: Please use import python_multipart instead` in `test_multipart_installation.py`\r\n\r\nI would hold off until it gets fixed by the main contributors :)\nHey @tiangolo, are we just waiting on #12627 to start merging the new syntax PRs?\n@manvillej no worries, we are already handling the new PRs (by \"we\" I mean @alejsdev :sweat_smile: :nerd_face: ).\r\n\r\nAnd that PR was just merged so no more false positive errors in CI.\nHi @tiangolo, \r\nFor a good starting point, I would like to contribute to update fastapi docs. I am french so I have been starting to update the french doc and in the order of the directory. First file `fr/docs/advanced/additional-responses.md` I want to update, contains Python directives : `Python hl_lines=\"3\"` but also Json directives like that : `JSON hl_lines=\"4-16\"`\r\nIs there something to do with Json directives also ? Or I don't mind about Json comment. \n@tiangolo I don't know if this issue is the correct place, but a question Discussion also doesn't seem as a best fit. If its relevant i can later move to a separate issue.\r\n\r\nOne more thing that was updated in Material for MkDocs was that admonitions with some text defined with a pipe `|` don't need double quotes anymore, but currently most of the docs still have it.\r\n\r\nSo the code:\r\n\r\n```md\r\n/// info| \"Nota\"\r\n...\r\n///\r\n```` \r\n\r\nwill render with the double quotes.\r\n![image](https://github.com/user-attachments/assets/9b7c9c38-44d5-4a58-a58a-d85a1b578673)\r\n\r\nWhereas:\r\n\r\n```md\r\n/// info | Nota\r\n...\r\n///\r\n```\r\n![image](https://github.com/user-attachments/assets/d1b91c71-3124-434f-8501-4739f8a9738f)\r\n\r\nrenders normally,\r\n\r\nI used a Vim regular expression to find all the occurences of this pattern, and if it is valid problem, i want to contribute replacing by texts without double quotes.\r\n\r\n```vim\r\n\" finds double quoted texts after \"/// | \" then replaces by the text inside the quotes \r\n:%s/\\/\\/\\/ .* | \\zs\"\\(.*\\)\"\\ze/\\1\r\n```\r\n \r\nThis regular expression can also be applied to every file in a folder using Vim with the command `args` : \r\n```sh\r\n# opening all docs with vim\r\nvim docs/<language>/docs\r\n```\r\n```vim\r\n\" adding all files of a folder to the arguments\r\n:args <folder_name>/*\r\n\" updating with the regular expression\r\n:argdo %s/\\/\\/\\/ .* | \\zs\"\\(.*\\)\"\\ze/\\1/g | update\r\n```` \r\n\r\nSome example of this behavior is in the portuguese translation of `body-multiple-params`, [here](https://fastapi.tiangolo.com/pt/tutorial/body-multiple-params/#misture-path-query-e-parametros-de-corpo).", "created_at": "2024-11-09T12:00:47Z"}
{"repo": "fastapi/fastapi", "pull_number": 10240, "instance_id": "fastapi__fastapi-10240", "issue_numbers": ["10236"], "base_commit": "980c88c347cbb54c72b31491efbdc000788bebbe", "patch": "diff --git a/fastapi/applications.py b/fastapi/applications.py\nindex 4f5e6f1d98098..6d427cdc27867 100644\n--- a/fastapi/applications.py\n+++ b/fastapi/applications.py\n@@ -1056,7 +1056,7 @@ async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n     def add_api_route(\n         self,\n         path: str,\n-        endpoint: Callable[..., Coroutine[Any, Any, Response]],\n+        endpoint: Callable[..., Any],\n         *,\n         response_model: Any = Default(None),\n         status_code: Optional[int] = None,\n", "test_patch": "", "problem_statement": "Inconsistent add_api_route types\n### Discussed in https://github.com/tiangolo/fastapi/discussions/10235\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **sidekick-eimantas** September 12, 2023</sup>\r\n### First Check\r\n\r\n- [X] I added a very descriptive title here.\r\n- [X] I used the GitHub search to find a similar question and didn't find it.\r\n- [X] I searched the FastAPI documentation, with the integrated search.\r\n- [X] I already searched in Google \"How to X in FastAPI\" and didn't find any information.\r\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n- [X] I already checked if it is not related to FastAPI but to [Pydantic](https://github.com/pydantic/pydantic).\r\n- [X] I already checked if it is not related to FastAPI but to [Swagger UI](https://github.com/swagger-api/swagger-ui).\r\n- [X] I already checked if it is not related to FastAPI but to [ReDoc](https://github.com/Redocly/redoc).\r\n\r\n### Commit to Help\r\n\r\n- [X] I commit to help with one of those options \ud83d\udc46\r\n\r\n### Example Code\r\n\r\n```python\r\n### Direct mounting of routes\r\nimport pathlib\r\n\r\nfrom fastapi import FastAPI, APIRouter\r\nimport uvicorn\r\nimport pydantic\r\n\r\nclass HelloRequest(pydantic.BaseModel):\r\n    id: str\r\n\r\n\r\nclass HelloResponse(pydantic.BaseModel):\r\n    hello: str\r\n\r\n\r\nclass Hello:\r\n    def __init__(self, name: str) -> None:\r\n        self.name = name\r\n\r\n    async def handle(self, request: HelloRequest) -> HelloResponse:\r\n        return HelloResponse(hello=self.name)\r\n\r\napp = FastAPI()\r\nhello_handler = Hello(name=\"test\")\r\napp.add_api_route(\"/hello\", hello_handler.handle, methods=[\"POST\"])\r\n\r\n\r\n\r\n\r\n\r\n\r\n### Mounting of paths via Router\r\nimport pathlib\r\n\r\nfrom fastapi import FastAPI, APIRouter\r\nimport uvicorn\r\nimport pydantic\r\n\r\nclass HelloRequest(pydantic.BaseModel):\r\n    id: str\r\n\r\n\r\nclass HelloResponse(pydantic.BaseModel):\r\n    hello: str\r\n\r\n\r\nclass Hello:\r\n    def __init__(self, name: str) -> None:\r\n        self.name = name\r\n\r\n    async def handle(self, request: HelloRequest) -> HelloResponse:\r\n        return HelloResponse(hello=self.name)\r\n\r\n\r\nclass RootRouter:\r\n    def __init__(self, name: str):\r\n        self.router = APIRouter()\r\n        hello_handler = Hello(name=name)\r\n        self.router.add_api_route(\"/hello\", hello_handler.handle, methods=[\"POST\"])\r\n\r\n\r\napp = FastAPI()\r\nroot_router = RootRouter(name=\"test\")\r\napp.include_router(root_router.router)\r\n```\r\n\r\n\r\n### Description\r\n\r\nFirst example produces a mypy error:\r\n```\r\nerror: Argument 2 to \"add_api_route\" of \"FastAPI\" has incompatible type \"Callable[[HelloRequest], Coroutine[Any, Any, HelloResponse]]\"; expected \"Callable[..., Coroutine[Any, Any, Response]]\"  [arg-type]\r\n```\r\n\r\nSecond example does not.\r\n\r\nThe types of `endpoint` parameter in `FastAPI.add_api_route` and `APIRouter.add_api_route` are inconsistent.\r\n\r\n### Operating System\r\n\r\nmacOS\r\n\r\n### Operating System Details\r\n\r\n_No response_\r\n\r\n### FastAPI Version\r\n\r\n0.103.1\r\n\r\n### Pydantic Version\r\n\r\n2.3.0\r\n\r\n### Python Version\r\n\r\n3.10.7\r\n\r\n### Additional Context\r\n\r\n_No response_</div>\n", "hints_text": "This is a valid issue. The type hint of both `endpoint` parameters should match.\r\n\r\nShould be easy to fix - I don't know which one @tiangolo wants.\nHey @Kludex \r\n\r\nI want to help on this issue if no one is interested, I have used FastAPI before in some hobby projects but this is my first  OSS contribution! ", "created_at": "2023-09-12T21:30:08Z"}
{"repo": "fastapi/fastapi", "pull_number": 9468, "instance_id": "fastapi__fastapi-9468", "issue_numbers": ["9467"], "base_commit": "fe55402776192a3cd669bd3e98cbab9a23796736", "patch": "diff --git a/docs/en/docs/advanced/wsgi.md b/docs/en/docs/advanced/wsgi.md\nindex df8865961721d..cfe3c78c11ca4 100644\n--- a/docs/en/docs/advanced/wsgi.md\n+++ b/docs/en/docs/advanced/wsgi.md\n@@ -12,7 +12,7 @@ Then wrap the WSGI (e.g. Flask) app with the middleware.\n \n And then mount that under a path.\n \n-```Python hl_lines=\"2-3  22\"\n+```Python hl_lines=\"2-3  23\"\n {!../../../docs_src/wsgi/tutorial001.py!}\n ```\n \ndiff --git a/docs_src/wsgi/tutorial001.py b/docs_src/wsgi/tutorial001.py\nindex 500ecf883eaf6..7f27a85a19ae7 100644\n--- a/docs_src/wsgi/tutorial001.py\n+++ b/docs_src/wsgi/tutorial001.py\n@@ -1,6 +1,7 @@\n from fastapi import FastAPI\n from fastapi.middleware.wsgi import WSGIMiddleware\n-from flask import Flask, escape, request\n+from flask import Flask, request\n+from markupsafe import escape\n \n flask_app = Flask(__name__)\n \n", "test_patch": "", "problem_statement": "FastAPI tests in pydantic failing due to flask deprecation\n### Privileged issue\n\n- [X] I'm @tiangolo or he asked me directly to create an issue here.\n\n### Issue Content\n\nhope you don't mind me creating an issue, pydantic's 1.10.X tests are failing due to a new issue with running our fastapi tests, see\r\n\r\nhttps://github.com/pydantic/pydantic/actions/runs/4832692304/jobs/8611783607?pr=5628\r\n\r\noutput from pydantic's tests:\r\n\r\n```\r\n==================================== ERRORS ====================================\r\n______ ERROR collecting tests/test_tutorial/test_wsgi/test_tutorial001.py ______\r\ntests/test_tutorial/test_wsgi/test_tutorial001.py:3: in <module>\r\n    from docs_src.wsgi.tutorial001 import app\r\ndocs_src/wsgi/tutorial001.py:3: in <module>\r\n    from flask import Flask, escape, request\r\n<frozen importlib._bootstrap>:1075: in _handle_fromlist\r\n    ???\r\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/flask/__init__.py:71: in __getattr__\r\n    warnings.warn(\r\nE   DeprecationWarning: 'flask.escape' is deprecated and will be removed in Flask 2.4. Import 'markupsafe.escape' instead.\r\n=========================== short test summary info ============================\r\nERROR tests/test_tutorial/test_wsgi/test_tutorial001.py - DeprecationWarning: 'flask.escape' is deprecated and will be removed in Flask 2.4. Import 'markupsafe.escape' \r\n```\r\n\r\nrelated to https://github.com/pydantic/pydantic/pull/5628\n", "hints_text": "", "created_at": "2023-04-28T20:14:10Z"}
{"repo": "fastapi/fastapi", "pull_number": 5659, "instance_id": "fastapi__fastapi-5659", "issue_numbers": ["5646"], "base_commit": "4638b2c64e259b90bef6a44748e00e405825a111", "patch": "diff --git a/pyproject.toml b/pyproject.toml\nindex 9549cc47da156..0e48fd6dc3f87 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -39,7 +39,7 @@ classifiers = [\n     \"Topic :: Internet :: WWW/HTTP\",\n ]\n dependencies = [\n-    \"starlette==0.21.0\",\n+    \"starlette==0.22.0\",\n     \"pydantic >=1.6.2,!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0\",\n ]\n dynamic = [\"version\"]\n", "test_patch": "diff --git a/tests/test_starlette_urlconvertors.py b/tests/test_starlette_urlconvertors.py\nindex 5a980cbf6dad7..5ef1b819cda70 100644\n--- a/tests/test_starlette_urlconvertors.py\n+++ b/tests/test_starlette_urlconvertors.py\n@@ -1,4 +1,4 @@\n-from fastapi import FastAPI, Path\n+from fastapi import FastAPI, Path, Query\n from fastapi.testclient import TestClient\n \n app = FastAPI()\n@@ -19,6 +19,11 @@ def path_convertor(param: str = Path()):\n     return {\"path\": param}\n \n \n+@app.get(\"/query/\")\n+def query_convertor(param: str = Query()):\n+    return {\"query\": param}\n+\n+\n client = TestClient(app)\n \n \n@@ -45,6 +50,13 @@ def test_route_converters_path():\n     assert response.json() == {\"path\": \"some/example\"}\n \n \n+def test_route_converters_query():\n+    # Test query conversion\n+    response = client.get(\"/query\", params={\"param\": \"Qu\u00e9 tal!\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"query\": \"Qu\u00e9 tal!\"}\n+\n+\n def test_url_path_for_path_convertor():\n     assert (\n         app.url_path_for(\"path_convertor\", param=\"some/example\") == \"/path/some/example\"\n", "problem_statement": "Bad encoding in query parameters with new TestClient using httpx.Client\n### First Check\n\n- [X] I added a very descriptive title to this issue.\n- [X] I used the GitHub search to find a similar issue and didn't find it.\n- [X] I searched the FastAPI documentation, with the integrated search.\n- [X] I already searched in Google \"How to X in FastAPI\" and didn't find any information.\n- [X] I already read and followed all the tutorial in the docs and didn't find an answer.\n- [X] I already checked if it is not related to FastAPI but to [Pydantic](https://github.com/samuelcolvin/pydantic).\n- [X] I already checked if it is not related to FastAPI but to [Swagger UI](https://github.com/swagger-api/swagger-ui).\n- [X] I already checked if it is not related to FastAPI but to [ReDoc](https://github.com/Redocly/redoc).\n\n### Commit to Help\n\n- [X] I commit to help with one of those options \ud83d\udc46\n\n### Example Code\n\n```python\nimport logging\r\n\r\nfrom fastapi import FastAPI\r\n\r\napp = FastAPI()\r\n\r\n\r\n@app.get(\"/example\")\r\nasync def _show_encoding_error(look_for: str):\r\n    return {\"found\": look_for}\r\n\r\n\r\nif __name__ == '__main__':\r\n    from fastapi.testclient import TestClient\r\n\r\n    with TestClient(app) as client:\r\n        params = {\"look_for\": \"plain text\"}\r\n        resp = client.get(\"/example\", params=params).json()\r\n        logging.warning(resp)\r\n        assert resp[\"found\"] == \"plain text\"\r\n\r\n        params = {\"look_for\": \"Espa\u00f1a\"}\r\n        resp = client.get(\"/example\", params=params).json()\r\n        logging.warning(resp)\r\n        assert resp[\"found\"] == \"Espa\u00f1a\", resp[\"found\"]\n```\n\n\n### Description\n\nAfter the change to `httpx` for the `TestClient` in **v0.87.0**, the query parameters are not properly encoded? when sending requests with it, and strings are corrupted when received in the endpoints.\r\n\r\nThe example app works as expected if called from the SwaggerUI or from another python process using a _plain_ `httpx.Client`, so it appears something broke with the new wrapping for `TestClient` \ud83e\udd72\r\n\r\n```python\r\nimport httpx\r\n\r\nparams = {\"look_for\": \"Espa\u00f1a\"}\r\nwith httpx.Client(base_url=\"http://localhost:8000/\") as client:\r\n    resp = client.get(\"/example\", params=params).json()\r\n    assert resp[\"found\"] == \"Espa\u00f1a\"\r\n```\n\n### Operating System\n\nmacOS\n\n### Operating System Details\n\nM1, running arm64 arch\n\n### FastAPI Version\n\n0.87.0\n\n### Python Version\n\nPython 3.10.5\n\n### Additional Context\n\nstarlette-0.21\r\nhttpx-0.23.0\r\n\r\nDiscovered when trying to migrate the test suite for a ~big project previously using fastapi-0.85.1 + starlette-0.20.4. \r\n\r\nAll minor syntax changes from old `requests` to new `httpx` were under control, but in one unit test, **a string with an accent** was making some search to fail without results (test is sending \"Formalizaci\u00f3n\" but endpoint is receiving **\"Formalizaci\u00c3\u00b3n\"** \ud83d\ude31), and I was getting crazy \ud83d\ude05\n", "hints_text": "I just saw **this it is not related to FastAPI but to Starlette** \ud83d\ude05, after https://github.com/encode/starlette/pull/1376, and the example code above fails the same way if using the original object `from starlette.testclient import TestClient`\r\n\r\nI'll try to ask there \ud83d\udc4d\r\n\r\nNot sure if closing this one, as `starlette` version is pinned to [`0.21.0`](https://github.com/encode/starlette/releases/tag/0.21.0) because of the `TestClient` change\nFor those in a hurry, or just to quick-check that the _strange broken tests_ you're having after the `TestClient` change to `httpx` are related to this, \r\n\r\n`pip install https://lexic-public-assets.s3.eu-west-1.amazonaws.com/wheels/universal/starlette-0.21.0-py3-none-any.whl`\r\n\r\nwill swap the published version with a fixed one containing https://github.com/encode/starlette/pull/1953 \ud83d\udc4d\nThis is solved in Starlette 0.22.0.\n@Kludex What is the plan to fix it in FastAPI? Is there a PR that pulls in the Starlette 0.22.0? The Starlette 0.22.0 is already out.", "created_at": "2022-11-18T14:02:12Z"}
{"repo": "fastapi/fastapi", "pull_number": 4871, "instance_id": "fastapi__fastapi-4871", "issue_numbers": ["3323"], "base_commit": "ef176c663195489b44030bfe1fb94a317762c8d5", "patch": "diff --git a/docs_src/annotated/tutorial001.py b/docs_src/annotated/tutorial001.py\nnew file mode 100644\nindex 0000000000000..959114b3f51dd\n--- /dev/null\n+++ b/docs_src/annotated/tutorial001.py\n@@ -0,0 +1,18 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n+\n+\n+CommonParamsDepends = Annotated[dict, Depends(common_parameters)]\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonParamsDepends):\n+    return commons\ndiff --git a/docs_src/annotated/tutorial001_py39.py b/docs_src/annotated/tutorial001_py39.py\nnew file mode 100644\nindex 0000000000000..b05b89c4eed86\n--- /dev/null\n+++ b/docs_src/annotated/tutorial001_py39.py\n@@ -0,0 +1,17 @@\n+from typing import Annotated, Optional\n+\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n+\n+\n+CommonParamsDepends = Annotated[dict, Depends(common_parameters)]\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonParamsDepends):\n+    return commons\ndiff --git a/docs_src/annotated/tutorial002.py b/docs_src/annotated/tutorial002.py\nnew file mode 100644\nindex 0000000000000..2293fbb1aa0f0\n--- /dev/null\n+++ b/docs_src/annotated/tutorial002.py\n@@ -0,0 +1,21 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+class CommonQueryParams:\n+    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n+\n+\n+CommonQueryParamsDepends = Annotated[CommonQueryParams, Depends()]\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParamsDepends):\n+    return commons\ndiff --git a/docs_src/annotated/tutorial002_py39.py b/docs_src/annotated/tutorial002_py39.py\nnew file mode 100644\nindex 0000000000000..7fa1a8740a621\n--- /dev/null\n+++ b/docs_src/annotated/tutorial002_py39.py\n@@ -0,0 +1,20 @@\n+from typing import Annotated, Optional\n+\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+class CommonQueryParams:\n+    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n+\n+\n+CommonQueryParamsDepends = Annotated[CommonQueryParams, Depends()]\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParamsDepends):\n+    return commons\ndiff --git a/docs_src/annotated/tutorial003.py b/docs_src/annotated/tutorial003.py\nnew file mode 100644\nindex 0000000000000..353d8b8069ce5\n--- /dev/null\n+++ b/docs_src/annotated/tutorial003.py\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI, Path\n+from fastapi.param_functions import Query\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(item_id: Annotated[int, Path(gt=0)]):\n+    return {\"item_id\": item_id}\n+\n+\n+@app.get(\"/users\")\n+async def read_users(user_id: Annotated[str, Query(min_length=1)] = \"me\"):\n+    return {\"user_id\": user_id}\ndiff --git a/docs_src/annotated/tutorial003_py39.py b/docs_src/annotated/tutorial003_py39.py\nnew file mode 100644\nindex 0000000000000..9341b7d4ff75d\n--- /dev/null\n+++ b/docs_src/annotated/tutorial003_py39.py\n@@ -0,0 +1,16 @@\n+from typing import Annotated\n+\n+from fastapi import FastAPI, Path\n+from fastapi.param_functions import Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(item_id: Annotated[int, Path(gt=0)]):\n+    return {\"item_id\": item_id}\n+\n+\n+@app.get(\"/users\")\n+async def read_users(user_id: Annotated[str, Query(min_length=1)] = \"me\"):\n+    return {\"user_id\": user_id}\ndiff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex a982b071a33c5..c581348c9d26c 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -48,7 +48,7 @@\n     Undefined,\n )\n from pydantic.schema import get_annotation_from_field_info\n-from pydantic.typing import evaluate_forwardref\n+from pydantic.typing import evaluate_forwardref, get_args, get_origin\n from pydantic.utils import lenient_issubclass\n from starlette.background import BackgroundTasks\n from starlette.concurrency import run_in_threadpool\n@@ -56,6 +56,7 @@\n from starlette.requests import HTTPConnection, Request\n from starlette.responses import Response\n from starlette.websockets import WebSocket\n+from typing_extensions import Annotated\n \n sequence_shapes = {\n     SHAPE_LIST,\n@@ -112,18 +113,18 @@ def check_file_field(field: ModelField) -> None:\n \n \n def get_param_sub_dependant(\n-    *, param: inspect.Parameter, path: str, security_scopes: Optional[List[str]] = None\n+    *,\n+    param_name: str,\n+    depends: params.Depends,\n+    path: str,\n+    security_scopes: Optional[List[str]] = None,\n ) -> Dependant:\n-    depends: params.Depends = param.default\n-    if depends.dependency:\n-        dependency = depends.dependency\n-    else:\n-        dependency = param.annotation\n+    assert depends.dependency\n     return get_sub_dependant(\n         depends=depends,\n-        dependency=dependency,\n+        dependency=depends.dependency,\n         path=path,\n-        name=param.name,\n+        name=param_name,\n         security_scopes=security_scopes,\n     )\n \n@@ -298,122 +299,199 @@ def get_dependant(\n         use_cache=use_cache,\n     )\n     for param_name, param in signature_params.items():\n-        if isinstance(param.default, params.Depends):\n+        is_path_param = param_name in path_param_names\n+        type_annotation, depends, param_field = analyze_param(\n+            param_name=param_name,\n+            annotation=param.annotation,\n+            value=param.default,\n+            is_path_param=is_path_param,\n+        )\n+        if depends is not None:\n             sub_dependant = get_param_sub_dependant(\n-                param=param, path=path, security_scopes=security_scopes\n+                param_name=param_name,\n+                depends=depends,\n+                path=path,\n+                security_scopes=security_scopes,\n             )\n             dependant.dependencies.append(sub_dependant)\n             continue\n-        if add_non_field_param_to_dependency(param=param, dependant=dependant):\n+        if add_non_field_param_to_dependency(\n+            param_name=param_name,\n+            type_annotation=type_annotation,\n+            dependant=dependant,\n+        ):\n+            assert (\n+                param_field is None\n+            ), f\"Cannot specify multiple FastAPI annotations for {param_name!r}\"\n             continue\n-        param_field = get_param_field(\n-            param=param, default_field_info=params.Query, param_name=param_name\n-        )\n-        if param_name in path_param_names:\n-            assert is_scalar_field(\n-                field=param_field\n-            ), \"Path params must be of one of the supported types\"\n-            ignore_default = not isinstance(param.default, params.Path)\n-            param_field = get_param_field(\n-                param=param,\n-                param_name=param_name,\n-                default_field_info=params.Path,\n-                force_type=params.ParamTypes.path,\n-                ignore_default=ignore_default,\n-            )\n-            add_param_to_fields(field=param_field, dependant=dependant)\n-        elif is_scalar_field(field=param_field):\n-            add_param_to_fields(field=param_field, dependant=dependant)\n-        elif isinstance(\n-            param.default, (params.Query, params.Header)\n-        ) and is_scalar_sequence_field(param_field):\n-            add_param_to_fields(field=param_field, dependant=dependant)\n-        else:\n-            field_info = param_field.field_info\n-            assert isinstance(\n-                field_info, params.Body\n-            ), f\"Param: {param_field.name} can only be a request body, using Body()\"\n+        assert param_field is not None\n+        if is_body_param(param_field=param_field, is_path_param=is_path_param):\n             dependant.body_params.append(param_field)\n+        else:\n+            add_param_to_fields(field=param_field, dependant=dependant)\n     return dependant\n \n \n def add_non_field_param_to_dependency(\n-    *, param: inspect.Parameter, dependant: Dependant\n+    *, param_name: str, type_annotation: Any, dependant: Dependant\n ) -> Optional[bool]:\n-    if lenient_issubclass(param.annotation, Request):\n-        dependant.request_param_name = param.name\n+    if lenient_issubclass(type_annotation, Request):\n+        dependant.request_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, WebSocket):\n-        dependant.websocket_param_name = param.name\n+    elif lenient_issubclass(type_annotation, WebSocket):\n+        dependant.websocket_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, HTTPConnection):\n-        dependant.http_connection_param_name = param.name\n+    elif lenient_issubclass(type_annotation, HTTPConnection):\n+        dependant.http_connection_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, Response):\n-        dependant.response_param_name = param.name\n+    elif lenient_issubclass(type_annotation, Response):\n+        dependant.response_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, BackgroundTasks):\n-        dependant.background_tasks_param_name = param.name\n+    elif lenient_issubclass(type_annotation, BackgroundTasks):\n+        dependant.background_tasks_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, SecurityScopes):\n-        dependant.security_scopes_param_name = param.name\n+    elif lenient_issubclass(type_annotation, SecurityScopes):\n+        dependant.security_scopes_param_name = param_name\n         return True\n     return None\n \n \n-def get_param_field(\n+def analyze_param(\n     *,\n-    param: inspect.Parameter,\n     param_name: str,\n-    default_field_info: Type[params.Param] = params.Param,\n-    force_type: Optional[params.ParamTypes] = None,\n-    ignore_default: bool = False,\n-) -> ModelField:\n-    default_value: Any = Undefined\n-    had_schema = False\n-    if not param.default == param.empty and ignore_default is False:\n-        default_value = param.default\n-    if isinstance(default_value, FieldInfo):\n-        had_schema = True\n-        field_info = default_value\n-        default_value = field_info.default\n-        if (\n+    annotation: Any,\n+    value: Any,\n+    is_path_param: bool,\n+) -> Tuple[Any, Optional[params.Depends], Optional[ModelField]]:\n+    field_info = None\n+    used_default_field_info = False\n+    depends = None\n+    type_annotation: Any = Any\n+    if (\n+        annotation is not inspect.Signature.empty\n+        and get_origin(annotation) is Annotated  # type: ignore[comparison-overlap]\n+    ):\n+        annotated_args = get_args(annotation)\n+        type_annotation = annotated_args[0]\n+        fastapi_annotations = [\n+            arg\n+            for arg in annotated_args[1:]\n+            if isinstance(arg, (FieldInfo, params.Depends))\n+        ]\n+        assert (\n+            len(fastapi_annotations) <= 1\n+        ), f\"Cannot specify multiple `Annotated` FastAPI arguments for {param_name!r}\"\n+        fastapi_annotation = next(iter(fastapi_annotations), None)\n+        if isinstance(fastapi_annotation, FieldInfo):\n+            field_info = fastapi_annotation\n+            assert field_info.default is Undefined or field_info.default is Required, (\n+                f\"`{field_info.__class__.__name__}` default value cannot be set in\"\n+                f\" `Annotated` for {param_name!r}. Set the default value with `=` instead.\"\n+            )\n+            if value is not inspect.Signature.empty:\n+                assert not is_path_param, \"Path parameters cannot have default values\"\n+                field_info.default = value\n+            else:\n+                field_info.default = Required\n+        elif isinstance(fastapi_annotation, params.Depends):\n+            depends = fastapi_annotation\n+    elif annotation is not inspect.Signature.empty:\n+        type_annotation = annotation\n+\n+    if isinstance(value, params.Depends):\n+        assert depends is None, (\n+            \"Cannot specify `Depends` in `Annotated` and default value\"\n+            f\" together for {param_name!r}\"\n+        )\n+        assert field_info is None, (\n+            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n+            f\" default value together for {param_name!r}\"\n+        )\n+        depends = value\n+    elif isinstance(value, FieldInfo):\n+        assert field_info is None, (\n+            \"Cannot specify FastAPI annotations in `Annotated` and default value\"\n+            f\" together for {param_name!r}\"\n+        )\n+        field_info = value\n+\n+    if depends is not None and depends.dependency is None:\n+        depends.dependency = type_annotation\n+\n+    if lenient_issubclass(\n+        type_annotation,\n+        (Request, WebSocket, HTTPConnection, Response, BackgroundTasks, SecurityScopes),\n+    ):\n+        assert depends is None, f\"Cannot specify `Depends` for type {type_annotation!r}\"\n+        assert (\n+            field_info is None\n+        ), f\"Cannot specify FastAPI annotation for type {type_annotation!r}\"\n+    elif field_info is None and depends is None:\n+        default_value = value if value is not inspect.Signature.empty else Required\n+        if is_path_param:\n+            # We might check here that `default_value is Required`, but the fact is that the same\n+            # parameter might sometimes be a path parameter and sometimes not. See\n+            # `tests/test_infer_param_optionality.py` for an example.\n+            field_info = params.Path()\n+        else:\n+            field_info = params.Query(default=default_value)\n+        used_default_field_info = True\n+\n+    field = None\n+    if field_info is not None:\n+        if is_path_param:\n+            assert isinstance(field_info, params.Path), (\n+                f\"Cannot use `{field_info.__class__.__name__}` for path param\"\n+                f\" {param_name!r}\"\n+            )\n+        elif (\n             isinstance(field_info, params.Param)\n             and getattr(field_info, \"in_\", None) is None\n         ):\n-            field_info.in_ = default_field_info.in_\n-        if force_type:\n-            field_info.in_ = force_type  # type: ignore\n-    else:\n-        field_info = default_field_info(default=default_value)\n-    required = True\n-    if default_value is Required or ignore_default:\n-        required = True\n-        default_value = None\n-    elif default_value is not Undefined:\n-        required = False\n-    annotation: Any = Any\n-    if not param.annotation == param.empty:\n-        annotation = param.annotation\n-    annotation = get_annotation_from_field_info(annotation, field_info, param_name)\n-    if not field_info.alias and getattr(field_info, \"convert_underscores\", None):\n-        alias = param.name.replace(\"_\", \"-\")\n-    else:\n-        alias = field_info.alias or param.name\n-    field = create_response_field(\n-        name=param.name,\n-        type_=annotation,\n-        default=default_value,\n-        alias=alias,\n-        required=required,\n-        field_info=field_info,\n-    )\n-    if not had_schema and not is_scalar_field(field=field):\n-        field.field_info = params.Body(field_info.default)\n-    if not had_schema and lenient_issubclass(field.type_, UploadFile):\n-        field.field_info = params.File(field_info.default)\n+            field_info.in_ = params.ParamTypes.query\n+        annotation = get_annotation_from_field_info(\n+            annotation if annotation is not inspect.Signature.empty else Any,\n+            field_info,\n+            param_name,\n+        )\n+        if not field_info.alias and getattr(field_info, \"convert_underscores\", None):\n+            alias = param_name.replace(\"_\", \"-\")\n+        else:\n+            alias = field_info.alias or param_name\n+        field = create_response_field(\n+            name=param_name,\n+            type_=annotation,\n+            default=field_info.default,\n+            alias=alias,\n+            required=field_info.default in (Required, Undefined),\n+            field_info=field_info,\n+        )\n+        if used_default_field_info:\n+            if lenient_issubclass(field.type_, UploadFile):\n+                field.field_info = params.File(field_info.default)\n+            elif not is_scalar_field(field=field):\n+                field.field_info = params.Body(field_info.default)\n+\n+    return type_annotation, depends, field\n+\n \n-    return field\n+def is_body_param(*, param_field: ModelField, is_path_param: bool) -> bool:\n+    if is_path_param:\n+        assert is_scalar_field(\n+            field=param_field\n+        ), \"Path params must be of one of the supported types\"\n+        return False\n+    elif is_scalar_field(field=param_field):\n+        return False\n+    elif isinstance(\n+        param_field.field_info, (params.Query, params.Header)\n+    ) and is_scalar_sequence_field(param_field):\n+        return False\n+    else:\n+        assert isinstance(\n+            param_field.field_info, params.Body\n+        ), f\"Param: {param_field.name} can only be a request body, using Body()\"\n+        return True\n \n \n def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\ndiff --git a/fastapi/param_functions.py b/fastapi/param_functions.py\nindex 1932ef0657d66..75f054e9dcbf5 100644\n--- a/fastapi/param_functions.py\n+++ b/fastapi/param_functions.py\n@@ -5,7 +5,7 @@\n \n \n def Path(  # noqa: N802\n-    default: Any = Undefined,\n+    default: Any = ...,\n     *,\n     alias: Optional[str] = None,\n     title: Optional[str] = None,\ndiff --git a/fastapi/params.py b/fastapi/params.py\nindex 5395b98a39ab1..16c5c309a785f 100644\n--- a/fastapi/params.py\n+++ b/fastapi/params.py\n@@ -62,7 +62,7 @@ class Path(Param):\n \n     def __init__(\n         self,\n-        default: Any = Undefined,\n+        default: Any = ...,\n         *,\n         alias: Optional[str] = None,\n         title: Optional[str] = None,\n@@ -80,9 +80,10 @@ def __init__(\n         include_in_schema: bool = True,\n         **extra: Any,\n     ):\n+        assert default is ..., \"Path parameters cannot have a default value\"\n         self.in_ = self.in_\n         super().__init__(\n-            default=...,\n+            default=default,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -279,7 +280,7 @@ def __repr__(self) -> str:\n class Form(Body):\n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         media_type: str = \"application/x-www-form-urlencoded\",\n         alias: Optional[str] = None,\n@@ -319,7 +320,7 @@ def __init__(\n class File(Form):\n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         media_type: str = \"multipart/form-data\",\n         alias: Optional[str] = None,\ndiff --git a/fastapi/utils.py b/fastapi/utils.py\nindex 391c47d813e71..d8be53c57e6b7 100644\n--- a/fastapi/utils.py\n+++ b/fastapi/utils.py\n@@ -1,4 +1,3 @@\n-import functools\n import re\n import warnings\n from dataclasses import is_dataclass\n@@ -73,19 +72,17 @@ def create_response_field(\n     class_validators = class_validators or {}\n     field_info = field_info or FieldInfo()\n \n-    response_field = functools.partial(\n-        ModelField,\n-        name=name,\n-        type_=type_,\n-        class_validators=class_validators,\n-        default=default,\n-        required=required,\n-        model_config=model_config,\n-        alias=alias,\n-    )\n-\n     try:\n-        return response_field(field_info=field_info)\n+        return ModelField(\n+            name=name,\n+            type_=type_,\n+            class_validators=class_validators,\n+            default=default,\n+            required=required,\n+            model_config=model_config,\n+            alias=alias,\n+            field_info=field_info,\n+        )\n     except RuntimeError:\n         raise fastapi.exceptions.FastAPIError(\n             \"Invalid args for response field! Hint: \"\n", "test_patch": "diff --git a/tests/main.py b/tests/main.py\nindex fce6657040bd8..15760c0396941 100644\n--- a/tests/main.py\n+++ b/tests/main.py\n@@ -49,12 +49,7 @@ def get_bool_id(item_id: bool):\n \n \n @app.get(\"/path/param/{item_id}\")\n-def get_path_param_id(item_id: str = Path()):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-required/{item_id}\")\n-def get_path_param_required_id(item_id: str = Path()):\n+def get_path_param_id(item_id: Optional[str] = Path()):\n     return item_id\n \n \ndiff --git a/tests/test_ambiguous_params.py b/tests/test_ambiguous_params.py\nnew file mode 100644\nindex 0000000000000..42bcc27a1df8f\n--- /dev/null\n+++ b/tests/test_ambiguous_params.py\n@@ -0,0 +1,66 @@\n+import pytest\n+from fastapi import Depends, FastAPI, Path\n+from fastapi.param_functions import Query\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+def test_no_annotated_defaults():\n+    with pytest.raises(\n+        AssertionError, match=\"Path parameters cannot have a default value\"\n+    ):\n+\n+        @app.get(\"/items/{item_id}/\")\n+        async def get_item(item_id: Annotated[int, Path(default=1)]):\n+            pass  # pragma: nocover\n+\n+    with pytest.raises(\n+        AssertionError,\n+        match=(\n+            \"`Query` default value cannot be set in `Annotated` for 'item_id'. Set the\"\n+            \" default value with `=` instead.\"\n+        ),\n+    ):\n+\n+        @app.get(\"/\")\n+        async def get(item_id: Annotated[int, Query(default=1)]):\n+            pass  # pragma: nocover\n+\n+\n+def test_no_multiple_annotations():\n+    async def dep():\n+        pass  # pragma: nocover\n+\n+    with pytest.raises(\n+        AssertionError,\n+        match=\"Cannot specify multiple `Annotated` FastAPI arguments for 'foo'\",\n+    ):\n+\n+        @app.get(\"/\")\n+        async def get(foo: Annotated[int, Query(min_length=1), Query()]):\n+            pass  # pragma: nocover\n+\n+    with pytest.raises(\n+        AssertionError,\n+        match=(\n+            \"Cannot specify `Depends` in `Annotated` and default value\"\n+            \" together for 'foo'\"\n+        ),\n+    ):\n+\n+        @app.get(\"/\")\n+        async def get2(foo: Annotated[int, Depends(dep)] = Depends(dep)):\n+            pass  # pragma: nocover\n+\n+    with pytest.raises(\n+        AssertionError,\n+        match=(\n+            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n+            \" default value together for 'foo'\"\n+        ),\n+    ):\n+\n+        @app.get(\"/\")\n+        async def get3(foo: Annotated[int, Query(min_length=1)] = Depends(dep)):\n+            pass  # pragma: nocover\ndiff --git a/tests/test_annotated.py b/tests/test_annotated.py\nnew file mode 100644\nindex 0000000000000..556019897a53e\n--- /dev/null\n+++ b/tests/test_annotated.py\n@@ -0,0 +1,226 @@\n+import pytest\n+from fastapi import FastAPI, Query\n+from fastapi.testclient import TestClient\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/default\")\n+async def default(foo: Annotated[str, Query()] = \"foo\"):\n+    return {\"foo\": foo}\n+\n+\n+@app.get(\"/required\")\n+async def required(foo: Annotated[str, Query(min_length=1)]):\n+    return {\"foo\": foo}\n+\n+\n+@app.get(\"/multiple\")\n+async def multiple(foo: Annotated[str, object(), Query(min_length=1)]):\n+    return {\"foo\": foo}\n+\n+\n+@app.get(\"/unrelated\")\n+async def unrelated(foo: Annotated[str, object()]):\n+    return {\"foo\": foo}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/default\": {\n+            \"get\": {\n+                \"summary\": \"Default\",\n+                \"operationId\": \"default_default_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Foo\", \"type\": \"string\", \"default\": \"foo\"},\n+                        \"name\": \"foo\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/required\": {\n+            \"get\": {\n+                \"summary\": \"Required\",\n+                \"operationId\": \"required_required_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Foo\", \"minLength\": 1, \"type\": \"string\"},\n+                        \"name\": \"foo\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/multiple\": {\n+            \"get\": {\n+                \"summary\": \"Multiple\",\n+                \"operationId\": \"multiple_multiple_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Foo\", \"minLength\": 1, \"type\": \"string\"},\n+                        \"name\": \"foo\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/unrelated\": {\n+            \"get\": {\n+                \"summary\": \"Unrelated\",\n+                \"operationId\": \"unrelated_unrelated_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Foo\", \"type\": \"string\"},\n+                        \"name\": \"foo\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+foo_is_missing = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"foo\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+foo_is_short = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 1},\n+            \"loc\": [\"query\", \"foo\"],\n+            \"msg\": \"ensure this value has at least 1 characters\",\n+            \"type\": \"value_error.any_str.min_length\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/default\", 200, {\"foo\": \"foo\"}),\n+        (\"/default?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/required?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/required\", 422, foo_is_missing),\n+        (\"/required?foo=\", 422, foo_is_short),\n+        (\"/multiple?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/multiple\", 422, foo_is_missing),\n+        (\"/multiple?foo=\", 422, foo_is_short),\n+        (\"/unrelated?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/unrelated\", 422, foo_is_missing),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\ndiff --git a/tests/test_application.py b/tests/test_application.py\nindex b7d72f9ad176c..a4f13e12dabce 100644\n--- a/tests/test_application.py\n+++ b/tests/test_application.py\n@@ -225,36 +225,6 @@\n                 ],\n             }\n         },\n-        \"/path/param-required/{item_id}\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Get Path Param Required Id\",\n-                \"operationId\": \"get_path_param_required_id_path_param_required__item_id__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            }\n-        },\n         \"/path/param-minlength/{item_id}\": {\n             \"get\": {\n                 \"responses\": {\ndiff --git a/tests/test_params_repr.py b/tests/test_params_repr.py\nindex d721257d76251..d8dca1ea42abd 100644\n--- a/tests/test_params_repr.py\n+++ b/tests/test_params_repr.py\n@@ -19,8 +19,9 @@ def test_param_repr(params):\n     assert repr(Param(params)) == \"Param(\" + str(params) + \")\"\n \n \n-def test_path_repr(params):\n-    assert repr(Path(params)) == \"Path(Ellipsis)\"\n+def test_path_repr():\n+    assert repr(Path()) == \"Path(Ellipsis)\"\n+    assert repr(Path(...)) == \"Path(Ellipsis)\"\n \n \n def test_query_repr(params):\ndiff --git a/tests/test_path.py b/tests/test_path.py\nindex d1a58bc66174d..03b93623a97e9 100644\n--- a/tests/test_path.py\n+++ b/tests/test_path.py\n@@ -193,7 +193,6 @@ def test_nonexistent():\n         (\"/path/bool/False\", 200, False),\n         (\"/path/bool/false\", 200, False),\n         (\"/path/param/foo\", 200, \"foo\"),\n-        (\"/path/param-required/foo\", 200, \"foo\"),\n         (\"/path/param-minlength/foo\", 200, \"foo\"),\n         (\"/path/param-minlength/fo\", 422, response_at_least_3),\n         (\"/path/param-maxlength/foo\", 200, \"foo\"),\ndiff --git a/tests/test_tutorial/test_annotated/__init__.py b/tests/test_tutorial/test_annotated/__init__.py\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\ndiff --git a/tests/test_tutorial/test_annotated/test_tutorial001.py b/tests/test_tutorial/test_annotated/test_tutorial001.py\nnew file mode 100644\nindex 0000000000000..50c9caca29dbc\n--- /dev/null\n+++ b/tests/test_tutorial/test_annotated/test_tutorial001.py\n@@ -0,0 +1,100 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from docs_src.annotated.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\ndiff --git a/tests/test_tutorial/test_annotated/test_tutorial001_py39.py b/tests/test_tutorial/test_annotated/test_tutorial001_py39.py\nnew file mode 100644\nindex 0000000000000..576f557029889\n--- /dev/null\n+++ b/tests/test_tutorial/test_annotated/test_tutorial001_py39.py\n@@ -0,0 +1,107 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.annotated.tutorial001_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\ndiff --git a/tests/test_tutorial/test_annotated/test_tutorial002.py b/tests/test_tutorial/test_annotated/test_tutorial002.py\nnew file mode 100644\nindex 0000000000000..60c1233d8167e\n--- /dev/null\n+++ b/tests/test_tutorial/test_annotated/test_tutorial002.py\n@@ -0,0 +1,100 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from docs_src.annotated.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\ndiff --git a/tests/test_tutorial/test_annotated/test_tutorial002_py39.py b/tests/test_tutorial/test_annotated/test_tutorial002_py39.py\nnew file mode 100644\nindex 0000000000000..77a1f36a0481e\n--- /dev/null\n+++ b/tests/test_tutorial/test_annotated/test_tutorial002_py39.py\n@@ -0,0 +1,107 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.annotated.tutorial002_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\ndiff --git a/tests/test_tutorial/test_annotated/test_tutorial003.py b/tests/test_tutorial/test_annotated/test_tutorial003.py\nnew file mode 100644\nindex 0000000000000..caf7ffdf15c88\n--- /dev/null\n+++ b/tests/test_tutorial/test_annotated/test_tutorial003.py\n@@ -0,0 +1,138 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from docs_src.annotated.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Item Id\",\n+                            \"exclusiveMinimum\": 0.0,\n+                            \"type\": \"integer\",\n+                        },\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/users\": {\n+            \"get\": {\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"User Id\",\n+                            \"minLength\": 1,\n+                            \"type\": \"string\",\n+                            \"default\": \"me\",\n+                        },\n+                        \"name\": \"user_id\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+item_id_negative = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items/1\", 200, {\"item_id\": 1}),\n+        (\"/items/-1\", 422, item_id_negative),\n+        (\"/users\", 200, {\"user_id\": \"me\"}),\n+        (\"/users?user_id=foo\", 200, {\"user_id\": \"foo\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status, response.text\n+    assert response.json() == expected_response\ndiff --git a/tests/test_tutorial/test_annotated/test_tutorial003_py39.py b/tests/test_tutorial/test_annotated/test_tutorial003_py39.py\nnew file mode 100644\nindex 0000000000000..7c828a0ceba83\n--- /dev/null\n+++ b/tests/test_tutorial/test_annotated/test_tutorial003_py39.py\n@@ -0,0 +1,145 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Item Id\",\n+                            \"exclusiveMinimum\": 0.0,\n+                            \"type\": \"integer\",\n+                        },\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/users\": {\n+            \"get\": {\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"User Id\",\n+                            \"minLength\": 1,\n+                            \"type\": \"string\",\n+                            \"default\": \"me\",\n+                        },\n+                        \"name\": \"user_id\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+item_id_negative = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.annotated.tutorial003_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items/1\", 200, {\"item_id\": 1}),\n+        (\"/items/-1\", 422, item_id_negative),\n+        (\"/users\", 200, {\"user_id\": \"me\"}),\n+        (\"/users?user_id=foo\", 200, {\"user_id\": \"foo\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client):\n+    response = client.get(path)\n+    assert response.status_code == expected_status, response.text\n+    assert response.json() == expected_response\ndiff --git a/tests/test_tutorial/test_dataclasses/__init__.py b/tests/test_tutorial/test_dataclasses/__init__.py\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\n", "problem_statement": "Support PEP 593 `Annotated` for specifying dependencies and parameters\n### First check\r\n\r\n* [x] I added a very descriptive title to this issue.\r\n* [x] I used the GitHub search to find a similar issue and didn't find it.\r\n* [x] I searched the FastAPI documentation, with the integrated search.\r\n* [x] I already searched in Google \"How to X in FastAPI\" and didn't find any information.\r\n* [x] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n* [x] I already checked if it is not related to FastAPI but to [Pydantic](https://github.com/samuelcolvin/pydantic).\r\n* [x] I already checked if it is not related to FastAPI but to [Swagger UI](https://github.com/swagger-api/swagger-ui).\r\n* [x] I already checked if it is not related to FastAPI but to [ReDoc](https://github.com/Redocly/redoc).\r\n* [x] After submitting this, I commit to:\r\n    * Read open issues with questions until I find 2 issues where I can help someone and add a comment to help there.\r\n    * Or, I already hit the \"watch\" button in this repository to receive notifications and I commit to help at least 2 people that ask questions in the future.\r\n    * Implement a Pull Request for a confirmed bug.\r\n\r\n### Example\r\n\r\nI propse to allow transforming:\r\n<!-- Replace the code below with your own self-contained, minimal, reproducible, example -->\r\n\r\n```Python\r\nfrom typing import Optional\r\n\r\nfrom fastapi import Depends, FastAPI\r\n\r\napp = FastAPI()\r\n\r\n\r\nasync def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\r\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\r\n\r\n\r\n@app.get(\"/items/\")\r\nasync def read_items(commons: dict = Depends(common_parameters)):\r\n    return commons\r\n```\r\nto \r\n```Python\r\nfrom typing import Annotated, Optional\r\n\r\nfrom fastapi import Depends, FastAPI\r\n\r\napp = FastAPI()\r\n\r\n\r\nasync def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\r\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\r\n\r\n\r\n@app.get(\"/items/\")\r\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\r\n    return commons\r\n```\r\n\r\n### Discussion\r\n[PEP 593](https://www.python.org/dev/peps/pep-0593/) Added `Annotated` for adding additional annotations beyond type annotations. I think FastAPI's `Depends`, `Query`, `Body` and the likes fit well with the kind of additional annotations this supports.\r\n\r\nThis would also make default values less awkward:\r\n```python\r\n@app.get(\"/items/\")\r\nasync def read_items(q: Optional[str] = Query(None, max_length=50)):\r\n    pass\r\n```\r\nCould become\r\n```python\r\n@app.get(\"/items/\")\r\nasync def read_items(q: Annotated[Optional[str], Query(max_length=50)] = None):\r\n    pass\r\n```\r\n\r\nThis will also solve the issue mentioned [in the docs](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/#order-the-parameters-as-you-need) of parameter ordering.\r\n\r\nFinally, it is sometimes convenient to use the same function as both a FastAPI dependency and a regular function. In these cases, because `= Depends(...)` is a default parameter value, if you forget to pass a parameter the error is not caught by your IDE. Worse, it is not caught at runtime because Python will just pass along the `Depends` object. This will probably cause an error down the road, but may silently succeed in some cases.\r\n\r\nI'm willing to implement this if you think it's a good idea.\n", "hints_text": "`Pydantic`'s `Field()` function supports it: https://pydantic-docs.helpmanual.io/usage/schema/#typingannotated-fields.", "created_at": "2022-05-07T15:34:18Z"}
{"repo": "fastapi/fastapi", "pull_number": 3372, "instance_id": "fastapi__fastapi-3372", "issue_numbers": ["310"], "base_commit": "4d26fa5c546f68ddb67bd3e6c194c644323aadaa", "patch": "diff --git a/README.md b/README.md\nindex 3055e670d9505..d376fb74ea78f 100644\n--- a/README.md\n+++ b/README.md\n@@ -442,7 +442,6 @@ Used by Pydantic:\n Used by Starlette:\n \n * <a href=\"https://requests.readthedocs.io\" target=\"_blank\"><code>requests</code></a> - Required if you want to use the `TestClient`.\n-* <a href=\"https://github.com/Tinche/aiofiles\" target=\"_blank\"><code>aiofiles</code></a> - Required if you want to use `FileResponse` or `StaticFiles`.\n * <a href=\"https://jinja.palletsprojects.com\" target=\"_blank\"><code>jinja2</code></a> - Required if you want to use the default template configuration.\n * <a href=\"https://andrew-d.github.io/python-multipart/\" target=\"_blank\"><code>python-multipart</code></a> - Required if you want to support form <abbr title=\"converting the string that comes from an HTTP request into Python data\">\"parsing\"</abbr>, with `request.form()`.\n * <a href=\"https://pythonhosted.org/itsdangerous/\" target=\"_blank\"><code>itsdangerous</code></a> - Required for `SessionMiddleware` support.\ndiff --git a/docs/en/docs/advanced/extending-openapi.md b/docs/en/docs/advanced/extending-openapi.md\nindex 9179126df45e4..d8d280ba67276 100644\n--- a/docs/en/docs/advanced/extending-openapi.md\n+++ b/docs/en/docs/advanced/extending-openapi.md\n@@ -152,21 +152,6 @@ After that, your file structure could look like:\n     \u2514\u2500\u2500 swagger-ui.css\n ```\n \n-### Install `aiofiles`\n-\n-Now you need to install `aiofiles`:\n-\n-\n-<div class=\"termy\">\n-\n-```console\n-$ pip install aiofiles\n-\n----> 100%\n-```\n-\n-</div>\n-\n ### Serve the static files\n \n * Import `StaticFiles`.\ndiff --git a/docs/en/docs/advanced/templates.md b/docs/en/docs/advanced/templates.md\nindex a8e2575c19a81..45e6a20fc54b3 100644\n--- a/docs/en/docs/advanced/templates.md\n+++ b/docs/en/docs/advanced/templates.md\n@@ -20,18 +20,6 @@ $ pip install jinja2\n \n </div>\n \n-If you need to also serve static files (as in this example), install `aiofiles`:\n-\n-<div class=\"termy\">\n-\n-```console\n-$ pip install aiofiles\n-\n----> 100%\n-```\n-\n-</div>\n-\n ## Using `Jinja2Templates`\n \n * Import `Jinja2Templates`.\ndiff --git a/docs/en/docs/index.md b/docs/en/docs/index.md\nindex 998564bb37c27..cc6982b799b01 100644\n--- a/docs/en/docs/index.md\n+++ b/docs/en/docs/index.md\n@@ -443,7 +443,6 @@ Used by Pydantic:\n Used by Starlette:\n \n * <a href=\"https://requests.readthedocs.io\" target=\"_blank\"><code>requests</code></a> - Required if you want to use the `TestClient`.\n-* <a href=\"https://github.com/Tinche/aiofiles\" target=\"_blank\"><code>aiofiles</code></a> - Required if you want to use `FileResponse` or `StaticFiles`.\n * <a href=\"https://jinja.palletsprojects.com\" target=\"_blank\"><code>jinja2</code></a> - Required if you want to use the default template configuration.\n * <a href=\"https://andrew-d.github.io/python-multipart/\" target=\"_blank\"><code>python-multipart</code></a> - Required if you want to support form <abbr title=\"converting the string that comes from an HTTP request into Python data\">\"parsing\"</abbr>, with `request.form()`.\n * <a href=\"https://pythonhosted.org/itsdangerous/\" target=\"_blank\"><code>itsdangerous</code></a> - Required for `SessionMiddleware` support.\ndiff --git a/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md b/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md\nindex 3388a0828c193..82553afae52dd 100644\n--- a/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md\n+++ b/docs/en/docs/tutorial/dependencies/dependencies-with-yield.md\n@@ -7,15 +7,6 @@ To do this, use `yield` instead of `return`, and write the extra steps after.\n !!! tip\n     Make sure to use `yield` one single time.\n \n-!!! info\n-    For this to work, you need to use **Python 3.7** or above, or in **Python 3.6**, install the \"backports\":\n-\n-    ```\n-    pip install async-exit-stack async-generator\n-    ```\n-\n-    This installs <a href=\"https://github.com/sorcio/async_exit_stack\" class=\"external-link\" target=\"_blank\">async-exit-stack</a> and <a href=\"https://github.com/python-trio/async_generator\" class=\"external-link\" target=\"_blank\">async-generator</a>.\n-\n !!! note \"Technical Details\"\n     Any function that is valid to use with:\n \ndiff --git a/docs/en/docs/tutorial/sql-databases.md b/docs/en/docs/tutorial/sql-databases.md\nindex c623fad298380..e8ebb29c8c776 100644\n--- a/docs/en/docs/tutorial/sql-databases.md\n+++ b/docs/en/docs/tutorial/sql-databases.md\n@@ -441,17 +441,6 @@ You can find an example of Alembic in a FastAPI project in the templates from [P\n \n ### Create a dependency\n \n-!!! info\n-    For this to work, you need to use **Python 3.7** or above, or in **Python 3.6**, install the \"backports\":\n-\n-    ```console\n-    $ pip install async-exit-stack async-generator\n-    ```\n-\n-    This installs <a href=\"https://github.com/sorcio/async_exit_stack\" class=\"external-link\" target=\"_blank\">async-exit-stack</a> and <a href=\"https://github.com/python-trio/async_generator\" class=\"external-link\" target=\"_blank\">async-generator</a>.\n-\n-    You can also use the alternative method with a \"middleware\" explained at the end.\n-\n Now use the `SessionLocal` class we created in the `sql_app/databases.py` file to create a dependency.\n \n We need to have an independent database session/connection (`SessionLocal`) per request, use the same session through all the request and then close it after the request is finished.\ndiff --git a/docs/en/docs/tutorial/static-files.md b/docs/en/docs/tutorial/static-files.md\nindex c103bd940b2f0..7a0c36af3f4c5 100644\n--- a/docs/en/docs/tutorial/static-files.md\n+++ b/docs/en/docs/tutorial/static-files.md\n@@ -2,20 +2,6 @@\n \n You can serve static files automatically from a directory using `StaticFiles`.\n \n-## Install `aiofiles`\n-\n-First you need to install `aiofiles`:\n-\n-<div class=\"termy\">\n-\n-```console\n-$ pip install aiofiles\n-\n----> 100%\n-```\n-\n-</div>\n-\n ## Use `StaticFiles`\n \n * Import `StaticFiles`.\ndiff --git a/fastapi/concurrency.py b/fastapi/concurrency.py\nindex d1fdfe5f60647..04382c69e486b 100644\n--- a/fastapi/concurrency.py\n+++ b/fastapi/concurrency.py\n@@ -1,4 +1,5 @@\n-from typing import Any, Callable\n+import sys\n+from typing import AsyncGenerator, ContextManager, TypeVar\n \n from starlette.concurrency import iterate_in_threadpool as iterate_in_threadpool  # noqa\n from starlette.concurrency import run_in_threadpool as run_in_threadpool  # noqa\n@@ -6,41 +7,21 @@\n     run_until_first_complete as run_until_first_complete,\n )\n \n-asynccontextmanager_error_message = \"\"\"\n-FastAPI's contextmanager_in_threadpool require Python 3.7 or above,\n-or the backport for Python 3.6, installed with:\n-    pip install async-generator\n-\"\"\"\n+if sys.version_info >= (3, 7):\n+    from contextlib import AsyncExitStack as AsyncExitStack\n+    from contextlib import asynccontextmanager as asynccontextmanager\n+else:\n+    from contextlib2 import AsyncExitStack as AsyncExitStack  # noqa\n+    from contextlib2 import asynccontextmanager as asynccontextmanager  # noqa\n \n \n-def _fake_asynccontextmanager(func: Callable[..., Any]) -> Callable[..., Any]:\n-    def raiser(*args: Any, **kwargs: Any) -> Any:\n-        raise RuntimeError(asynccontextmanager_error_message)\n+_T = TypeVar(\"_T\")\n \n-    return raiser\n \n-\n-try:\n-    from contextlib import asynccontextmanager as asynccontextmanager  # type: ignore\n-except ImportError:\n-    try:\n-        from async_generator import (  # type: ignore  # isort: skip\n-            asynccontextmanager as asynccontextmanager,\n-        )\n-    except ImportError:  # pragma: no cover\n-        asynccontextmanager = _fake_asynccontextmanager\n-\n-try:\n-    from contextlib import AsyncExitStack as AsyncExitStack  # type: ignore\n-except ImportError:\n-    try:\n-        from async_exit_stack import AsyncExitStack as AsyncExitStack  # type: ignore\n-    except ImportError:  # pragma: no cover\n-        AsyncExitStack = None  # type: ignore\n-\n-\n-@asynccontextmanager  # type: ignore\n-async def contextmanager_in_threadpool(cm: Any) -> Any:\n+@asynccontextmanager\n+async def contextmanager_in_threadpool(\n+    cm: ContextManager[_T],\n+) -> AsyncGenerator[_T, None]:\n     try:\n         yield await run_in_threadpool(cm.__enter__)\n     except Exception as e:\ndiff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 95049d40ea82b..35ba44aabfd93 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -1,4 +1,3 @@\n-import asyncio\n import dataclasses\n import inspect\n from contextlib import contextmanager\n@@ -6,6 +5,7 @@\n from typing import (\n     Any,\n     Callable,\n+    Coroutine,\n     Dict,\n     List,\n     Mapping,\n@@ -17,10 +17,10 @@\n     cast,\n )\n \n+import anyio\n from fastapi import params\n from fastapi.concurrency import (\n     AsyncExitStack,\n-    _fake_asynccontextmanager,\n     asynccontextmanager,\n     contextmanager_in_threadpool,\n )\n@@ -266,18 +266,6 @@ def get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) ->\n     return annotation\n \n \n-async_contextmanager_dependencies_error = \"\"\"\n-FastAPI dependencies with yield require Python 3.7 or above,\n-or the backports for Python 3.6, installed with:\n-    pip install async-exit-stack async-generator\n-\"\"\"\n-\n-\n-def check_dependency_contextmanagers() -> None:\n-    if AsyncExitStack is None or asynccontextmanager == _fake_asynccontextmanager:\n-        raise RuntimeError(async_contextmanager_dependencies_error)  # pragma: no cover\n-\n-\n def get_dependant(\n     *,\n     path: str,\n@@ -289,8 +277,6 @@ def get_dependant(\n     path_param_names = get_path_param_names(path)\n     endpoint_signature = get_typed_signature(call)\n     signature_params = endpoint_signature.parameters\n-    if is_gen_callable(call) or is_async_gen_callable(call):\n-        check_dependency_contextmanagers()\n     dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n     for param_name, param in signature_params.items():\n         if isinstance(param.default, params.Depends):\n@@ -452,14 +438,6 @@ async def solve_generator(\n     if is_gen_callable(call):\n         cm = contextmanager_in_threadpool(contextmanager(call)(**sub_values))\n     elif is_async_gen_callable(call):\n-        if not inspect.isasyncgenfunction(call):\n-            # asynccontextmanager from the async_generator backfill pre python3.7\n-            # does not support callables that are not functions or methods.\n-            # See https://github.com/python-trio/async_generator/issues/32\n-            #\n-            # Expand the callable class into its __call__ method before decorating it.\n-            # This approach will work on newer python versions as well.\n-            call = getattr(call, \"__call__\", None)\n         cm = asynccontextmanager(call)(**sub_values)\n     return await stack.enter_async_context(cm)\n \n@@ -539,10 +517,7 @@ async def solve_dependencies(\n             solved = dependency_cache[sub_dependant.cache_key]\n         elif is_gen_callable(call) or is_async_gen_callable(call):\n             stack = request.scope.get(\"fastapi_astack\")\n-            if stack is None:\n-                raise RuntimeError(\n-                    async_contextmanager_dependencies_error\n-                )  # pragma: no cover\n+            assert isinstance(stack, AsyncExitStack)\n             solved = await solve_generator(\n                 call=call, stack=stack, sub_values=sub_values\n             )\n@@ -697,9 +672,18 @@ async def request_body_to_args(\n                 and lenient_issubclass(field.type_, bytes)\n                 and isinstance(value, sequence_types)\n             ):\n-                awaitables = [sub_value.read() for sub_value in value]\n-                contents = await asyncio.gather(*awaitables)\n-                value = sequence_shape_to_type[field.shape](contents)\n+                results: List[Union[bytes, str]] = []\n+\n+                async def process_fn(\n+                    fn: Callable[[], Coroutine[Any, Any, Any]]\n+                ) -> None:\n+                    result = await fn()\n+                    results.append(result)\n+\n+                async with anyio.create_task_group() as tg:\n+                    for sub_value in value:\n+                        tg.start_soon(process_fn, sub_value.read)\n+                value = sequence_shape_to_type[field.shape](results)\n \n             v_, errors_ = field.validate(value, values, loc=loc)\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 5b6b272a7bdc3..ddce5a39c5838 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -33,8 +33,10 @@ classifiers = [\n     \"Topic :: Internet :: WWW/HTTP\",\n ]\n requires = [\n-    \"starlette ==0.14.2\",\n-    \"pydantic >=1.6.2,!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0\"\n+    \"starlette ==0.15.0\",\n+    \"pydantic >=1.6.2,!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0\",\n+    # TODO: remove contextlib2 as a direct dependency after upgrading Starlette\n+    \"contextlib2 >= 21.6.0; python_version < '3.7'\",\n ]\n description-file = \"README.md\"\n requires-python = \">=3.6.1\"\n@@ -46,7 +48,6 @@ Documentation = \"https://fastapi.tiangolo.com/\"\n test = [\n     \"pytest >=6.2.4,<7.0.0\",\n     \"pytest-cov >=2.12.0,<4.0.0\",\n-    \"pytest-asyncio >=0.14.0,<0.16.0\",\n     \"mypy ==0.910\",\n     \"flake8 >=3.8.3,<4.0.0\",\n     \"black ==21.9b0\",\n@@ -60,11 +61,9 @@ test = [\n     \"orjson >=3.2.1,<4.0.0\",\n     \"ujson >=4.0.1,<5.0.0\",\n     \"python-multipart >=0.0.5,<0.0.6\",\n-    \"aiofiles >=0.5.0,<0.8.0\",\n     # TODO: try to upgrade after upgrading Starlette\n     \"flask >=1.1.2,<2.0.0\",\n-    \"async_exit_stack >=1.0.1,<2.0.0; python_version < '3.7'\",\n-    \"async_generator >=1.10,<2.0.0; python_version < '3.7'\",\n+    \"anyio[trio] >=3.2.1,<4.0.0\",\n \n     # types\n     \"types-ujson ==0.1.1\",\n@@ -90,7 +89,6 @@ dev = [\n ]\n all = [\n     \"requests >=2.24.0,<3.0.0\",\n-    \"aiofiles >=0.5.0,<0.8.0\",\n     # TODO: try to upgrade after upgrading Starlette\n     \"jinja2 >=2.11.2,<3.0.0\",\n     \"python-multipart >=0.0.5,<0.0.6\",\n@@ -103,8 +101,6 @@ all = [\n     \"orjson >=3.2.1,<4.0.0\",\n     \"email_validator >=1.1.1,<2.0.0\",\n     \"uvicorn[standard] >=0.12.0,<0.16.0\",\n-    \"async_exit_stack >=1.0.1,<2.0.0; python_version < '3.7'\",\n-    \"async_generator >=1.10,<2.0.0; python_version < '3.7'\",\n ]\n \n [tool.isort]\n@@ -148,6 +144,8 @@ junit_family = \"xunit2\"\n filterwarnings = [\n     \"error\",\n     'ignore:\"@coroutine\" decorator is deprecated since Python 3\\.8, use \"async def\" instead:DeprecationWarning',\n+    # TODO: needed by AnyIO in Python 3.9, try to remove after an AnyIO upgrade\n+    'ignore:The loop argument is deprecated since Python 3\\.8, and scheduled for removal in Python 3\\.10:DeprecationWarning',\n     # TODO: if these ignores are needed, enable them, otherwise remove them\n     # 'ignore:The explicit passing of coroutine objects to asyncio\\.wait\\(\\) is deprecated since Python 3\\.8:DeprecationWarning',\n     # 'ignore:Exception ignored in. <socket\\.socket fd=-1:pytest.PytestUnraisableExceptionWarning',\n", "test_patch": "diff --git a/docs/en/docs/advanced/async-tests.md b/docs/en/docs/advanced/async-tests.md\nindex 921bdb708c871..d5116233f8c55 100644\n--- a/docs/en/docs/advanced/async-tests.md\n+++ b/docs/en/docs/advanced/async-tests.md\n@@ -6,21 +6,9 @@ Being able to use asynchronous functions in your tests could be useful, for exam\n \n Let's look at how we can make that work.\n \n-## pytest-asyncio\n+## pytest.mark.anyio\n \n-If we want to call asynchronous functions in our tests, our test functions have to be asynchronous. Pytest provides a neat library for this, called `pytest-asyncio`, that allows us to specify that some test functions are to be called asynchronously.\n-\n-You can install it via:\n-\n-<div class=\"termy\">\n-\n-```console\n-$ pip install pytest-asyncio\n-\n----> 100%\n-```\n-\n-</div>\n+If we want to call asynchronous functions in our tests, our test functions have to be asynchronous. Anyio provides a neat plugin for this, that allows us to specify that some test functions are to be called asynchronously.\n \n ## HTTPX\n \n@@ -66,7 +54,7 @@ $ pytest\n \n ## In Detail\n \n-The marker `@pytest.mark.asyncio` tells pytest that this test function should be called asynchronously:\n+The marker `@pytest.mark.anyio` tells pytest that this test function should be called asynchronously:\n \n ```Python hl_lines=\"7\"\n {!../../../docs_src/async_tests/test_main.py!}\n@@ -97,4 +85,4 @@ that we used to make our requests with the `TestClient`.\n As the testing function is now asynchronous, you can now also call (and `await`) other `async` functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code.\n \n !!! tip\n-    If you encounter a `RuntimeError: Task attached to a different loop` when integrating asynchronous function calls in your tests (e.g. when using <a href=\"https://stackoverflow.com/questions/41584243/runtimeerror-task-attached-to-a-different-loop\" class=\"external-link\" target=\"_blank\">MongoDB's MotorClient</a>) check out <a href=\"https://github.com/pytest-dev/pytest-asyncio/issues/38#issuecomment-264418154\" class=\"external-link\" target=\"_blank\">this issue</a> in the pytest-asyncio repository.\n+    If you encounter a `RuntimeError: Task attached to a different loop` when integrating asynchronous function calls in your tests (e.g. when using <a href=\"https://stackoverflow.com/questions/41584243/runtimeerror-task-attached-to-a-different-loop\" class=\"external-link\" target=\"_blank\">MongoDB's MotorClient</a>) Remember to instantiate objects that need an event loop only within async functions, e.g. an `'@app.on_event(\"startup\")` callback.\ndiff --git a/docs_src/async_tests/test_main.py b/docs_src/async_tests/test_main.py\nindex c141d86ca7eef..9f1527d5f6028 100644\n--- a/docs_src/async_tests/test_main.py\n+++ b/docs_src/async_tests/test_main.py\n@@ -4,7 +4,7 @@\n from .main import app\n \n \n-@pytest.mark.asyncio\n+@pytest.mark.anyio\n async def test_root():\n     async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n         response = await ac.get(\"/\")\ndiff --git a/tests/test_fakeasync.py b/tests/test_fakeasync.py\ndeleted file mode 100644\nindex 4e146b0ff2328..0000000000000\n--- a/tests/test_fakeasync.py\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-import pytest\n-from fastapi.concurrency import _fake_asynccontextmanager\n-\n-\n-@_fake_asynccontextmanager\n-def never_run():\n-    pass  # pragma: no cover\n-\n-\n-def test_fake_async():\n-    with pytest.raises(RuntimeError):\n-        never_run()\ndiff --git a/tests/test_tutorial/test_async_tests/test_main.py b/tests/test_tutorial/test_async_tests/test_main.py\nindex 8104c9056301b..1f5d7186cc016 100644\n--- a/tests/test_tutorial/test_async_tests/test_main.py\n+++ b/tests/test_tutorial/test_async_tests/test_main.py\n@@ -3,6 +3,6 @@\n from docs_src.async_tests.test_main import test_root\n \n \n-@pytest.mark.asyncio\n+@pytest.mark.anyio\n async def test_async_testing():\n     await test_root()\ndiff --git a/tests/test_tutorial/test_websockets/test_tutorial002.py b/tests/test_tutorial/test_websockets/test_tutorial002.py\nindex 7c56eb26057e9..a8523c9c4fcfa 100644\n--- a/tests/test_tutorial/test_websockets/test_tutorial002.py\n+++ b/tests/test_tutorial/test_websockets/test_tutorial002.py\n@@ -72,9 +72,15 @@ def test_websocket_with_header_and_query():\n \n def test_websocket_no_credentials():\n     with pytest.raises(WebSocketDisconnect):\n-        client.websocket_connect(\"/items/foo/ws\")\n+        with client.websocket_connect(\"/items/foo/ws\"):\n+            pytest.fail(\n+                \"did not raise WebSocketDisconnect on __enter__\"\n+            )  # pragma: no cover\n \n \n def test_websocket_invalid_data():\n     with pytest.raises(WebSocketDisconnect):\n-        client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\")\n+        with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n+            pytest.fail(\n+                \"did not raise WebSocketDisconnect on __enter__\"\n+            )  # pragma: no cover\n", "problem_statement": "Trio -  Python library for async concurrency and I/O\n**Description**\r\n\r\nHello!\r\nI'm using Hypercorn with uvloop.\r\nI'd like to use Hypercorn with trio, but the program doesn't start when i switch uvloop by trio.\r\n\r\nDo you have plans to implement trio?\r\n\r\nThank's!\r\n\r\nPS: Nice work.\r\n\n", "hints_text": "I guess most FastAPI users use it with uvloop which trio is not compatible with: https://github.com/python-trio/trio/issues/138\nThanks for the help here @haizaar ! Nice investigation.\r\n\r\nI think @haizaar is right, by checking that issue.\nThis is a great place to mention that you can use hypercorn, which [seems to support trio](https://medium.com/@pgjones/hypercorn-is-now-a-trio-asgi-server-2e198898c08f) (I haven't tested it personally though).\nMaybe, again maybe, if you configure uvicorn to use asyncio instead of uvloop as its loop, trio will work with it and consequently, with FastAPI\r\n\r\nOf course that's in case one does not need absolutely cutting edge performance.\nSo, FastAPI uses Starlette's `run_in_threadpool` internally, and that uses `asyncio`.\r\n\r\nPrior to FastAPI supporting Trio, we would need Starlette itself to support Trio. But that's probably quite a lot of work there. Also, if Starlette supported Trio that would be automatically inherited by FastAPI.\r\n\r\nYou can track it here: https://github.com/encode/starlette/issues/811\r\n\r\n<!-- issue-manager: answered -->\nAssuming the original issue was solved, it will be automatically closed now. But feel free to add more comments or create new issues.", "created_at": "2021-06-14T22:47:29Z"}
{"repo": "fastapi/fastapi", "pull_number": 2969, "instance_id": "fastapi__fastapi-2969", "issue_numbers": ["2966"], "base_commit": "41735d2de9afbb2c01541d0f3052c718cb9f4f30", "patch": "diff --git a/docs/ja/docs/tutorial/query-params.md b/docs/ja/docs/tutorial/query-params.md\nindex 9f8c6ab9f2b55..5202009ef8676 100644\n--- a/docs/ja/docs/tutorial/query-params.md\n+++ b/docs/ja/docs/tutorial/query-params.md\n@@ -64,7 +64,7 @@ http://127.0.0.1:8000/items/?skip=20\n \n \u540c\u69d8\u306b\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 `None` \u3068\u3059\u308b\u3053\u3068\u3067\u3001\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306a\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5ba3\u8a00\u3067\u304d\u307e\u3059:\n \n-```Python hl_lines=\"7\"\n+```Python hl_lines=\"9\"\n {!../../../docs_src/query_params/tutorial002.py!}\n ```\n \n@@ -82,7 +82,7 @@ http://127.0.0.1:8000/items/?skip=20\n \n `bool` \u578b\u3082\u5ba3\u8a00\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u5909\u63db\u3055\u308c\u307e\u3059:\n \n-```Python hl_lines=\"7\"\n+```Python hl_lines=\"9\"\n {!../../../docs_src/query_params/tutorial003.py!}\n ```\n \n@@ -126,7 +126,7 @@ http://127.0.0.1:8000/items/foo?short=yes\n \n \u540d\u524d\u3067\u5224\u5225\u3055\u308c\u307e\u3059:\n \n-```Python hl_lines=\"6  8\"\n+```Python hl_lines=\"8  10\"\n {!../../../docs_src/query_params/tutorial004.py!}\n ```\n \n@@ -184,7 +184,7 @@ http://127.0.0.1:8000/items/foo-item?needy=sooooneedy\n \n \u305d\u3057\u3066\u5f53\u7136\u3001\u3042\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5fc5\u9808\u306b\u3001\u5225\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8a2d\u5b9a\u3057\u3001\u307e\u305f\u5225\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306b\u3067\u304d\u307e\u3059:\n \n-```Python hl_lines=\"7\"\n+```Python hl_lines=\"10\"\n {!../../../docs_src/query_params/tutorial006.py!}\n ```\n \n", "test_patch": "", "problem_statement": "Japanese translation problem: highlighted lines mismatch with English ver.\n### First check\r\n\r\n* [x] I added a very descriptive title to this issue.\r\n* [x] I used the GitHub search to find a similar issue and didn't find it.\r\n* [ ] I searched the FastAPI documentation, with the integrated search.\r\n* [ ] I already searched in Google \"How to X in FastAPI\" and didn't find any information.\r\n* [ ] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n* [ ] I already checked if it is not related to FastAPI but to [Pydantic](https://github.com/samuelcolvin/pydantic).\r\n* [ ] I already checked if it is not related to FastAPI but to [Swagger UI](https://github.com/swagger-api/swagger-ui).\r\n* [ ] I already checked if it is not related to FastAPI but to [ReDoc](https://github.com/Redocly/redoc).\r\n* [x] After submitting this, I commit to one of:\r\n    * Read open issues with questions until I find 2 issues where I can help someone and add a comment to help there.\r\n    * I already hit the \"watch\" button in this repository to receive notifications and I commit to help at least 2 people that ask questions in the future.\r\n    * Implement a Pull Request for a confirmed bug.\r\n\r\n<!-- \r\n\r\nI'm asking all this because answering questions and solving problems in GitHub issues consumes a lot of time. I end up not being able to add new features, fix bugs, review Pull Requests, etc. as fast as I wish because I have to spend too much time handling issues.\r\n\r\nAll that, on top of all the incredible help provided by a bunch of community members that give a lot of their time to come here and help others.\r\n\r\nThat's a lot of work they are doing, but if more FastAPI users came to help others like them just a little bit more, it would be much less effort for them (and you and me \ud83d\ude05).\r\n\r\n-->\r\n\r\nThanks a lot to Japanese translation.\r\nI found bugged highlighted lines in https://fastapi.tiangolo.com/ja/tutorial/query-params/ .\r\n\r\n### Example\r\n\r\nHighlighted empty line\r\n\r\n  - https://fastapi.tiangolo.com/ja/tutorial/query-params/#_3\r\n  - https://fastapi.tiangolo.com/ja/tutorial/query-params/#_4\r\n  - https://fastapi.tiangolo.com/ja/tutorial/query-params/#_5\r\n  - https://fastapi.tiangolo.com/ja/tutorial/query-params/#_6 (Second Python code)\r\n\r\n### Description\r\n\r\nIt seems to me that the translated file needs to be synced with English version.\r\n\r\n- translated: fastapi/docs/en/docs/tutorial/query-params.md\r\n- English version: fastapi/docs/ja/docs/tutorial/query-params.md\r\n\r\nAbout docs_src/query_params/tutorial002.py\r\n\r\n- As is: `hl_lines=\"7\"` (ref: fastapi/docs/en/docs/tutorial/query-params.md line 67)\r\n- To be: `hl_lines=\"9\"` (ref: fastapi/docs/ja/docs/tutorial/query-params.md line 66)\r\n\r\nAbout docs_src/query_params/tutorial003.py\r\n\r\n- As is: `hl_lines=\"7\"`\r\n- To be: `hl_lines=\"9\"`\r\n\r\nAbout docs_src/query_params/tutorial004.py\r\n\r\n- As is: `hl_lines=\"6  8\"`\r\n- To be: `hl_lines=hl_lines=\"8  10\"`\r\n\r\n### Additional context\r\n\r\n<!-- Add any other context or screenshots about the question here. -->\r\n\r\nI checked only \"Query parameters\" in Japanese translation.\r\nSorry, I don't know if we need to fix the highlighted lines for other pages in the Japanese translation or for translations in other languages right now.\n", "hints_text": "", "created_at": "2021-03-21T06:05:48Z"}
{"repo": "fastapi/fastapi", "pull_number": 2944, "instance_id": "fastapi__fastapi-2944", "issue_numbers": ["2943"], "base_commit": "2f1b856fe611f2f15d38a04850ed9f25da719178", "patch": "diff --git a/docs/en/docs/advanced/events.md b/docs/en/docs/advanced/events.md\nindex 7cd2998f05a57..556bbde71d60a 100644\n--- a/docs/en/docs/advanced/events.md\n+++ b/docs/en/docs/advanced/events.md\n@@ -1,13 +1,108 @@\n-# Events: startup - shutdown\n+# Lifespan Events\n \n-You can define event handlers (functions) that need to be executed before the application starts up, or when the application is shutting down.\n+You can define logic (code) that should be executed before the application **starts up**. This means that this code will be executed **once**, **before** the application **starts receiving requests**.\n \n-These functions can be declared with `async def` or normal `def`.\n+The same way, you can define logic (code) that should be executed when the application is **shutting down**. In this case, this code will be executed **once**, **after** having handled possibly **many requests**.\n+\n+Because this code is executed before the application **starts** taking requests, and right after it **finishes** handling requests, it covers the whole application **lifespan** (the word \"lifespan\" will be important in a second \ud83d\ude09).\n+\n+This can be very useful for setting up **resources** that you need to use for the whole app, and that are **shared** among requests, and/or that you need to **clean up** afterwards. For example, a database connection pool, or loading a shared machine learning model.\n+\n+## Use Case\n+\n+Let's start with an example **use case** and then see how to solve it with this.\n+\n+Let's imagine that you have some **machine learning models** that you want to use to handle requests. \ud83e\udd16\n+\n+The same models are shared among requests, so, it's not one model per request, or one per user or something similar.\n+\n+Let's imagine that loading the model can **take quite some time**, because it has to read a lot of **data from disk**. So you don't want to do it for every request.\n+\n+You could load it at the top level of the module/file, but that would also mean that it would **load the model** even if you are just running a simple automated test, then that test would be **slow** because it would have to wait for the model to load before being able to run an independent part of the code.\n+\n+That's what we'll solve, let's load the model before the requests are handled, but only right before the application starts receiving requests, not while  the code is being loaded.\n+\n+## Lifespan\n+\n+You can define this *startup* and *shutdown* logic using the `lifespan` parameter of the `FastAPI` app, and a \"context manager\" (I'll show you what that is in a second).\n+\n+Let's start with an example and then see it in detail.\n+\n+We create an async function `lifespan()` with `yield` like this:\n+\n+```Python hl_lines=\"16  19\"\n+{!../../../docs_src/events/tutorial003.py!}\n+```\n+\n+Here we are simulating the expensive *startup* operation of loading the model by putting the (fake) model function in the dictionary with machine learning models before the `yield`. This code will be executed **before** the application **starts taking requests**, during the *startup*.\n+\n+And then, right after the `yield`, we unload the model. This code will be executed **after** the application **finishes handling requests**, right before the *shutdown*. This could, for example, release resources like memory or a GPU.\n+\n+!!! tip\n+    The `shutdown` would happen when you are **stopping** the application.\n+\n+    Maybe you need to start a new version, or you just got tired of running it. \ud83e\udd37\n+\n+### Lifespan function\n+\n+The first thing to notice, is that we are defining an async function with `yield`. This is very similar to Dependencies with `yield`.\n+\n+```Python hl_lines=\"14-19\"\n+{!../../../docs_src/events/tutorial003.py!}\n+```\n+\n+The first part of the function, before the `yield`, will be executed **before** the application starts.\n+\n+And the part after the `yield` will be executed **after** the application has finished.\n+\n+### Async Context Manager\n+\n+If you check, the function is decorated with an `@asynccontextmanager`.\n+\n+That converts the function into something called an \"**async context manager**\".\n+\n+```Python hl_lines=\"1  13\"\n+{!../../../docs_src/events/tutorial003.py!}\n+```\n+\n+A **context manager** in Python is something that you can use in a `with` statement, for example, `open()` can be used as a context manager:\n+\n+```Python\n+with open(\"file.txt\") as file:\n+    file.read()\n+```\n+\n+In recent versions of Python, there's also an **async context manager**. You would use it with `async with`:\n+\n+```Python\n+async with lifespan(app):\n+    await do_stuff()\n+```\n+\n+When you create a context manager or an async context manager like above, what it does is that, before entering the `with` block, it will execute the code before the `yield`, and after exiting the `with` block, it will execute the code after the `yield`.\n+\n+In our code example above, we don't use it directly, but we pass it to FastAPI for it to use it.\n+\n+The `lifespan` parameter of the `FastAPI` app takes an **async context manager**, so we can pass our new `lifespan` async context manager to it.\n+\n+```Python hl_lines=\"22\"\n+{!../../../docs_src/events/tutorial003.py!}\n+```\n+\n+## Alternative Events (deprecated)\n \n !!! warning\n-    Only event handlers for the main application will be executed, not for [Sub Applications - Mounts](./sub-applications.md){.internal-link target=_blank}.\n+    The recommended way to handle the *startup* and *shutdown* is using the `lifespan` parameter of the `FastAPI` app as described above.\n \n-## `startup` event\n+    You can probably skip this part.\n+\n+There's an alternative way to define this logic to be executed during *startup* and during *shutdown*.\n+\n+You can define event handlers (functions) that need to be executed before the application starts up, or when the application is shutting down.\n+\n+These functions can be declared with `async def` or normal `def`.\n+\n+### `startup` event\n \n To add a function that should be run before the application starts, declare it with the event `\"startup\"`:\n \n@@ -21,7 +116,7 @@ You can add more than one event handler function.\n \n And your application won't start receiving requests until all the `startup` event handlers have completed.\n \n-## `shutdown` event\n+### `shutdown` event\n \n To add a function that should be run when the application is shutting down, declare it with the event `\"shutdown\"`:\n \n@@ -45,3 +140,21 @@ Here, the `shutdown` event handler function will write a text line `\"Application\n \n !!! info\n     You can read more about these event handlers in <a href=\"https://www.starlette.io/events/\" class=\"external-link\" target=\"_blank\">Starlette's  Events' docs</a>.\n+\n+### `startup` and `shutdown` together\n+\n+There's a high chance that the logic for your *startup* and *shutdown* is connected, you might want to start something and then finish it, acquire a resource and then release it, etc.\n+\n+Doing that in separated functions that don't share logic or variables together is more difficult as you would need to store values in global variables or similar tricks.\n+\n+Because of that, it's now recommended to instead use the `lifespan` as explained above.\n+\n+## Technical Details\n+\n+Just a technical detail for the curious nerds. \ud83e\udd13\n+\n+Underneath, in the ASGI technical specification, this is part of the <a href=\"https://asgi.readthedocs.io/en/latest/specs/lifespan.html\" class=\"external-link\" target=\"_blank\">Lifespan Protocol</a>, and it defines events called `startup` and `shutdown`.\n+\n+## Sub Applications\n+\n+\ud83d\udea8 Have in mind that these lifespan events (startup and shutdown) will only be executed for the main application, not for [Sub Applications - Mounts](./sub-applications.md){.internal-link target=_blank}.\ndiff --git a/docs_src/events/tutorial003.py b/docs_src/events/tutorial003.py\nnew file mode 100644\nindex 0000000000000..2b650590b0060\n--- /dev/null\n+++ b/docs_src/events/tutorial003.py\n@@ -0,0 +1,28 @@\n+from contextlib import asynccontextmanager\n+\n+from fastapi import FastAPI\n+\n+\n+def fake_answer_to_everything_ml_model(x: float):\n+    return x * 42\n+\n+\n+ml_models = {}\n+\n+\n+@asynccontextmanager\n+async def lifespan(app: FastAPI):\n+    # Load the ML model\n+    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n+    yield\n+    # Clean up the ML models and release the resources\n+    ml_models.clear()\n+\n+\n+app = FastAPI(lifespan=lifespan)\n+\n+\n+@app.get(\"/predict\")\n+async def predict(x: float):\n+    result = ml_models[\"answer_to_everything\"](x)\n+    return {\"result\": result}\ndiff --git a/fastapi/applications.py b/fastapi/applications.py\nindex 204bd46b3b96f..e864c4907c3ad 100644\n--- a/fastapi/applications.py\n+++ b/fastapi/applications.py\n@@ -1,6 +1,7 @@\n from enum import Enum\n from typing import (\n     Any,\n+    AsyncContextManager,\n     Awaitable,\n     Callable,\n     Coroutine,\n@@ -71,6 +72,7 @@ def __init__(\n         ] = None,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n+        lifespan: Optional[Callable[[\"FastAPI\"], AsyncContextManager[Any]]] = None,\n         terms_of_service: Optional[str] = None,\n         contact: Optional[Dict[str, Union[str, Any]]] = None,\n         license_info: Optional[Dict[str, Union[str, Any]]] = None,\n@@ -125,6 +127,7 @@ def __init__(\n             dependency_overrides_provider=self,\n             on_startup=on_startup,\n             on_shutdown=on_shutdown,\n+            lifespan=lifespan,\n             default_response_class=default_response_class,\n             dependencies=dependencies,\n             callbacks=callbacks,\ndiff --git a/fastapi/routing.py b/fastapi/routing.py\nindex 7ab6275b67799..5a618e4dedd21 100644\n--- a/fastapi/routing.py\n+++ b/fastapi/routing.py\n@@ -7,6 +7,7 @@\n from enum import Enum, IntEnum\n from typing import (\n     Any,\n+    AsyncContextManager,\n     Callable,\n     Coroutine,\n     Dict,\n@@ -492,6 +493,7 @@ def __init__(\n         route_class: Type[APIRoute] = APIRoute,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n+        lifespan: Optional[Callable[[Any], AsyncContextManager[Any]]] = None,\n         deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n         generate_unique_id_function: Callable[[APIRoute], str] = Default(\n@@ -504,6 +506,7 @@ def __init__(\n             default=default,\n             on_startup=on_startup,\n             on_shutdown=on_shutdown,\n+            lifespan=lifespan,\n         )\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n", "test_patch": "diff --git a/tests/test_router_events.py b/tests/test_router_events.py\nindex 5ff1fdf9f2059..ba6b7638286ae 100644\n--- a/tests/test_router_events.py\n+++ b/tests/test_router_events.py\n@@ -1,3 +1,7 @@\n+from contextlib import asynccontextmanager\n+from typing import AsyncGenerator, Dict\n+\n+import pytest\n from fastapi import APIRouter, FastAPI\n from fastapi.testclient import TestClient\n from pydantic import BaseModel\n@@ -12,57 +16,49 @@ class State(BaseModel):\n     sub_router_shutdown: bool = False\n \n \n-state = State()\n-\n-app = FastAPI()\n-\n-\n-@app.on_event(\"startup\")\n-def app_startup():\n-    state.app_startup = True\n-\n-\n-@app.on_event(\"shutdown\")\n-def app_shutdown():\n-    state.app_shutdown = True\n-\n+@pytest.fixture\n+def state() -> State:\n+    return State()\n \n-router = APIRouter()\n \n+def test_router_events(state: State) -> None:\n+    app = FastAPI()\n \n-@router.on_event(\"startup\")\n-def router_startup():\n-    state.router_startup = True\n+    @app.get(\"/\")\n+    def main() -> Dict[str, str]:\n+        return {\"message\": \"Hello World\"}\n \n+    @app.on_event(\"startup\")\n+    def app_startup() -> None:\n+        state.app_startup = True\n \n-@router.on_event(\"shutdown\")\n-def router_shutdown():\n-    state.router_shutdown = True\n+    @app.on_event(\"shutdown\")\n+    def app_shutdown() -> None:\n+        state.app_shutdown = True\n \n+    router = APIRouter()\n \n-sub_router = APIRouter()\n+    @router.on_event(\"startup\")\n+    def router_startup() -> None:\n+        state.router_startup = True\n \n+    @router.on_event(\"shutdown\")\n+    def router_shutdown() -> None:\n+        state.router_shutdown = True\n \n-@sub_router.on_event(\"startup\")\n-def sub_router_startup():\n-    state.sub_router_startup = True\n+    sub_router = APIRouter()\n \n+    @sub_router.on_event(\"startup\")\n+    def sub_router_startup() -> None:\n+        state.sub_router_startup = True\n \n-@sub_router.on_event(\"shutdown\")\n-def sub_router_shutdown():\n-    state.sub_router_shutdown = True\n+    @sub_router.on_event(\"shutdown\")\n+    def sub_router_shutdown() -> None:\n+        state.sub_router_shutdown = True\n \n+    router.include_router(sub_router)\n+    app.include_router(router)\n \n-@sub_router.get(\"/\")\n-def main():\n-    return {\"message\": \"Hello World\"}\n-\n-\n-router.include_router(sub_router)\n-app.include_router(router)\n-\n-\n-def test_router_events():\n     assert state.app_startup is False\n     assert state.router_startup is False\n     assert state.sub_router_startup is False\n@@ -85,3 +81,28 @@ def test_router_events():\n     assert state.app_shutdown is True\n     assert state.router_shutdown is True\n     assert state.sub_router_shutdown is True\n+\n+\n+def test_app_lifespan_state(state: State) -> None:\n+    @asynccontextmanager\n+    async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:\n+        state.app_startup = True\n+        yield\n+        state.app_shutdown = True\n+\n+    app = FastAPI(lifespan=lifespan)\n+\n+    @app.get(\"/\")\n+    def main() -> Dict[str, str]:\n+        return {\"message\": \"Hello World\"}\n+\n+    assert state.app_startup is False\n+    assert state.app_shutdown is False\n+    with TestClient(app) as client:\n+        assert state.app_startup is True\n+        assert state.app_shutdown is False\n+        response = client.get(\"/\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\"message\": \"Hello World\"}\n+    assert state.app_startup is True\n+    assert state.app_shutdown is True\ndiff --git a/tests/test_tutorial/test_events/test_tutorial003.py b/tests/test_tutorial/test_events/test_tutorial003.py\nnew file mode 100644\nindex 0000000000000..56b4939546617\n--- /dev/null\n+++ b/tests/test_tutorial/test_events/test_tutorial003.py\n@@ -0,0 +1,86 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.events.tutorial003 import (\n+    app,\n+    fake_answer_to_everything_ml_model,\n+    ml_models,\n+)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/predict\": {\n+            \"get\": {\n+                \"summary\": \"Predict\",\n+                \"operationId\": \"predict_predict_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"X\", \"type\": \"number\"},\n+                        \"name\": \"x\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_events():\n+    assert not ml_models, \"ml_models should be empty\"\n+    with TestClient(app) as client:\n+        assert ml_models[\"answer_to_everything\"] == fake_answer_to_everything_ml_model\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == openapi_schema\n+        response = client.get(\"/predict\", params={\"x\": 2})\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\"result\": 84.0}\n+    assert not ml_models, \"ml_models should be empty\"\n", "problem_statement": "Support starlette \"lifespan\" context for application\n### First check\r\n\r\n* [x] I added a very descriptive title to this issue.\r\n* [x] I used the GitHub search to find a similar issue and didn't find it.\r\n* [x] I searched the FastAPI documentation, with the integrated search.\r\n* [x] I already searched in Google \"How to X in FastAPI\" and didn't find any information.\r\n* [x] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n* [x] I already checked if it is not related to FastAPI but to [Pydantic](https://github.com/samuelcolvin/pydantic).\r\n* [x] I already checked if it is not related to FastAPI but to [Swagger UI](https://github.com/swagger-api/swagger-ui).\r\n* [x] I already checked if it is not related to FastAPI but to [ReDoc](https://github.com/Redocly/redoc).\r\n* [x] After submitting this, I commit to:\r\n    * Read open issues with questions until I find 2 issues where I can help someone and add a comment to help there.\r\n    * Or, I already hit the \"watch\" button in this repository to receive notifications and I commit to help at least 2 people that ask questions in the future.\r\n    * Implement a Pull Request for a confirmed bug.\r\n\r\n<!-- \r\n\r\nI'm asking all this because answering questions and solving problems in GitHub issues consumes a lot of time. I end up not being able to add new features, fix bugs, review Pull Requests, etc. as fast as I wish because I have to spend too much time handling issues.\r\n\r\nAll that, on top of all the incredible help provided by a bunch of community members that give a lot of their time to come here and help others.\r\n\r\nThat's a lot of work they are doing, but if more FastAPI users came to help others like them just a little bit more, it would be much less effort for them (and you and me \ud83d\ude05).\r\n\r\n-->\r\n\r\n### Description\r\n\r\nStarlette added support for the lifespan context function in 0.13.5.  It's not well documented, but the code does [suggest](https://github.com/encode/starlette/blob/ed73b97c9b8f4aa527eed88032c04ce9fe109a3c/starlette/applications.py#L51):\r\n```python\r\n        # The lifespan context function is a newer style that replaces\r\n        # on_startup / on_shutdown handlers. Use one or the other, not both.\r\n```\r\n\r\nFor my purposes, it's much more convenient to use a (async)contextmanager for the startup and shutdown events of my application.  It would be nice to have the option\r\n\r\n### The solution you would like\r\n\r\nI'd like an easier way, and one that's officially supported, to use the lifespan context function.\r\n\r\n```Python\r\nfrom fastapi import FastAPI\r\n\r\nasync def lifespan(app):\r\n    print(\"startup\")\r\n    async with SomeResource():\r\n        yield\r\n    print(\"shutdown\")\r\n\r\napp = FastAPI(lifespan=lifespan)\r\n```\r\n\r\nor\r\n\r\n```Python\r\nfrom fastapi import FastAPI\r\n\r\napp = FastAPI()\r\n\r\n@app.lifespan\r\nasync def lifespan(app):\r\n    print(\"startup\")\r\n    async with SomeResource():\r\n        yield\r\n    print(\"shutdown\")\r\n```\r\n\r\n### Describe alternatives you've considered\r\n\r\nI can already accomplish this simply by doing:\r\n```python\r\nfrom fastapi import FastAPI\r\n\r\nasync def lifespan(app):\r\n    print(\"startup\")\r\n    async with SomeResource():\r\n        yield\r\n    print(\"shutdown\")\r\n\r\napp = FastAPI()\r\napp.router.lifespan_context = lifespan\r\n```\r\nhowever this is not officially supported and would likely break if accidentally using `app.on_event` in addition.\r\n\r\nOne could also do nasty stuff with `__aenter__` and `__aexit__`:\r\n```python\r\nfrom fastapi import FastAPI\r\n\r\napp = FastAPI()\r\n\r\n@app.on_event(\"startup\")\r\nasync def startup()\r\n    print(\"startup\")\r\n    app.state.resource = SomeResource()\r\n    await app.state.resource.__aenter__()\r\n\r\n@app.on_event(\"shutdown\")\r\nasync def startup()\r\n    print(\"shutdown\")\r\n    await app.state.resource.__aexit__(None, None, None)\r\n```\r\nbut that seems quite ugly to me.\r\n\r\n### Environment\r\n\r\n* OS: Linux\r\n* FastAPI Version: 0.63.0\r\n* Python version: 3.8.5\n", "hints_text": "@uSpike Hi! Did you look into [asgi-lifespan](https://pypi.org/project/asgi-lifespan/) package?\n@juntatalor I did not look in to asgi-lifespan.  It seems strange to use something outside of starlette, when starlette already supports the lifespan context:\r\n\r\n```python\r\nfrom starlette import Starlette\r\n\r\nasync def lifespan(app):\r\n    async with SomeResource():\r\n        yield\r\n\r\napp = Starlette(lifespan=lifespan)\r\n```\r\n\r\nWhat I'm looking for in this request is to have the starlette functionality exposed in fastapi.", "created_at": "2021-03-13T05:08:38Z"}
{"repo": "fastapi/fastapi", "pull_number": 2606, "instance_id": "fastapi__fastapi-2606", "issue_numbers": ["2594"], "base_commit": "8a9a117ec7f58711dc68d6d6633dd02d4289cd1d", "patch": "diff --git a/fastapi/encoders.py b/fastapi/encoders.py\nindex 4b7ffe313fa6b..b1fde73ceb7fc 100644\n--- a/fastapi/encoders.py\n+++ b/fastapi/encoders.py\n@@ -80,6 +80,11 @@ def jsonable_encoder(\n         return obj\n     if isinstance(obj, dict):\n         encoded_dict = {}\n+        allowed_keys = set(obj.keys())\n+        if include is not None:\n+            allowed_keys &= set(include)\n+        if exclude is not None:\n+            allowed_keys -= set(exclude)\n         for key, value in obj.items():\n             if (\n                 (\n@@ -88,7 +93,7 @@ def jsonable_encoder(\n                     or (not key.startswith(\"_sa\"))\n                 )\n                 and (value is not None or not exclude_none)\n-                and ((include and key in include) or not exclude or key not in exclude)\n+                and key in allowed_keys\n             ):\n                 encoded_key = jsonable_encoder(\n                     key,\n@@ -144,6 +149,8 @@ def jsonable_encoder(\n             raise ValueError(errors)\n     return jsonable_encoder(\n         data,\n+        include=include,\n+        exclude=exclude,\n         by_alias=by_alias,\n         exclude_unset=exclude_unset,\n         exclude_defaults=exclude_defaults,\n", "test_patch": "diff --git a/tests/test_jsonable_encoder.py b/tests/test_jsonable_encoder.py\nindex ed35fd32e43f0..5e55f2f918467 100644\n--- a/tests/test_jsonable_encoder.py\n+++ b/tests/test_jsonable_encoder.py\n@@ -93,16 +93,42 @@ class Config:\n     return ModelWithPath(path=request.param(\"/foo\", \"bar\"))\n \n \n+def test_encode_dict():\n+    pet = {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, include={}) == {}\n+    assert jsonable_encoder(pet, exclude={}) == {\n+        \"name\": \"Firulais\",\n+        \"owner\": {\"name\": \"Foo\"},\n+    }\n+\n+\n def test_encode_class():\n     person = Person(name=\"Foo\")\n     pet = Pet(owner=person, name=\"Firulais\")\n     assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, include={}) == {}\n+    assert jsonable_encoder(pet, exclude={}) == {\n+        \"name\": \"Firulais\",\n+        \"owner\": {\"name\": \"Foo\"},\n+    }\n \n \n def test_encode_dictable():\n     person = DictablePerson(name=\"Foo\")\n     pet = DictablePet(owner=person, name=\"Firulais\")\n     assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, include={}) == {}\n+    assert jsonable_encoder(pet, exclude={}) == {\n+        \"name\": \"Firulais\",\n+        \"owner\": {\"name\": \"Foo\"},\n+    }\n \n \n def test_encode_unsupported():\n@@ -144,6 +170,14 @@ def test_encode_model_with_default():\n     assert jsonable_encoder(model, exclude_unset=True, exclude_defaults=True) == {\n         \"foo\": \"foo\"\n     }\n+    assert jsonable_encoder(model, include={\"foo\"}) == {\"foo\": \"foo\"}\n+    assert jsonable_encoder(model, exclude={\"bla\"}) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n+    assert jsonable_encoder(model, include={}) == {}\n+    assert jsonable_encoder(model, exclude={}) == {\n+        \"foo\": \"foo\",\n+        \"bar\": \"bar\",\n+        \"bla\": \"bla\",\n+    }\n \n \n def test_custom_encoders():\n", "problem_statement": "`jsonable_encoder` function not working as expected with different type of variables\n### First check\r\n\r\n* [X] I added a very descriptive title to this issue.\r\n* [X] I used the GitHub search to find a similar issue and didn't find it.\r\n* [X] I searched the FastAPI documentation, with the integrated search.\r\n* [X] I already searched in Google \"How to X in FastAPI\" and didn't find any information.\r\n* [X] I already read and followed all the tutorial in the docs and didn't find an answer.\r\n* [X] I already checked if it is not related to FastAPI but to [Pydantic](https://github.com/samuelcolvin/pydantic).\r\n* [X] I already checked if it is not related to FastAPI but to [Swagger UI](https://github.com/swagger-api/swagger-ui).\r\n* [X] I already checked if it is not related to FastAPI but to [ReDoc](https://github.com/Redocly/redoc).\r\n* [X] After submitting this, I commit to one of:\r\n    * Read open issues with questions until I find 2 issues where I can help someone and add a comment to help there.\r\n    * I already hit the \"watch\" button in this repository to receive notifications and I commit to help at least 2 people that ask questions in the future.\r\n    * Implement a Pull Request for a confirmed bug.\r\n\r\n<!-- \r\n\r\nI'm asking all this because answering questions and solving problems in GitHub issues consumes a lot of time. I end up not being able to add new features, fix bugs, review Pull Requests, etc. as fast as I wish because I have to spend too much time handling issues.\r\n\r\nAll that, on top of all the incredible help provided by a bunch of community members that give a lot of their time to come here and help others.\r\n\r\nThat's a lot of work they are doing, but if more FastAPI users came to help others like them just a little bit more, it would be much less effort for them (and you and me \ud83d\ude05).\r\n\r\n-->\r\n\r\n### Example\r\n\r\nHere's a self-contained, [minimal, reproducible, example](https://stackoverflow.com/help/minimal-reproducible-example) with my use case:\r\n\r\n#### Example 1 (BaseModel)\r\n\r\n```python\r\nimport pytest\r\nfrom attr import dataclass\r\nfrom fastapi.encoders import jsonable_encoder\r\nfrom pydantic.main import BaseModel\r\n\r\nclass MyBaseModel(BaseModel):\r\n    foo: int\r\n    bar: int\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"obj, include, exclude, expected\",\r\n    [\r\n        (MyBaseModel(foo=1, bar=2), None, None, {\"foo\": 1, \"bar\": 2}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), {}, {}, {}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), {\"foo\"}, {}, {\"foo\": 1}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), {}, {\"foo\"}, {}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), {\"foo\"}, None, {\"foo\": 1}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), None, {\"foo\"}, {\"bar\": 2}),  # Passed\r\n    ],\r\n)\r\ndef test_jsonable_encoder_include_exclude_base_model(obj, include, exclude, expected):\r\n    assert jsonable_encoder(obj, include=include, exclude=exclude) == expected\r\n```\r\n\r\n#### Example 2 (Python dictionary)\r\n```python\r\nimport pytest\r\nfrom fastapi.encoders import jsonable_encoder\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"obj, include, exclude, expected\",\r\n    [\r\n        ({\"foo\": 1, \"bar\": 2}, None, None, {\"foo\": 1, \"bar\": 2}),  # Passed\r\n        ({\"foo\": 1, \"bar\": 2}, {}, {}, {}),  # Failed\r\n        ({\"foo\": 1, \"bar\": 2}, {\"foo\"}, {}, {\"foo\": 1}),  # Failed\r\n        ({\"foo\": 1, \"bar\": 2}, {}, {\"foo\"}, {}),  # Failed\r\n        ({\"foo\": 1, \"bar\": 2}, {\"foo\"}, None, {\"foo\": 1}),  # Failed\r\n        ({\"foo\": 1, \"bar\": 2}, None, {\"foo\"}, {\"bar\": 2}),  # Passed\r\n    ],\r\n)\r\ndef test_jsonable_encoder_include_exclude_dict(obj, include, exclude, expected):\r\n    assert jsonable_encoder(obj, include=include, exclude=exclude) == expected\r\n```\r\n\r\n#### Example 3 (Python object with dataclass)\r\n\r\n```python\r\n@dataclass\r\nclass MyModel:\r\n    foo: int\r\n    bar: int\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"obj, include, exclude, expected\",\r\n    [\r\n        (MyModel(foo=1, bar=2), None, None, {\"foo\": 1, \"bar\": 2}),  # Passed\r\n        (MyModel(foo=1, bar=2), {}, {}, {}),  # Failed\r\n        (MyModel(foo=1, bar=2), {\"foo\"}, {}, {\"foo\": 1}),  # Failed\r\n        (MyModel(foo=1, bar=2), {}, {\"foo\"}, {}),  # Failed\r\n        (MyModel(foo=1, bar=2), {\"foo\"}, None, {\"foo\": 1}),  # Failed\r\n        (MyModel(foo=1, bar=2), None, {\"foo\"}, {\"bar\": 2}),  # Failed\r\n    ],\r\n)\r\ndef test_jsonable_encoder_include_exclude_obj(obj, include, exclude, expected):\r\n    assert jsonable_encoder(obj, include=include, exclude=exclude) == expected\r\n```\r\n\r\n### Description\r\n\r\n<!-- Replace the content below with your own problem, question, or error -->\r\n\r\nI was trying to understand how the `include` and `exclude` parameters worked. I looked in the documentation ([here](https://fastapi.tiangolo.com/tutorial/encoder/)) and the the test suite ([here](https://github.com/tiangolo/fastapi/blob/fdb6c9ccc504f90afd0fbcec53f3ea0bfebc261a/tests/test_jsonable_encoder.py), latest commit of this file in master branch) and I did not find anything related to `include` and `exclude` in both places.\r\n\r\nI did see that these 2 parameters came from Pydantic (from the [dict function](https://github.com/samuelcolvin/pydantic/blob/43308d1b24c5d1163c44b8fa786d1b27e000c64e/pydantic/main.py#L440)) and it is being used in the [_calculate_keys method](https://github.com/samuelcolvin/pydantic/blob/43308d1b24c5d1163c44b8fa786d1b27e000c64e/pydantic/main.py#L817).\r\n\r\nThe first thing I did was to check the `jsonable_encoder` using a BaseModel object, which uses the dict function from Pydantic (Example 1), so I created a set of test with a BaseModel instance. All those tests are passing. Then I created the same tests with a Python dictionary (Example 2) and a Python object (Example 3).\r\n\r\nI expect that the same tests with a different type of variable would work the same. In the case of Example 3, it is failing the most because it is missing the `include` and `exclude` parameters at the end of the function ([here](https://github.com/tiangolo/fastapi/blob/fdb6c9ccc504f90afd0fbcec53f3ea0bfebc261a/fastapi/encoders.py#L142)).\r\n\r\n### Environment\r\n\r\n* OS: Linux\r\n* Python: 3.8.5\r\n* FastAPI Version: 0.63.0\r\n\r\nTo know the FastAPI version use:\r\n\r\n```bash\r\npython -c \"import fastapi; print(fastapi.__version__)\"\r\n```\r\n\r\n* Python version:\r\n\r\nTo know the Python version use:\r\n\r\n```bash\r\npython --version\r\n```\r\n\r\n### Additional context\r\n\r\nTo reproduce the Example snippets, you will also need `pytest` installed (6.2.1 in my case)\r\nI am happy to help by creating a PR for this bug once it is confirmed.\r\n\r\n<details>\r\n  <summary>All examples together</summary>\r\n  \r\n  ```python\r\nimport pytest\r\nfrom attr import dataclass\r\nfrom fastapi.encoders import jsonable_encoder\r\nfrom pydantic.main import BaseModel\r\n\r\n\r\nclass MyBaseModel(BaseModel):\r\n    foo: int\r\n    bar: int\r\n\r\n\r\n@dataclass\r\nclass MyModel:\r\n    foo: int\r\n    bar: int\r\n\r\n\r\n@pytest.mark.parametrize(\r\n    \"obj, include, exclude, expected\",\r\n    [\r\n        (MyBaseModel(foo=1, bar=2), None, None, {\"foo\": 1, \"bar\": 2}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), {}, {}, {}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), {\"foo\"}, {}, {\"foo\": 1}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), {}, {\"foo\"}, {}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), {\"foo\"}, None, {\"foo\": 1}),  # Passed\r\n        (MyBaseModel(foo=1, bar=2), None, {\"foo\"}, {\"bar\": 2}),  # Passed\r\n        ({\"foo\": 1, \"bar\": 2}, None, None, {\"foo\": 1, \"bar\": 2}),  # Passed\r\n        ({\"foo\": 1, \"bar\": 2}, {}, {}, {}),  # Failed\r\n        ({\"foo\": 1, \"bar\": 2}, {\"foo\"}, {}, {\"foo\": 1}),  # Failed\r\n        ({\"foo\": 1, \"bar\": 2}, {}, {\"foo\"}, {}),  # Failed\r\n        ({\"foo\": 1, \"bar\": 2}, {\"foo\"}, None, {\"foo\": 1}),  # Failed\r\n        ({\"foo\": 1, \"bar\": 2}, None, {\"foo\"}, {\"bar\": 2}),  # Passed\r\n        (MyModel(foo=1, bar=2), None, None, {\"foo\": 1, \"bar\": 2}),  # Passed\r\n        (MyModel(foo=1, bar=2), {}, {}, {}),  # Failed\r\n        (MyModel(foo=1, bar=2), {\"foo\"}, {}, {\"foo\": 1}),  # Failed\r\n        (MyModel(foo=1, bar=2), {}, {\"foo\"}, {}),  # Failed\r\n        (MyModel(foo=1, bar=2), {\"foo\"}, None, {\"foo\": 1}),  # Failed\r\n        (MyModel(foo=1, bar=2), None, {\"foo\"}, {\"bar\": 2}),  # Failed\r\n    ],\r\n)\r\ndef test_jsonable_encoder_include_exclude(obj, include, exclude, expected):\r\n    assert jsonable_encoder(obj, include=include, exclude=exclude) == expected\r\n  ```\r\n</details>\r\n\r\n\n", "hints_text": "The pydantic docs for include/exclude are [here](https://pydantic-docs.helpmanual.io/usage/exporting_models/#advanced-include-and-exclude), for anyone curious regarding this issue.\r\n\r\n@xaviml How would you expect this to work for objects that are not pydantic models? Seems like we'd have to make a lot of assumptions about the structure of the objects.\r\n\r\nPerhaps docs could be added saying include/exclude are only valid for pydantic models? \r\n\r\nTrying to get some more information: If you really want to use include/exclude, is there anything preventing you from using a pydantic model.\nHi @falkben,\r\n\r\nThank you for your reply.\r\n\r\n> How would you expect this to work for objects that are not pydantic models?\r\n\r\nI would expect to be consistent, so to work the same as Pydantic models. For example, if we do:\r\n```python\r\njsonable_encoder({\"foo\": 1, \"bar\": 2}, include={\"foo\"})\r\n```\r\nI would expect to return `{\"foo\": 1}`. However, this returns: `{\"foo\": 1, \"bar\": 2}`. The same way that if we do:\r\n```python\r\njsonable_encoder({\"foo\": 1, \"bar\": 2}, exclude={\"foo\"})\r\n```\r\nIt returns `{\"bar\": 2}` as expected.\r\n\r\n> Seems like we'd have to make a lot of assumptions about the structure of the objects.\r\n\r\nI don't think is about the assumption of the structure of the object. They are all converted to dictionaries with `dict` ([here](https://github.com/tiangolo/fastapi/blob/fdb6c9ccc504f90afd0fbcec53f3ea0bfebc261a/fastapi/encoders.py#L134)) or `vars`([here](https://github.com/tiangolo/fastapi/blob/fdb6c9ccc504f90afd0fbcec53f3ea0bfebc261a/fastapi/encoders.py#L138)). What needs to change is the way of including and excluding ([here](https://github.com/tiangolo/fastapi/blob/fdb6c9ccc504f90afd0fbcec53f3ea0bfebc261a/fastapi/encoders.py#L80)).\r\n\r\n> Perhaps docs could be added saying include/exclude are only valid for pydantic models?\r\n\r\nYou can see in [this `if` branch](https://github.com/tiangolo/fastapi/blob/fdb6c9ccc504f90afd0fbcec53f3ea0bfebc261a/fastapi/encoders.py#L70) that `include` and `exclude` is also used when the object is a dictionary.\r\n\r\n> Trying to get some more information: If you really want to use include/exclude, is there anything preventing you from using a pydantic model.\r\n\r\nI am using the `jsonable_encoder` with a SQLAlchemy object, the same way it is done in [here](https://github.com/tiangolo/full-stack-fastapi-postgresql/blob/490c554e23343eec0736b06e59b2108fdd057fdc/%7B%7Bcookiecutter.project_slug%7D%7D/backend/app/app/crud/base.py#L49). This is what is preventing me to use a Pydantic model, because I use a SQLAlchemy model. I will find a workaround to this, but this is another matter not related to this issue.\r\n\r\nWhen I created this issue I tried to understand what is the expected use of include and exclude parameters from `jsonable_encoder`. This is why I went to the tests and see what is the expected behaviour of this function with the use of include and exclude. What I proposed is how I think it should be (and how it works with Pydantic), but I am happy to hear and discuss the right implementation for this function with these parameters.\r\n\r\nRegards,\r\nXavi M.\nPossibly related? https://github.com/tiangolo/fastapi/pull/2016\nHi @falkben,\n\nI did see that issue before creating this one. The #2016 PR adds support to dictionaries for the include and exclude, but it does.not change the way include and exclude are being used. Although both of these issues (#2016 and this one) are about jsonable_encoder, they are not related.\n\nRegards,\nXavi M.", "created_at": "2021-01-05T12:39:56Z"}
{"repo": "fastapi/fastapi", "pull_number": 2126, "instance_id": "fastapi__fastapi-2126", "issue_numbers": ["2134"], "base_commit": "38802eefeb7c1ef8c80373a7a07a7cb402946228", "patch": "diff --git a/docs/en/docs/advanced/websockets.md b/docs/en/docs/advanced/websockets.md\nindex 878ad37ddc31b..0e9bc5b06b378 100644\n--- a/docs/en/docs/advanced/websockets.md\n+++ b/docs/en/docs/advanced/websockets.md\n@@ -2,6 +2,20 @@\n \n You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\" class=\"external-link\" target=\"_blank\">WebSockets</a> with **FastAPI**.\n \n+## Install `WebSockets`\n+\n+First you need to install `WebSockets`:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install websockets\n+\n+---> 100%\n+```\n+\n+</div>\n+\n ## WebSockets client\n \n ### In production\ndiff --git a/docs/en/docs/tutorial/response-model.md b/docs/en/docs/tutorial/response-model.md\nindex e371e86e4abbb..2bbd4d4fd5090 100644\n--- a/docs/en/docs/tutorial/response-model.md\n+++ b/docs/en/docs/tutorial/response-model.md\n@@ -61,6 +61,12 @@ Here we are declaring a `UserIn` model, it will contain a plaintext password:\n     {!> ../../../docs_src/response_model/tutorial002_py310.py!}\n     ```\n \n+!!! info\n+    To use `EmailStr`, first install <a href=\"https://github.com/JoshData/python-email-validator\" class=\"external-link\" target=\"_blank\">`email_validator`</a>.\n+\n+    E.g. `pip install email-validator`\n+    or `pip install pydantic[email]`.\n+\n And we are using this model to declare our input and the same model to declare our output:\n \n === \"Python 3.6 and above\"\ndiff --git a/docs/en/docs/tutorial/sql-databases.md b/docs/en/docs/tutorial/sql-databases.md\nindex 3436543a5e4f7..5ccaf05ecec96 100644\n--- a/docs/en/docs/tutorial/sql-databases.md\n+++ b/docs/en/docs/tutorial/sql-databases.md\n@@ -80,6 +80,20 @@ The file `__init__.py` is just an empty file, but it tells Python that `sql_app`\n \n Now let's see what each file/module does.\n \n+## Install `SQLAlchemy`\n+\n+First you need to install `SQLAlchemy`:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ pip install sqlalchemy\n+\n+---> 100%\n+```\n+\n+</div>\n+\n ## Create the SQLAlchemy parts\n \n Let's refer to the file `sql_app/database.py`.\n", "test_patch": "diff --git a/docs/en/docs/tutorial/testing.md b/docs/en/docs/tutorial/testing.md\nindex fea5a54f5c2de..79ea2b1ab58b8 100644\n--- a/docs/en/docs/tutorial/testing.md\n+++ b/docs/en/docs/tutorial/testing.md\n@@ -8,6 +8,11 @@ With it, you can use <a href=\"https://docs.pytest.org/\" class=\"external-link\" ta\n \n ## Using `TestClient`\n \n+!!! info\n+    To use `TestClient`, first install <a href=\"https://github.com/psf/requests\" class=\"external-link\" target=\"_blank\">`requests`</a>.\n+\n+    E.g. `pip install requests`.\n+\n Import `TestClient`.\n \n Create a `TestClient` by passing your **FastAPI** application to it.\n", "problem_statement": "Websocket tutorial is insufficient: NEED \"pip install websockets\"\nHi, thanks for excellent framework!\r\n\r\nI found problems in a chapter \"WebSockets\" in docs \"Advanced User Guide\".\r\n\r\n## Problem: NEED Python package \"websockets\"\r\n\r\nWhen I run [example](https://fastapi.tiangolo.com/advanced/websockets/) in docs, exactly the same source code in docs, I got an error message in Chrome console below:\r\n\r\n```txt\r\nWebSocket connection to 'ws://localhost:8000/ws' failed: Error during WebSocket handshake: Unexpected response code: 400\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/42367320/95111269-35814180-077a-11eb-9553-035f4cc17c7e.png)\r\n\r\n## Solution: Install Python package \"websockets\"\r\n\r\nAs I installed \"websockets\" by pip and run same code, the websocket server run correctly. We should add sentences like \"Install 'websockets' package by pip, or other package management tools, when you run this example.\" to docs.\r\n\r\n```sh\r\npip install websockets\r\n```\n", "hints_text": "", "created_at": "2020-10-03T21:02:43Z"}
{"repo": "fastapi/fastapi", "pull_number": 1554, "instance_id": "fastapi__fastapi-1554", "issue_numbers": ["811"], "base_commit": "072c2bc7f9d4900c8afe75f2775942a63325c569", "patch": "diff --git a/docs/en/docs/advanced/events.md b/docs/en/docs/advanced/events.md\nindex 8b3dc7af1859e..7cd2998f05a57 100644\n--- a/docs/en/docs/advanced/events.md\n+++ b/docs/en/docs/advanced/events.md\n@@ -4,6 +4,9 @@ You can define event handlers (functions) that need to be executed before the ap\n \n These functions can be declared with `async def` or normal `def`.\n \n+!!! warning\n+    Only event handlers for the main application will be executed, not for [Sub Applications - Mounts](./sub-applications.md){.internal-link target=_blank}.\n+\n ## `startup` event\n \n To add a function that should be run before the application starts, declare it with the event `\"startup\"`:\n@@ -41,4 +44,4 @@ Here, the `shutdown` event handler function will write a text line `\"Application\n     So, we declare the event handler function with standard `def` instead of `async def`.\n \n !!! info\n-    You can read more about these event handlers in <a href=\"https://www.starlette.io/events/\" class=\"external-link\" target=\"_blank\">Starlette's  Events' docs</a>.\n\\ No newline at end of file\n+    You can read more about these event handlers in <a href=\"https://www.starlette.io/events/\" class=\"external-link\" target=\"_blank\">Starlette's  Events' docs</a>.\n", "test_patch": "", "problem_statement": "Sub application startup event never triggered\n### Describe the bug\r\n\r\nStartup event handlers for sub-applications never trigger.\r\n\r\n### To Reproduce\r\n\r\n```python\r\nfrom fastapi import FastAPI\r\n\r\n\r\nsub_app = FastAPI(openapi_prefix=\"/subapp\")\r\n\r\n\r\n@sub_app.on_event(\"startup\")\r\nasync def sub_app_startup():\r\n    print(\"++++ Sub-app startup event\")  # Never fires\r\n\r\n\r\napp = FastAPI()\r\n\r\n\r\n@app.on_event(\"startup\")\r\nasync def app_startup():\r\n    print(\"++++ App startup event\")\r\n\r\n\r\napp.mount(\"/subapp\", sub_app)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n\r\n    uvicorn.run(app, port=8000, host=\"0.0.0.0\")  # nosec\r\n```\r\n\r\nRunning the above shows:\r\n\r\n```bash\r\n$ python subapp_events.py\r\nINFO:     Started server process [38462]\r\nINFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\r\nINFO:     Waiting for application startup.\r\n++++ App startup event\r\nINFO:     Application startup complete.\r\n```\r\n\r\n**Notice that `sub_app_startup()` is never run.**\r\n\r\n### Expected behavior\r\n\r\nI would expect the sub-application startup event handler to also run (although I am not sure what ordering I would expect).\r\n\r\n\r\n### Environment\r\n\r\n- OS: macOS\r\n- FastAPI Version: 0.45.0\r\n- Python version: 3.7.5\r\n\r\n\r\n### Additional context\r\n\r\nN/A\n", "hints_text": "Digging in to this a bit more, I can see that FastAPI merely exposes the Starlette lifecycle events and doesn't do anything special about them. \r\n\r\nIn addition, this issue has been [raised previously against Starlette](https://github.com/encode/starlette/issues/649).\r\n\r\nSince it's deemed out-of-scope by Starlette developers, I think the only action here would be to document this in the FastAPI docs i.e. call out explicitly that sub-application event handlers are ignored.\r\n\r\n\nI also think it would be good to document this.\r\n\r\nPR welcome!\nThanks for the investigation and for reporting back @jonathanunderwood , yep, it makes sense to have it documented.\nI found this issue this days, so what should I do to trigger subapp's start_up callbacks?\r\nIt seems that fastapi.APIRouter's on_startup param has a similar feature.", "created_at": "2020-06-11T22:45:07Z"}
{"repo": "fastapi/fastapi", "pull_number": 1553, "instance_id": "fastapi__fastapi-1553", "issue_numbers": ["1088"], "base_commit": "543ef7753aff639ad3aed7c153e42f719e361d38", "patch": "diff --git a/docs/en/docs/tutorial/handling-errors.md b/docs/en/docs/tutorial/handling-errors.md\nindex 19a6c568491fb..c5d36702ce50d 100644\n--- a/docs/en/docs/tutorial/handling-errors.md\n+++ b/docs/en/docs/tutorial/handling-errors.md\n@@ -215,7 +215,6 @@ You will receive a response telling you that the data is invalid containing the\n     {\n       \"loc\": [\n         \"body\",\n-        \"item\",\n         \"size\"\n       ],\n       \"msg\": \"value is not a valid integer\",\ndiff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 1a660f5d355fa..f411654f84cab 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -623,9 +623,17 @@ async def request_body_to_args(\n         field = required_params[0]\n         field_info = get_field_info(field)\n         embed = getattr(field_info, \"embed\", None)\n-        if len(required_params) == 1 and not embed:\n+        field_alias_omitted = len(required_params) == 1 and not embed\n+        if field_alias_omitted:\n             received_body = {field.alias: received_body}\n+\n         for field in required_params:\n+            loc: Tuple[str, ...]\n+            if field_alias_omitted:\n+                loc = (\"body\",)\n+            else:\n+                loc = (\"body\", field.alias)\n+\n             value: Any = None\n             if received_body is not None:\n                 if (\n@@ -636,7 +644,7 @@ async def request_body_to_args(\n                     try:\n                         value = received_body.get(field.alias)\n                     except AttributeError:\n-                        errors.append(get_missing_field_error(field.alias))\n+                        errors.append(get_missing_field_error(loc))\n                         continue\n             if (\n                 value is None\n@@ -648,7 +656,7 @@ async def request_body_to_args(\n                 )\n             ):\n                 if field.required:\n-                    errors.append(get_missing_field_error(field.alias))\n+                    errors.append(get_missing_field_error(loc))\n                 else:\n                     values[field.name] = deepcopy(field.default)\n                 continue\n@@ -667,7 +675,9 @@ async def request_body_to_args(\n                 awaitables = [sub_value.read() for sub_value in value]\n                 contents = await asyncio.gather(*awaitables)\n                 value = sequence_shape_to_type[field.shape](contents)\n-            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n+\n+            v_, errors_ = field.validate(value, values, loc=loc)\n+\n             if isinstance(errors_, ErrorWrapper):\n                 errors.append(errors_)\n             elif isinstance(errors_, list):\n@@ -677,12 +687,12 @@ async def request_body_to_args(\n     return values, errors\n \n \n-def get_missing_field_error(field_alias: str) -> ErrorWrapper:\n+def get_missing_field_error(loc: Tuple[str, ...]) -> ErrorWrapper:\n     if PYDANTIC_1:\n-        missing_field_error = ErrorWrapper(MissingError(), loc=(\"body\", field_alias))\n+        missing_field_error = ErrorWrapper(MissingError(), loc=loc)\n     else:  # pragma: no cover\n         missing_field_error = ErrorWrapper(  # type: ignore\n-            MissingError(), loc=(\"body\", field_alias), config=BaseConfig,\n+            MissingError(), loc=loc, config=BaseConfig,\n         )\n     return missing_field_error\n \n", "test_patch": "diff --git a/tests/test_multi_body_errors.py b/tests/test_multi_body_errors.py\nindex f198042619537..4719f0b27f3a3 100644\n--- a/tests/test_multi_body_errors.py\n+++ b/tests/test_multi_body_errors.py\n@@ -104,7 +104,7 @@ def save_item_no_body(item: List[Item]):\n     \"detail\": [\n         {\n             \"ctx\": {\"limit_value\": 0.0},\n-            \"loc\": [\"body\", \"item\", 0, \"age\"],\n+            \"loc\": [\"body\", 0, \"age\"],\n             \"msg\": \"ensure this value is greater than 0\",\n             \"type\": \"value_error.number.not_gt\",\n         }\n@@ -114,22 +114,22 @@ def save_item_no_body(item: List[Item]):\n multiple_errors = {\n     \"detail\": [\n         {\n-            \"loc\": [\"body\", \"item\", 0, \"name\"],\n+            \"loc\": [\"body\", 0, \"name\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n         {\n-            \"loc\": [\"body\", \"item\", 0, \"age\"],\n+            \"loc\": [\"body\", 0, \"age\"],\n             \"msg\": \"value is not a valid decimal\",\n             \"type\": \"type_error.decimal\",\n         },\n         {\n-            \"loc\": [\"body\", \"item\", 1, \"name\"],\n+            \"loc\": [\"body\", 1, \"name\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n         {\n-            \"loc\": [\"body\", \"item\", 1, \"age\"],\n+            \"loc\": [\"body\", 1, \"age\"],\n             \"msg\": \"value is not a valid decimal\",\n             \"type\": \"type_error.decimal\",\n         },\ndiff --git a/tests/test_tutorial/test_body/test_tutorial001.py b/tests/test_tutorial/test_body/test_tutorial001.py\nindex 293981a09d8f4..e75644663e06e 100644\n--- a/tests/test_tutorial/test_body/test_tutorial001.py\n+++ b/tests/test_tutorial/test_body/test_tutorial001.py\n@@ -92,7 +92,7 @@ def test_openapi_schema():\n price_missing = {\n     \"detail\": [\n         {\n-            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"loc\": [\"body\", \"price\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         }\n@@ -102,7 +102,7 @@ def test_openapi_schema():\n price_not_float = {\n     \"detail\": [\n         {\n-            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"loc\": [\"body\", \"price\"],\n             \"msg\": \"value is not a valid float\",\n             \"type\": \"type_error.float\",\n         }\n@@ -112,12 +112,12 @@ def test_openapi_schema():\n name_price_missing = {\n     \"detail\": [\n         {\n-            \"loc\": [\"body\", \"item\", \"name\"],\n+            \"loc\": [\"body\", \"name\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n         {\n-            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"loc\": [\"body\", \"price\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n@@ -126,11 +126,7 @@ def test_openapi_schema():\n \n body_missing = {\n     \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"item\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n+        {\"loc\": [\"body\"], \"msg\": \"field required\", \"type\": \"value_error.missing\",}\n     ]\n }\n \ndiff --git a/tests/test_tutorial/test_body_nested_models/test_tutorial009.py b/tests/test_tutorial/test_body_nested_models/test_tutorial009.py\nindex 8a9f395331082..55859eb2b07f6 100644\n--- a/tests/test_tutorial/test_body_nested_models/test_tutorial009.py\n+++ b/tests/test_tutorial/test_body_nested_models/test_tutorial009.py\n@@ -95,7 +95,7 @@ def test_post_invalid_body():\n     assert response.json() == {\n         \"detail\": [\n             {\n-                \"loc\": [\"body\", \"weights\", \"__key__\"],\n+                \"loc\": [\"body\", \"__key__\"],\n                 \"msg\": \"value is not a valid integer\",\n                 \"type\": \"type_error.integer\",\n             }\ndiff --git a/tests/test_tutorial/test_custom_request_and_route/test_tutorial002.py b/tests/test_tutorial/test_custom_request_and_route/test_tutorial002.py\nindex 59daaf73bbf9f..170065f64670b 100644\n--- a/tests/test_tutorial/test_custom_request_and_route/test_tutorial002.py\n+++ b/tests/test_tutorial/test_custom_request_and_route/test_tutorial002.py\n@@ -18,7 +18,7 @@ def test_exception_handler_body_access():\n             \"body\": '{\"numbers\": [1, 2, 3]}',\n             \"errors\": [\n                 {\n-                    \"loc\": [\"body\", \"numbers\"],\n+                    \"loc\": [\"body\"],\n                     \"msg\": \"value is not a valid list\",\n                     \"type\": \"type_error.list\",\n                 }\ndiff --git a/tests/test_tutorial/test_handling_errors/test_tutorial005.py b/tests/test_tutorial/test_handling_errors/test_tutorial005.py\nindex f974466d15979..083f5141cd40b 100644\n--- a/tests/test_tutorial/test_handling_errors/test_tutorial005.py\n+++ b/tests/test_tutorial/test_handling_errors/test_tutorial005.py\n@@ -92,7 +92,7 @@ def test_post_validation_error():\n     assert response.json() == {\n         \"detail\": [\n             {\n-                \"loc\": [\"body\", \"item\", \"size\"],\n+                \"loc\": [\"body\", \"size\"],\n                 \"msg\": \"value is not a valid integer\",\n                 \"type\": \"type_error.integer\",\n             }\n", "problem_statement": "Bad `loc` on validation error, if payload represended by one model\n### Describe the bug\r\n\r\nReally like your framework, but there is, indeed, an annoying issue with `loc` on validation error with one object as payload.\r\n\r\n### To Reproduce\r\nCode sample\r\n```Python\r\nfrom typing import List\r\n\r\nfrom fastapi import FastAPI, Body\r\nfrom pydantic import BaseModel\r\napp = FastAPI()\r\n\r\nclass NameModel(BaseModel):\r\n    name: str\r\n\r\n@app.post(\"/test\", response_model=NameModel)\r\ndef test(obj: NameModel, ):  # bad\r\n    return obj\r\n\r\n@app.post(\"/test_embed\", response_model=NameModel)\r\ndef test(obj: NameModel = Body(..., embed=True)):  # ok\r\n    return obj\r\n\r\n@app.post(\"/test_multiple\", response_model=List[NameModel])\r\ndef test(obj1: NameModel, obj2: NameModel):  # ok\r\n    return obj1, obj2\r\n```\r\n\r\nWhen you make a request to endpoint (`/test`) with the wrong payload (e.g.: `{}`), it always includes the variable name into error location, despite it has no relation to request.\r\n\r\nIt makes no sense, moreover, it complicates the logic for error printing on fronted, because they just don't know and not required to know the name of the backend`s internal variable.\r\n\r\n```json\r\n{\r\n    \"detail\": [\r\n        {\r\n            \"loc\": [\r\n                \"body\",\r\n                \"obj\",\r\n                \"name\"\r\n            ],\r\n            \"msg\": \"field required\",\r\n            \"type\": \"value_error.missing\"\r\n        }\r\n    ]\r\n}\r\n```\r\nit should be\r\n```json\r\n{\r\n    \"detail\": [\r\n        {\r\n            \"loc\": [\r\n                \"body\",\r\n                \"name\"\r\n            ],\r\n            \"msg\": \"field required\",\r\n            \"type\": \"value_error.missing\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nWith the embedded object (`/test_embed`) or multiple objects (`/test_multiple`), it works as expected, putting the variable name into location, because it should be in the payload.\r\n\r\n### Expected behavior\r\n\r\nDon't include the variable name into location error, if it is not reflected in schema / not embedded / not expected to be in payload.\r\n\r\n### Environment\r\n\r\n- OS: macOS\r\n- FastAPI 0.52.0\r\n- Python 3.6.8\r\n\n", "hints_text": "We can also observe this behaviour, it caused a bit of head-scratching when trying to diagnose the source of an error between frontend and backend services.\nAlso observed this behaviour when fiddling around with the framework for the first time.", "created_at": "2020-06-11T17:24:14Z"}
{"repo": "fastapi/fastapi", "pull_number": 1549, "instance_id": "fastapi__fastapi-1549", "issue_numbers": ["737"], "base_commit": "543ef7753aff639ad3aed7c153e42f719e361d38", "patch": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 1a660f5d355fa..15e7790cea9b5 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -478,6 +478,7 @@ async def solve_dependencies(\n                 name=sub_dependant.name,\n                 security_scopes=sub_dependant.security_scopes,\n             )\n+            use_sub_dependant.security_scopes = sub_dependant.security_scopes\n \n         solved_result = await solve_dependencies(\n             request=request,\n", "test_patch": "diff --git a/tests/test_dependency_security_overrides.py b/tests/test_dependency_security_overrides.py\nnew file mode 100644\nindex 0000000000000..b89d82db433fa\n--- /dev/null\n+++ b/tests/test_dependency_security_overrides.py\n@@ -0,0 +1,65 @@\n+from typing import List, Tuple\n+\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import SecurityScopes\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+def get_user(required_scopes: SecurityScopes):\n+    return \"john\", required_scopes.scopes\n+\n+\n+def get_user_override(required_scopes: SecurityScopes):\n+    return \"alice\", required_scopes.scopes\n+\n+\n+def get_data():\n+    return [1, 2, 3]\n+\n+\n+def get_data_override():\n+    return [3, 4, 5]\n+\n+\n+@app.get(\"/user\")\n+def read_user(\n+    user_data: Tuple[str, List[str]] = Security(get_user, scopes=[\"foo\", \"bar\"]),\n+    data: List[int] = Depends(get_data),\n+):\n+    return {\"user\": user_data[0], \"scopes\": user_data[1], \"data\": data}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_normal():\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"john\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [1, 2, 3],\n+    }\n+\n+\n+def test_override_data():\n+    app.dependency_overrides[get_data] = get_data_override\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"john\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [3, 4, 5],\n+    }\n+    app.dependency_overrides = {}\n+\n+\n+def test_override_security():\n+    app.dependency_overrides[get_user] = get_user_override\n+    response = client.get(\"/user\")\n+    assert response.json() == {\n+        \"user\": \"alice\",\n+        \"scopes\": [\"foo\", \"bar\"],\n+        \"data\": [1, 2, 3],\n+    }\n+    app.dependency_overrides = {}\n", "problem_statement": "dependency_overrides does not play well with scopes\n**Describe the bug**\r\nWhen working with `Security()` dependencies, the scopes disappear when `app.dependency_overrides` is executed. The callable dealing with the scopes gets an empty list instead of the scopes.\r\n\r\n**To Reproduce**\r\n\r\n```python\r\nfrom fastapi import FastAPI, Header, Security, Depends\r\nfrom fastapi.security import SecurityScopes\r\n\r\nfrom starlette.testclient import TestClient\r\n\r\napp = FastAPI()\r\n\r\ndef get_user(required_scopes: SecurityScopes):\r\n    print(required_scopes.scopes)\r\n\r\n    return \"John Doe\"\r\n\r\ndef data():\r\n    return [1,2,3]\r\n\r\ndef other_data():\r\n    return [3,4,5]\r\n\r\n\r\n@app.get(\"/test\")\r\ndef test(user: str = Security(get_user, scopes=[\"foo\", \"bar\"]), data = Depends(data)):\r\n    return data\r\n\r\nclient = TestClient(app)\r\nresponse = client.get(\"/test\")\r\n\r\napp.dependency_overrides[data] = other_data\r\nresponse = client.get(\"/test\")\r\n\r\n# prints: [\"foo\", \"bar\"] and [] instead of [\"foo\", \"bar\"] and [\"foo\", \"bar\"]\r\n```\r\n\r\n**Expected behavior**\r\nIn the above example I expect `get_user()` to print the same scopes twice. Instead, before the `dependency_overrides` it prints the correct scpoes, but an empty list afterwards.\r\n\r\n**Environment:**\r\n - OS: Linux\r\n - FastAPI Version 0.43.0\r\n- Python 3.7.4\r\n\n", "hints_text": "Hello,\r\n\r\nI was reading your [comment](https://github.com/tiangolo/fastapi/issues/738#issuecomment-558795651) in the other thread. In my case, I am using `dependency_overrides` to mock the connection to database.\r\n\r\n```python\r\nclass TransactionTestCaseMixin:\r\n    db_session: Session\r\n\r\n    @pytest.fixture(autouse=True)\r\n    def receive_db_session(self, dbsession: Session):\r\n        self.db_session = dbsession\r\n\r\n        app.dependency_overrides[get_db] = lambda: self.db_session\r\n```\r\n\r\nThat's causing us an issue using `SecurityScopes` when we are testing our service endpoint where we include a `Dependant` (Security) to manage the permissions of our endpoints.\r\n", "created_at": "2020-06-11T01:14:25Z"}
{"repo": "fastapi/fastapi", "pull_number": 1547, "instance_id": "fastapi__fastapi-1547", "issue_numbers": ["872"], "base_commit": "34c857b7cb493fa41f296c001234bc6b2ed6a083", "patch": "diff --git a/fastapi/applications.py b/fastapi/applications.py\nindex 3306aab3d95eb..c21087911ebf4 100644\n--- a/fastapi/applications.py\n+++ b/fastapi/applications.py\n@@ -38,6 +38,7 @@ def __init__(\n         version: str = \"0.1.0\",\n         openapi_url: Optional[str] = \"/openapi.json\",\n         openapi_tags: Optional[List[Dict[str, Any]]] = None,\n+        servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n         default_response_class: Type[Response] = JSONResponse,\n         docs_url: Optional[str] = \"/docs\",\n         redoc_url: Optional[str] = \"/redoc\",\n@@ -70,6 +71,7 @@ def __init__(\n         self.title = title\n         self.description = description\n         self.version = version\n+        self.servers = servers\n         self.openapi_url = openapi_url\n         self.openapi_tags = openapi_tags\n         # TODO: remove when discarding the openapi_prefix parameter\n@@ -106,6 +108,7 @@ def openapi(self, openapi_prefix: str = \"\") -> Dict:\n                 routes=self.routes,\n                 openapi_prefix=openapi_prefix,\n                 tags=self.openapi_tags,\n+                servers=self.servers,\n             )\n         return self.openapi_schema\n \ndiff --git a/fastapi/openapi/models.py b/fastapi/openapi/models.py\nindex a7c4460fab43a..13dc59f189527 100644\n--- a/fastapi/openapi/models.py\n+++ b/fastapi/openapi/models.py\n@@ -63,7 +63,7 @@ class ServerVariable(BaseModel):\n \n \n class Server(BaseModel):\n-    url: AnyUrl\n+    url: Union[AnyUrl, str]\n     description: Optional[str] = None\n     variables: Optional[Dict[str, ServerVariable]] = None\n \ndiff --git a/fastapi/openapi/utils.py b/fastapi/openapi/utils.py\nindex b6221ca202826..5a0c89a894cb3 100644\n--- a/fastapi/openapi/utils.py\n+++ b/fastapi/openapi/utils.py\n@@ -86,7 +86,7 @@ def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L\n def get_openapi_operation_parameters(\n     *,\n     all_route_params: Sequence[ModelField],\n-    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]\n+    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n ) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n@@ -112,7 +112,7 @@ def get_openapi_operation_parameters(\n def get_openapi_operation_request_body(\n     *,\n     body_field: Optional[ModelField],\n-    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]\n+    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n ) -> Optional[Dict]:\n     if not body_field:\n         return None\n@@ -318,12 +318,15 @@ def get_openapi(\n     description: str = None,\n     routes: Sequence[BaseRoute],\n     openapi_prefix: str = \"\",\n-    tags: Optional[List[Dict[str, Any]]] = None\n+    tags: Optional[List[Dict[str, Any]]] = None,\n+    servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n ) -> Dict:\n     info = {\"title\": title, \"version\": version}\n     if description:\n         info[\"description\"] = description\n     output: Dict[str, Any] = {\"openapi\": openapi_version, \"info\": info}\n+    if servers:\n+        output[\"servers\"] = servers\n     components: Dict[str, Dict] = {}\n     paths: Dict[str, Dict] = {}\n     flat_models = get_flat_models_from_routes(routes)\n", "test_patch": "diff --git a/tests/test_openapi_servers.py b/tests/test_openapi_servers.py\nnew file mode 100644\nindex 0000000000000..a210154f60e88\n--- /dev/null\n+++ b/tests/test_openapi_servers.py\n@@ -0,0 +1,60 @@\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI(\n+    servers=[\n+        {\"url\": \"/\", \"description\": \"Default, relative server\"},\n+        {\n+            \"url\": \"http://staging.localhost.tiangolo.com:8000\",\n+            \"description\": \"Staging but actually localhost still\",\n+        },\n+        {\"url\": \"https://prod.example.com\"},\n+    ]\n+)\n+\n+\n+@app.get(\"/foo\")\n+def foo():\n+    return {\"message\": \"Hello World\"}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"servers\": [\n+        {\"url\": \"/\", \"description\": \"Default, relative server\"},\n+        {\n+            \"url\": \"http://staging.localhost.tiangolo.com:8000\",\n+            \"description\": \"Staging but actually localhost still\",\n+        },\n+        {\"url\": \"https://prod.example.com\"},\n+    ],\n+    \"paths\": {\n+        \"/foo\": {\n+            \"get\": {\n+                \"summary\": \"Foo\",\n+                \"operationId\": \"foo_foo_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_servers():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_app():\n+    response = client.get(\"/foo\")\n+    assert response.status_code == 200, response.text\n", "problem_statement": "I need a way to specify servers in the openapi spec\n### Is your feature request related to a problem\r\n\r\nI want to be able to use the generated openapi.json doc as it is and hook it up with a document publishing flow, but i'm not able to because I have to add in information about `servers` manually.\r\n\r\n### The solution you would like\r\n\r\nSomeway to specify at a global level what the base server url should be.\r\n\r\n### Describe alternatives you've considered\r\n\r\nCurrently I'm doing this manually in the generated openapi.json by adding in something like - \r\n```\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"http://example.com\"\r\n        }\r\n    ]\r\n```\r\n\r\nI don't mind submitting a PR which enables this if someone can guide me about the changes that need to be made. One thing I saw was that the `get_openapi` method in `fastapi.openapi.utils`, doesn't expose a parameter for setting a value for the `servers` key.\n", "hints_text": "It's @tiangolo's decision to make, but given this *is* part of the OpenAPI spec, I personally would be in favor of adding this as a keyword argument to `FastAPI`, and as an argument to `get_openapi`, making it easier to set this.\r\n\r\nI think those should be the only changes you need to make (just make sure the value also gets passed to the `get_openapi` call, and added to the returned value in the `get_openapi` call).\r\n\r\nIt should be a quick PR if you want to open it.\r\n\r\nI think eventually we should group the arguments to `FastAPI` into more nested chunks to make it a little easier to parse, but I would be fine with the approach described above for now. \nHey there it's needed also here", "created_at": "2020-06-10T19:32:26Z"}
{"repo": "fastapi/fastapi", "pull_number": 1540, "instance_id": "fastapi__fastapi-1540", "issue_numbers": ["365"], "base_commit": "543ef7753aff639ad3aed7c153e42f719e361d38", "patch": "diff --git a/docs/en/docs/advanced/websockets.md b/docs/en/docs/advanced/websockets.md\nindex d473cef0705c5..6cacc2e6f39f4 100644\n--- a/docs/en/docs/advanced/websockets.md\n+++ b/docs/en/docs/advanced/websockets.md\n@@ -51,6 +51,40 @@ In your WebSocket route you can `await` for messages and send messages.\n \n You can receive and send binary, text, and JSON data.\n \n+## Try it\n+\n+If your file is named `main.py`, run your application with:\n+\n+<div class=\"termy\">\n+\n+```console\n+$ uvicorn main:app --reload\n+\n+<span style=\"color: green;\">INFO</span>:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n+```\n+\n+</div>\n+\n+Open your browser at <a href=\"http://127.0.0.1:8000\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000</a>.\n+\n+You will see a simple page like:\n+\n+<img src=\"/img/tutorial/websockets/image01.png\">\n+\n+You can type messages in the input box, and send them:\n+\n+<img src=\"/img/tutorial/websockets/image02.png\">\n+\n+And your **FastAPI** application with WebSockets will respond back:\n+\n+<img src=\"/img/tutorial/websockets/image03.png\">\n+\n+You can send (and receive) many messages:\n+\n+<img src=\"/img/tutorial/websockets/image04.png\">\n+\n+And all of them will use the same WebSocket connection.\n+\n ## Using `Depends` and others\n \n In WebSocket endpoints you can import from `fastapi` and use:\n@@ -64,7 +98,7 @@ In WebSocket endpoints you can import from `fastapi` and use:\n \n They work the same way as for other FastAPI endpoints/*path operations*:\n \n-```Python hl_lines=\"53 54 55 56 57 58  61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76\"\n+```Python hl_lines=\"56 57 58 59 60 61  64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\"\n {!../../../docs_src/websockets/tutorial002.py!}\n ```\n \n@@ -75,14 +109,7 @@ They work the same way as for other FastAPI endpoints/*path operations*:\n \n     In the future, there will be a `WebSocketException` that you will be able to `raise` from anywhere, and add exception handlers for it. It depends on the <a href=\"https://github.com/encode/starlette/pull/527\" class=\"external-link\" target=\"_blank\">PR #527</a> in Starlette.\n \n-## More info\n-\n-To learn more about the options, check Starlette's documentation for:\n-\n-* <a href=\"https://www.starlette.io/websockets/\" class=\"external-link\" target=\"_blank\">The `WebSocket` class</a>.\n-* <a href=\"https://www.starlette.io/endpoints/#websocketendpoint\" class=\"external-link\" target=\"_blank\">Class-based WebSocket handling</a>.\n-\n-## Test it\n+### Try the WebSockets with dependencies\n \n If your file is named `main.py`, run your application with:\n \n@@ -98,20 +125,21 @@ $ uvicorn main:app --reload\n \n Open your browser at <a href=\"http://127.0.0.1:8000\" class=\"external-link\" target=\"_blank\">http://127.0.0.1:8000</a>.\n \n-You will see a simple page like:\n+There you can set:\n \n-<img src=\"/img/tutorial/websockets/image01.png\">\n+* The \"Item ID\", used in the path.\n+* The \"Token\" used as a query parameter.\n \n-You can type messages in the input box, and send them:\n+!!! tip\n+    Notice that the query `token` will be handled by a dependency.\n \n-<img src=\"/img/tutorial/websockets/image02.png\">\n+With that you can connect the WebSocket and then send and receive messages:\n \n-And your **FastAPI** application with WebSockets will respond back:\n+<img src=\"/img/tutorial/websockets/image05.png\">\n \n-<img src=\"/img/tutorial/websockets/image03.png\">\n-\n-You can send (and receive) many messages:\n+## More info\n \n-<img src=\"/img/tutorial/websockets/image04.png\">\n+To learn more about the options, check Starlette's documentation for:\n \n-And all of them will use the same WebSocket connection.\n+* <a href=\"https://www.starlette.io/websockets/\" class=\"external-link\" target=\"_blank\">The `WebSocket` class</a>.\n+* <a href=\"https://www.starlette.io/endpoints/#websocketendpoint\" class=\"external-link\" target=\"_blank\">Class-based WebSocket handling</a>.\ndiff --git a/docs/en/docs/img/tutorial/websockets/image05.png b/docs/en/docs/img/tutorial/websockets/image05.png\nnew file mode 100644\nindex 0000000000000..00b0c52202b37\nBinary files /dev/null and b/docs/en/docs/img/tutorial/websockets/image05.png differ\ndiff --git a/docs_src/websockets/tutorial002.py b/docs_src/websockets/tutorial002.py\nindex 43005e54c7da6..5be199cd668f4 100644\n--- a/docs_src/websockets/tutorial002.py\n+++ b/docs_src/websockets/tutorial002.py\n@@ -1,4 +1,4 @@\n-from fastapi import Cookie, Depends, FastAPI, Header, WebSocket, status\n+from fastapi import Cookie, Depends, FastAPI, Query, WebSocket, status\n from fastapi.responses import HTMLResponse\n \n app = FastAPI()\n@@ -13,8 +13,9 @@\n         <h1>WebSocket Chat</h1>\n         <form action=\"\" onsubmit=\"sendMessage(event)\">\n             <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n+            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n             <button onclick=\"connect(event)\">Connect</button>\n-            <br>\n+            <hr>\n             <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n             <button>Send</button>\n         </form>\n@@ -23,8 +24,9 @@\n         <script>\n         var ws = null;\n             function connect(event) {\n-                var input = document.getElementById(\"itemId\")\n-                ws = new WebSocket(\"ws://localhost:8000/items/\" + input.value + \"/ws\");\n+                var itemId = document.getElementById(\"itemId\")\n+                var token = document.getElementById(\"token\")\n+                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                 ws.onmessage = function(event) {\n                     var messages = document.getElementById('messages')\n                     var message = document.createElement('li')\n@@ -32,6 +34,7 @@\n                     message.appendChild(content)\n                     messages.appendChild(message)\n                 };\n+                event.preventDefault()\n             }\n             function sendMessage(event) {\n                 var input = document.getElementById(\"messageText\")\n@@ -50,26 +53,26 @@ async def get():\n     return HTMLResponse(html)\n \n \n-async def get_cookie_or_client(\n-    websocket: WebSocket, session: str = Cookie(None), x_client: str = Header(None)\n+async def get_cookie_or_token(\n+    websocket: WebSocket, session: str = Cookie(None), token: str = Query(None)\n ):\n-    if session is None and x_client is None:\n+    if session is None and token is None:\n         await websocket.close(code=status.WS_1008_POLICY_VIOLATION)\n-    return session or x_client\n+    return session or token\n \n \n @app.websocket(\"/items/{item_id}/ws\")\n async def websocket_endpoint(\n     websocket: WebSocket,\n-    item_id: int,\n-    q: str = None,\n-    cookie_or_client: str = Depends(get_cookie_or_client),\n+    item_id: str,\n+    q: int = None,\n+    cookie_or_token: str = Depends(get_cookie_or_token),\n ):\n     await websocket.accept()\n     while True:\n         data = await websocket.receive_text()\n         await websocket.send_text(\n-            f\"Session Cookie or X-Client Header value is: {cookie_or_client}\"\n+            f\"Session cookie or query token value is: {cookie_or_token}\"\n         )\n         if q is not None:\n             await websocket.send_text(f\"Query parameter q is: {q}\")\n", "test_patch": "diff --git a/tests/test_tutorial/test_websockets/test_tutorial002.py b/tests/test_tutorial/test_websockets/test_tutorial002.py\nindex 640691cd3e169..8619a3cb945a0 100644\n--- a/tests/test_tutorial/test_websockets/test_tutorial002.py\n+++ b/tests/test_tutorial/test_websockets/test_tutorial002.py\n@@ -15,69 +15,65 @@ def test_main():\n def test_websocket_with_cookie():\n     with pytest.raises(WebSocketDisconnect):\n         with client.websocket_connect(\n-            \"/items/1/ws\", cookies={\"session\": \"fakesession\"}\n+            \"/items/foo/ws\", cookies={\"session\": \"fakesession\"}\n         ) as websocket:\n             message = \"Message one\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: fakesession\"\n+            assert data == \"Session cookie or query token value is: fakesession\"\n             data = websocket.receive_text()\n-            assert data == f\"Message text was: {message}, for item ID: 1\"\n+            assert data == f\"Message text was: {message}, for item ID: foo\"\n             message = \"Message two\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: fakesession\"\n+            assert data == \"Session cookie or query token value is: fakesession\"\n             data = websocket.receive_text()\n-            assert data == f\"Message text was: {message}, for item ID: 1\"\n+            assert data == f\"Message text was: {message}, for item ID: foo\"\n \n \n def test_websocket_with_header():\n     with pytest.raises(WebSocketDisconnect):\n-        with client.websocket_connect(\n-            \"/items/2/ws\", headers={\"X-Client\": \"xmen\"}\n-        ) as websocket:\n+        with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n             message = \"Message one\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: xmen\"\n+            assert data == \"Session cookie or query token value is: some-token\"\n             data = websocket.receive_text()\n-            assert data == f\"Message text was: {message}, for item ID: 2\"\n+            assert data == f\"Message text was: {message}, for item ID: bar\"\n             message = \"Message two\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: xmen\"\n+            assert data == \"Session cookie or query token value is: some-token\"\n             data = websocket.receive_text()\n-            assert data == f\"Message text was: {message}, for item ID: 2\"\n+            assert data == f\"Message text was: {message}, for item ID: bar\"\n \n \n def test_websocket_with_header_and_query():\n     with pytest.raises(WebSocketDisconnect):\n-        with client.websocket_connect(\n-            \"/items/2/ws?q=baz\", headers={\"X-Client\": \"xmen\"}\n-        ) as websocket:\n+        with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n             message = \"Message one\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: xmen\"\n+            assert data == \"Session cookie or query token value is: some-token\"\n             data = websocket.receive_text()\n-            assert data == \"Query parameter q is: baz\"\n+            assert data == \"Query parameter q is: 3\"\n             data = websocket.receive_text()\n             assert data == f\"Message text was: {message}, for item ID: 2\"\n             message = \"Message two\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n-            assert data == \"Session Cookie or X-Client Header value is: xmen\"\n+            assert data == \"Session cookie or query token value is: some-token\"\n             data = websocket.receive_text()\n-            assert data == \"Query parameter q is: baz\"\n+            assert data == \"Query parameter q is: 3\"\n             data = websocket.receive_text()\n             assert data == f\"Message text was: {message}, for item ID: 2\"\n \n \n def test_websocket_no_credentials():\n     with pytest.raises(WebSocketDisconnect):\n-        client.websocket_connect(\"/items/2/ws\")\n+        client.websocket_connect(\"/items/foo/ws\")\n \n \n def test_websocket_invalid_data():\n     with pytest.raises(WebSocketDisconnect):\n-        client.websocket_connect(\"/items/foo/ws\", headers={\"X-Client\": \"xmen\"})\n+        client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\")\n", "problem_statement": "Tutorial websocket doc example\n**Describe the bug**\r\nHi, \r\nOn the docs of websocket the last example doesn't work.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a file main.py with the last example on the bottom of the file\r\n\r\n>https://fastapi.tiangolo.com/tutorial/websockets/#create-a-websocket\r\n```python\r\nfrom fastapi import Cookie, Depends, FastAPI, Header\r\nfrom starlette.responses import HTMLResponse\r\nfrom starlette.status import WS_1008_POLICY_VIOLATION\r\nfrom starlette.websockets import WebSocket\r\n\r\napp = FastAPI()\r\n\r\nhtml = \"\"\"\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <title>Chat</title>\r\n    </head>\r\n    <body>\r\n        <h1>WebSocket Chat</h1>\r\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\r\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\r\n            <button onclick=\"connect(event)\">Connect</button>\r\n            <br>\r\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\r\n            <button>Send</button>\r\n        </form>\r\n        <ul id='messages'>\r\n        </ul>\r\n        <script>\r\n        var ws = null;\r\n            function connect(event) {\r\n                var input = document.getElementById(\"itemId\")\r\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + input.value + \"/ws\");\r\n                ws.onmessage = function(event) {\r\n                    var messages = document.getElementById('messages')\r\n                    var message = document.createElement('li')\r\n                    var content = document.createTextNode(event.data)\r\n                    message.appendChild(content)\r\n                    messages.appendChild(message)\r\n                };\r\n            }\r\n            function sendMessage(event) {\r\n                var input = document.getElementById(\"messageText\")\r\n                ws.send(input.value)\r\n                input.value = ''\r\n                event.preventDefault()\r\n            }\r\n        </script>\r\n    </body>\r\n</html>\r\n\"\"\"\r\n\r\n\r\n@app.get(\"/\")\r\nasync def get():\r\n    return HTMLResponse(html)\r\n\r\n\r\nasync def get_cookie_or_client(\r\n    websocket: WebSocket, session: str = Cookie(None), x_client: str = Header(None)\r\n):\r\n    if session is None and x_client is None:\r\n        await websocket.close(code=WS_1008_POLICY_VIOLATION)\r\n    return session or x_client\r\n\r\n\r\n@app.websocket(\"/items/{item_id}/ws\")\r\nasync def websocket_endpoint(\r\n    websocket: WebSocket,\r\n    item_id: int,\r\n    q: str = None,\r\n    cookie_or_client: str = Depends(get_cookie_or_client),\r\n):\r\n    await websocket.accept()\r\n    while True:\r\n        data = await websocket.receive_text()\r\n        await websocket.send_text(\r\n            f\"Session Cookie or X-Client Header value is: {cookie_or_client}\"\r\n        )\r\n        if q is not None:\r\n            await websocket.send_text(f\"Query parameter q is: {q}\")\r\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\r\n``` \r\n2. Run the application with the cmd:\r\n```\r\nuvicorn main:app  --log-level debug --reload\r\n```\r\n3. Open the browser 127.0.0.01\r\n  - the first time i connect  with ItemID foo , press the button connect \r\n  - send message hi with ItemID foo and press the button send.\r\n  it's look like the connect fail but the second ,but the send have return code 200\r\n  but nothing happen on the web side. \r\n\r\n![image](https://user-images.githubusercontent.com/52538873/60673629-db137a00-9e80-11e9-8a6b-8246e5297277.png)\r\n\r\n4. See error\r\n```python\r\n\r\nINFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\r\nINFO: Started reloader process [366952]\r\nemail-validator not installed, email fields will be treated as str.\r\nTo install, run: pip install email-validator\r\nINFO: Started server process [366957]\r\nINFO: Waiting for application startup.\r\nDEBUG: None - ASGI [1] Started\r\nDEBUG: None - ASGI [1] Sent {'type': 'lifespan.startup'}\r\nDEBUG: None - ASGI [1] Received {'type': 'lifespan.startup.complete'}\r\nDEBUG: ('127.0.0.1', 50056) - Connected\r\nDEBUG: server - state = CONNECTING\r\nDEBUG: server - event = connection_made(<TCPTransport closed=False reading=True 0x1819178>)\r\nDEBUG: ('127.0.0.1', 50056) - ASGI [2] Started\r\nDEBUG: ('127.0.0.1', 50056) - ASGI [2] Received {'type': 'websocket.close', 'code': 1008}\r\nINFO: ('127.0.0.1', 50056) - \"WebSocket /items/foo/ws\" 403\r\nDEBUG: ('127.0.0.1', 50056) - ASGI [2] Raised exception\r\nERROR: Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/uvicorn/protocols/websockets/websockets_impl.py\", line 147, in run_asgi\r\n    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py\", line 58, in __call__\r\n    raise exc from None\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py\", line 54, in __call__\r\n    await self.app(scope, inner_receive, inner_send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/applications.py\", line 133, in __call__\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 87, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/exceptions.py\", line 49, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/routing.py\", line 585, in __call__\r\n    await route(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/routing.py\", line 265, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/routing.py\", line 56, in app\r\n    await func(session)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/fastapi/routing.py\", line 148, in app\r\n    await websocket.close(code=WS_1008_POLICY_VIOLATION)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/websockets.py\", line 121, in close\r\n    await self.send({\"type\": \"websocket.close\", \"code\": code})\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/websockets.py\", line 70, in send\r\n    raise RuntimeError('Cannot call \"send\" once a close message has been sent.')\r\nRuntimeError: Cannot call \"send\" once a close message has been sent.\r\nDEBUG: server ! failing WebSocket connection in the CONNECTING state: 1006 [no reason]\r\nDEBUG: ('127.0.0.1', 50058) - Connected\r\nDEBUG: server x half-closing TCP connection\r\nDEBUG: ('127.0.0.1', 50058) - ASGI [3] Started\r\nDEBUG: ('127.0.0.1', 50058) - ASGI [3] Received {'type': 'http.response.start', 'status': 200, 'headers': '<...>'}\r\nINFO: ('127.0.0.1', 50058) - \"GET / HTTP/1.1\" 200\r\nDEBUG: ('127.0.0.1', 50058) - ASGI [3] Received {'type': 'http.response.body', 'body': '<1419 bytes>'}\r\nDEBUG: ('127.0.0.1', 50058) - ASGI [3] Completed\r\nDEBUG: server - event = eof_received()\r\nDEBUG: server - event = connection_lost(None)\r\nDEBUG: server - state = CLOSED\r\nDEBUG: server x code = 1006, reason = [no reason]\r\nDEBUG: ('127.0.0.1', 50058) - Disconnected\r\nDEBUG: ('127.0.0.1', 50060) - Connected\r\nDEBUG: ('127.0.0.1', 50060) - ASGI [4] Started\r\nDEBUG: ('127.0.0.1', 50060) - ASGI [4] Received {'type': 'http.response.start', 'status': 200, 'headers': '<...>'}\r\nINFO: ('127.0.0.1', 50060) - \"GET / HTTP/1.1\" 200\r\nDEBUG: ('127.0.0.1', 50060) - ASGI [4] Received {'type': 'http.response.body', 'body': '<1419 bytes>'}\r\nDEBUG: ('127.0.0.1', 50060) - ASGI [4] Completed\r\nDEBUG: ('127.0.0.1', 50060) - Disconnected\r\n\r\n\r\n```\r\n**Expected behavior**\r\nexpected to appear the send  bold message  on the web page.\r\n\r\n**Environment:**\r\n - OS: centos 7\r\n - FastAPI Version [e.g. 0.3.0], get it with: fastapi==0.31.0\r\n\r\n```Python\r\nimport fastapi\r\nprint(fastapi.__version__)\r\n0.31.0\r\n```\r\n\r\n- Python version, get it with:\r\n\r\n```bash\r\npython --version\r\nPython 3.7.3\r\n```\r\n\r\n\n", "hints_text": "@BenjPy ,\r\nJust add `event.preventDefault()` in the beginning of `connect` js function.\r\nThe problem here is when you are trying to make websocket connection, browser refreshes page and closes websocket connection.\r\nSo `connect` function should looks like this:\r\n```\r\nfunction connect(event) {\r\n    event.preventDefault()\r\n    var input = document.getElementById(\"itemId\")\r\n    ws = new WebSocket(\"ws://localhost:8000/items/\" + input.value + \"/ws\");\r\n    ws.onmessage = function(event) {\r\n        var messages = document.getElementById('messages')\r\n        var message = document.createElement('li')\r\n        var content = document.createTextNode(event.data)\r\n        message.appendChild(content)\r\n        messages.appendChild(message)\r\n    };\r\n}\r\n```\n@alj06ka ,\r\nstill nothing appear , when added the line on the web page\r\nit's look like the first time the Websocket fail to connect\r\n\r\nsee on below the js code\r\n```js\r\nhtml = \"\"\"\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <title>Chat</title>\r\n    </head>\r\n    <body>\r\n        <h1>WebSocket Chat</h1>\r\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\r\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\r\n            <button onclick=\"connect(event)\">Connect</button>\r\n            <br>\r\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\r\n            <button>Send</button>\r\n        </form>\r\n        <ul id='messages'>\r\n        </ul>\r\n        <script>\r\n        var ws = null;\r\n            function connect(event) {\r\n                event.preventDefault()\r\n                var input = document.getElementById(\"itemId\")\r\n                ws = new WebSocket(\"ws://127.0.0.1:8000/items/\" + input.value + \"/ws\");\r\n                ws.onmessage = function(event) {\r\n                    var messages = document.getElementById('messages')\r\n                    var message = document.createElement('li')\r\n                    var content = document.createTextNode(event.data)\r\n                    message.appendChild(content)\r\n                    messages.appendChild(message)\r\n                };\r\n            }\r\n            function sendMessage(event) {\r\n                var input = document.getElementById(\"messageText\")\r\n                ws.send(input.value)\r\n                input.value = ''\r\n                event.preventDefault()\r\n            }\r\n        </script>\r\n    </body>\r\n</html>\r\n\"\"\"\r\n```\r\n### see the log on below\r\n```bash\r\nINFO: ('127.0.0.1', 59388) - \"WebSocket /items/foo/ws\" 403\r\nDEBUG: ('127.0.0.1', 59388) - ASGI [13] Raised exception\r\nERROR: Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/uvicorn/protocols/websockets/websockets_impl.py                                                             \", line 147, in run_asgi\r\n    result = await self.app(self.scope, self.asgi_receive, self.asgi_send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py\", line 58,                                                              in __call__\r\n    raise exc from None\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/uvicorn/middleware/message_logger.py\", line 54,                                                              in __call__\r\n    await self.app(scope, inner_receive, inner_send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/applications.py\", line 133, in __call                                                             __\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/middleware/errors.py\", line 87, in __                                                             call__\r\n    await self.app(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/exceptions.py\", line 49, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/routing.py\", line 585, in __call__\r\n    await route(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/routing.py\", line 265, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/routing.py\", line 56, in app\r\n    await func(session)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/fastapi/routing.py\", line 148, in app\r\n    await websocket.close(code=WS_1008_POLICY_VIOLATION)\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/websockets.py\", line 121, in close\r\n    await self.send({\"type\": \"websocket.close\", \"code\": code})\r\n  File \"/data/experiments/realtime_web_socket/lib/python3.7/site-packages/starlette/websockets.py\", line 70, in send\r\n    raise RuntimeError('Cannot call \"send\" once a close message has been sent.')\r\nRuntimeError: Cannot call \"send\" once a close message has been sent.\r\nDEBUG: server ! failing WebSocket connection in the CONNECTING state: 1006 [no reason]\r\nDEBUG: server x half-closing TCP connection\r\nDEBUG: server - event = eof_received()\r\nDEBUG: server - event = connection_lost(None)\r\nDEBUG: server - state = CLOSED\r\nDEBUG: server x code = 1006, reason = [no reason]\r\nDEBUG: ('127.0.0.1', 59390) - Connected\r\nDEBUG: ('127.0.0.1', 59390) - ASGI [14] Started\r\nDEBUG: ('127.0.0.1', 59390) - ASGI [14] Received {'type': 'http.response.start', 'status': 200, 'headers': '<...>'}\r\nINFO: ('127.0.0.1', 59390) - \"GET / HTTP/1.1\" 200\r\nDEBUG: ('127.0.0.1', 59390) - ASGI [14] Received {'type': 'http.response.body', 'body': '<1458 bytes>'}\r\nDEBUG: ('127.0.0.1', 59390) - ASGI [14] Completed\r\nDEBUG: ('127.0.0.1', 59390) - ASGI [15] Started\r\nDEBUG: ('127.0.0.1', 59390) - ASGI [15] Received {'type': 'http.response.start', 'status': 200, 'headers': '<...>'}\r\nINFO: ('127.0.0.1', 59390) - \"GET / HTTP/1.1\" 200\r\nDEBUG: ('127.0.0.1', 59390) - ASGI [15] Received {'type': 'http.response.body', 'body': '<1458 bytes>'}\r\nDEBUG: ('127.0.0.1', 59390) - ASGI [15] Completed\r\nDEBUG: ('127.0.0.1', 59390) - Disconnected\r\nDEBUG: ('127.0.0.1', 59448) - Connected\r\nDEBUG: ('127.0.0.1', 59448) - ASGI [16] Started\r\nDEBUG: ('127.0.0.1', 59448) - ASGI [16] Received {'type': 'http.response.start', 'status': 200, 'headers': '<...>'}\r\nINFO: ('127.0.0.1', 59448) - \"GET / HTTP/1.1\" 200\r\nDEBUG: ('127.0.0.1', 59448) - ASGI [16] Received {'type': 'http.response.body', 'body': '<1458 bytes>'}\r\nDEBUG: ('127.0.0.1', 59448) - ASGI [16] Completed\r\n\r\n```\r\n\r\n\n@BenjPy ,\r\nLooks like this window is still reloading...\r\nActually, I think, that separation onto two forms will help you:\r\n```\r\n<form action=\"\" onsubmit=\"connect(event)\">\r\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\r\n            <button>Connect</button>\r\n</form>\r\n<form action=\"\" onsubmit=\"sendMessage(event)\">\r\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\r\n            <button>Send</button>\r\n</form>\r\n```\r\nIt's not a good way, but it's okay to try out websockets.\n@alj06ka ,\r\nHi, still nothing appear on the web page.\n@BenjPy ,\r\nHi, actually, problem was not in page reloading. I find out, that this example shows how to pass cookie or header params as well. So, you can see dependency `cookie_or_client`. It means, that you must pass `session` param in `Cookie`, or `x-client` param in `Header` on websocket connection request. So if you pass it, everything works correctly.\r\nHere is my code of this example:\r\n```\r\nimport uvicorn\r\n\r\nfrom fastapi import Cookie, Depends, FastAPI, Header\r\nfrom starlette.responses import HTMLResponse\r\nfrom starlette.status import WS_1008_POLICY_VIOLATION\r\nfrom starlette.websockets import WebSocket\r\n\r\napp = FastAPI()\r\n\r\nhtml = \"\"\"\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <title>Chat</title>\r\n    </head>\r\n    <body>\r\n        <h1>WebSocket Chat</h1>\r\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\r\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\r\n            <button onclick=\"connect(event)\">Connect</button>\r\n            <br>\r\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\r\n            <button>Send</button>\r\n        </form>\r\n        <ul id='messages'>\r\n        </ul>\r\n        <script>\r\n            var ws = null;\r\n            function connect(event) {\r\n                event.preventDefault()\r\n                var input = document.getElementById(\"itemId\")\r\n                document.cookie = \"session=Test;path=/\"\r\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + input.value + \"/ws\");\r\n                ws.onmessage = function(event) {\r\n                    var messages = document.getElementById('messages')\r\n                    var message = document.createElement('li')\r\n                    var content = document.createTextNode(event.data)\r\n                    message.appendChild(content)\r\n                    messages.appendChild(message)\r\n                };\r\n            }\r\n            function sendMessage(event) {\r\n                var input = document.getElementById(\"messageText\")\r\n                ws.send(input.value)\r\n                input.value = ''\r\n                event.preventDefault()\r\n            }\r\n        </script>\r\n    </body>\r\n</html>\r\n\"\"\"\r\n\r\n\r\n@app.get(\"/\")\r\nasync def get():\r\n    return HTMLResponse(html)\r\n\r\n\r\nasync def get_cookie_or_client(\r\n    websocket: WebSocket, session: str = Cookie(None), x_client: str = Header(None)\r\n):\r\n    if session is None and x_client is None:\r\n        await websocket.close(code=WS_1008_POLICY_VIOLATION)\r\n    return session or x_client\r\n\r\n\r\n@app.websocket(\"/items/{item_id}/ws\")\r\nasync def websocket_endpoint(\r\n    websocket: WebSocket,\r\n    item_id: int,\r\n    q: str = None,\r\n    cookie_or_client: str = Depends(get_cookie_or_client),\r\n):\r\n    await websocket.accept()\r\n    while True:\r\n        data = await websocket.receive_text()\r\n        await websocket.send_text(\r\n            f\"Session Cookie or X-Client Header value is: {cookie_or_client}\"\r\n        )\r\n        if q is not None:\r\n            await websocket.send_text(f\"Query parameter q is: {q}\")\r\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\r\n\r\nif __name__ == '__main__':\r\n    uvicorn.run(app, host='localhost', port=8000)\r\n```\n@alj06ka\r\nwork, thank you \r\nneed to change item_id to str \r\n```python\r\n@app.websocket(\"/items/{item_id}/ws\")\r\nasync def websocket_endpoint(\r\n    websocket: WebSocket,\r\n    item_id: str,\r\n    q: str = None,\r\n    cookie_or_client: str = Depends(get_cookie_or_client),\r\n):\r\n```\r\n\r\n> it's possible to update the doc ?\nI just had the same problem, and looks like the doc hasn't been edited yet as of Mar. 3rd 2020.\r\nThe code above seems like a decent fix, which has worked for me too.\nI still have this problem:\r\n```\r\nfrom fastapi import Cookie, Depends, FastAPI, Header, WebSocket, status\r\n\r\napp = FastAPI()\r\n\r\n\r\nasync def get_cookie_or_client(\r\n    websocket: WebSocket, session: str = Cookie(None), x_client: str = Header(None)\r\n):\r\n    if session is None and x_client is None:\r\n        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)\r\n    return session or x_client\r\n\r\n\r\n@app.websocket(\"/ws\")\r\nasync def websocket_endpoint(\r\n    websocket: WebSocket, cookie_or_client: str = Depends(get_cookie_or_client),\r\n):\r\n    await websocket.accept()\r\n    while True:\r\n        data = await websocket.receive_text()\r\n\r\n        await websocket.send_text(f\"Message text was: {data}\")\r\n```\r\n", "created_at": "2020-06-09T15:37:27Z"}
{"repo": "fastapi/fastapi", "pull_number": 1534, "instance_id": "fastapi__fastapi-1534", "issue_numbers": ["1349"], "base_commit": "543ef7753aff639ad3aed7c153e42f719e361d38", "patch": "diff --git a/docs/en/docs/tutorial/response-status-code.md b/docs/en/docs/tutorial/response-status-code.md\nindex 29b8521fc737f..b63e48b0345cc 100644\n--- a/docs/en/docs/tutorial/response-status-code.md\n+++ b/docs/en/docs/tutorial/response-status-code.md\n@@ -17,6 +17,9 @@ The same way you can specify a response model, you can also declare the HTTP sta\n \n The `status_code` parameter receives a number with the HTTP status code.\n \n+!!! info\n+    `status_code` can alternatively also receive an `IntEnum`, such as Python's <a href=\"https://docs.python.org/3/library/http.html#http.HTTPStatus\" class=\"external-link\" target=\"_blank\">`http.HTTPStatus`</a>.\n+\n It will:\n \n * Return that status code in the response.\ndiff --git a/fastapi/routing.py b/fastapi/routing.py\nindex 3ac420e6e2296..27181d79edef2 100644\n--- a/fastapi/routing.py\n+++ b/fastapi/routing.py\n@@ -1,4 +1,5 @@\n import asyncio\n+import enum\n import inspect\n from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\n \n@@ -295,6 +296,9 @@ def __init__(\n         dependency_overrides_provider: Any = None,\n         callbacks: Optional[List[\"APIRoute\"]] = None,\n     ) -> None:\n+        # normalise enums e.g. http.HTTPStatus\n+        if isinstance(status_code, enum.IntEnum):\n+            status_code = int(status_code)\n         self.path = path\n         self.endpoint = endpoint\n         self.name = get_name(endpoint) if name is None else name\n", "test_patch": "diff --git a/tests/main.py b/tests/main.py\nindex ab0b186072933..f32856cb6c3a2 100644\n--- a/tests/main.py\n+++ b/tests/main.py\n@@ -1,3 +1,5 @@\n+import http\n+\n from fastapi import FastAPI, Path, Query\n \n app = FastAPI()\n@@ -184,3 +186,8 @@ def get_query_param_required(query=Query(...)):\n @app.get(\"/query/param-required/int\")\n def get_query_param_required_type(query: int = Query(...)):\n     return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/enum-status-code\", status_code=http.HTTPStatus.CREATED)\n+def get_enum_status_code():\n+    return \"foo bar\"\ndiff --git a/tests/test_application.py b/tests/test_application.py\nindex f6d77460a4032..fcb77c93e5364 100644\n--- a/tests/test_application.py\n+++ b/tests/test_application.py\n@@ -1078,6 +1078,18 @@\n                 ],\n             }\n         },\n+        \"/enum-status-code\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"201\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"Get Enum Status Code\",\n+                \"operationId\": \"get_enum_status_code_enum_status_code_get\",\n+            }\n+        },\n     },\n     \"components\": {\n         \"schemas\": {\n@@ -1149,3 +1161,9 @@ def test_redoc():\n     assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"redoc@next\" in response.text\n+\n+\n+def test_enum_status_code_response():\n+    response = client.get(\"/enum-status-code\")\n+    assert response.status_code == 201, response.text\n+    assert response.json() == \"foo bar\"\n", "problem_statement": "Support HTTPStatus\n### Is your feature request related to a problem\r\n\r\nWe typically use [HTTPStatus](https://docs.python.org/3/library/http.html#http.HTTPStatus) in our code. When used as a value for `status_code` in path functions this results in the string literal in the documentation and when \"trying\" the response is shown as undocumented because it doesn't match the actual response code\r\n\r\n### The solution you would like\r\n\r\nI want to use HTTPStatus enum values and have it work exactly like the `starlette.status` pseudo enum values\r\n\r\n\r\n\n", "hints_text": "For now you can create your own HTTPStatus class (you can't subclass Enums) and add a `__str__` method to convert it to the string representation of the actual status code, for example:\r\n```python\r\nclass MyHTTPStatus(IntEnum):\r\n    OK = 200\r\n    ...\r\n    def __str__(self):\r\n        return str(int(self))\r\n```\r\nor use `int(HTTPStatus)` in the endpoint decorator.\nThanks for the help @retnikt ! :bow: \r\n\r\nYeah, @hmvp you can probably use that for your use case.\nI am sorry to disagree...\r\n\r\nIt is indeed quite easy to workaround this. For example by just importing status from starlette and using that in the decorators. \r\n\r\nHowever `HTTPStatus` is part of the standard lib and since we use it extensively in the rest of our code I would like to use that instead of the starlette status. The second reason is that I expected it to work (since its part of stdlib) and it somewhat did but gave unexpected results.. This is a papercut/pitfall/surpising behavior of fastapi and given the high standard of the rest of the library this should not be there \r\n\r\nI am not sure if @retnikt  understood what I am trying to do here.. Adding another class is a weird suggestion given that both `HTTPStatus` and `starlette.status` already exist\nThe ASGI spec uses `int`s for status codes, not enums. That's why it takes `int`s.\r\n\r\nAlso, @retnikt has been helping a lot here, answering a lot of questions, trying to help others like you, for free. Just out of being a cool person. Please try to be more respectful to the community that is here trying to help.\r\n\r\nIf you really want to use `HTTPStatus` enums you can use the `int` value, it's quite simple, e.g. `HTTPStatus.OK.value`.\nI did not want to be disrespectful to @retnikt and I value his contribution for other people that might have a similar but different issue. I just don't see how it is relevant for my issue. I am sorry if my wording was to strong... As a non-native English speaker I might miss some subtleties.\r\n\r\nWith regards to the ASGI spec, I did not know that, but I also was not aware that the `status_code` code argument followed the ASGI spec in that regard, especially since putting in a HTTPStatus code enum value just works, but will give a weird result in the docs. It should not be to difficult to add some code along the line of:\r\n```\r\nif isinstance(HTTPStatus, status_code):\r\n     status_code = status_code.value\r\n```\r\nor  just `status_code = int(status_code)` to the path functions, which would solve a papercut and would still be valid ASGI.  Otherwise I would expect the path functions to be noisy about wrong input..\r\n\r\nOn the other hand, this is indeed not a big issue and if you don't want to change anything, thats fine with me. I just wanted to signal that this is a [papercut](https://en.wikipedia.org/wiki/Paper_cut_bug) in fastapi\nCool, thanks!\r\n\r\nYeah, I would accept a PR checking if a status code is an enum to get its value first. :nerd_face: :heavy_check_mark: \nWorking on it!", "created_at": "2020-06-08T12:29:39Z"}
{"repo": "fastapi/fastapi", "pull_number": 1524, "instance_id": "fastapi__fastapi-1524", "issue_numbers": ["911"], "base_commit": "8cfe254400a92c1184c354a92541b401932d24a3", "patch": "diff --git a/fastapi/encoders.py b/fastapi/encoders.py\nindex 26ceb21445f15..3f5b79d9ebbce 100644\n--- a/fastapi/encoders.py\n+++ b/fastapi/encoders.py\n@@ -71,6 +71,8 @@ def jsonable_encoder(\n                 by_alias=by_alias,\n                 skip_defaults=bool(exclude_unset or skip_defaults),\n             )\n+        if \"__root__\" in obj_dict:\n+            obj_dict = obj_dict[\"__root__\"]\n         return jsonable_encoder(\n             obj_dict,\n             exclude_none=exclude_none,\n", "test_patch": "diff --git a/tests/test_jsonable_encoder.py b/tests/test_jsonable_encoder.py\nindex adee443a8943c..d4ae3444211d8 100644\n--- a/tests/test_jsonable_encoder.py\n+++ b/tests/test_jsonable_encoder.py\n@@ -76,6 +76,10 @@ class ModelWithDefault(BaseModel):\n     bla: str = \"bla\"\n \n \n+class ModelWithRoot(BaseModel):\n+    __root__: str\n+\n+\n @pytest.fixture(\n     name=\"model_with_path\", params=[PurePath, PurePosixPath, PureWindowsPath]\n )\n@@ -158,3 +162,8 @@ def test_encode_model_with_path(model_with_path):\n     else:\n         expected = \"/foo/bar\"\n     assert jsonable_encoder(model_with_path) == {\"path\": expected}\n+\n+\n+def test_encode_root():\n+    model = ModelWithRoot(__root__=\"Foo\")\n+    assert jsonable_encoder(model) == \"Foo\"\n", "problem_statement": "Pydantic __root__ model - incorrect handling\n### Describe the bug\r\n\r\nhttps://pydantic-docs.helpmanual.io/usage/models/#custom-root-types\r\nPydantic allows to create models with only `__root__` field. In such scenario the model behaves as transparent wrapper for this single type.\r\n\r\nWhen such model is used in response (request also?) fastapi does not treat it correctly and renders it as object with `__root__` field.\r\n\r\nObject is treated correctly by pydantic itself.\r\n\r\n### To Reproduce\r\n\r\n```\r\nfrom typing import List\r\nfrom fastapi import FastAPI\r\nfrom pydantic.main import BaseModel\r\n\r\napp = FastAPI()\r\n\r\n\r\nclass RootTestClass(BaseModel):\r\n    __root__: List[str]\r\n\r\n\r\n@app.get(\"/\")\r\nasync def root():\r\n    response = RootTestClass(__root__=['a', 'b', 'c'])\r\n    print(response.json())  # [\"a\", \"b\", \"c\"] so it's OK\r\n    print(RootTestClass.schema())  # {'title': 'RootTestClass', 'type': 'array', 'items': {'type': 'string'}} this is also OK\r\n    return response  # Wrong value in http response\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe response should be:\r\n```\r\n[\"a\", \"b\", \"c\"]\r\n```\r\n\r\nbut at the moment is:\r\n```\r\n{\"__root__\":[\"a\",\"b\",\"c\"]}\r\n```\r\n\r\n### Screenshots\r\n\r\nN/A\r\n\r\n### Environment\r\n\r\n- OS: Linux\r\n- FastAPI Version: 0.47.1\r\n- Python version: Python 3.7.5\r\n\r\n### Additional context\r\n\r\nN/A\r\n\n", "hints_text": "If anyone wants to submit a PR to fix this I'd be happy to review it. (I think it's worth handling this properly.)\nFor now created issue for `pydantic` (https://github.com/samuelcolvin/pydantic/issues/1193) as it looks like it is more broken there than here.\nI wouldn't recommend using `__root__` in FastAPI. `__root__` allows using other types in Pydantic apart from things with key values, like lists.\r\n\r\nBut in FastAPI, everywhere you can use a Pydantic model you can also use what would be the (arguably?) most \"Pythonic\" way, using `typing`. So you can do `List[SomeModel]`. Instead of having to create a `SomeModelWrapper` that users `__root__`.\r\n\r\n`__root__` is valid and useful in Pydantic standalone as there's no other way to achieve what it does. But in FastAPI the preferred way is to use standard types that have Pydantic models as type parameters (the thing inside `List[]`).\r\n\r\nGiven that, as it's still valid Pydantic, I would be happy to support it if someone wants to add a PR with it (as @dmontagu says).\n@tiangolo I understands that `response_model=Dict[str, str]` instead of a wrapped model with `__root__` is viable, however is there a way to include an `example`, perhaps similar to the `schema_extra` section that can be attach to `response_model` ?\n@tiangolo Supporting pydantic root types would allow a single validator (defined in the wrapper class) to be run on all objects of a certain type- otherwise, the validator must be specified in each object that has a child of that type (as far as I can tell- I'm new to fastAPI, please let me know if there's a better way).\nas @sidmani also mentioned, I'm running into wanting the ability to be able to say: \r\n\r\n```python\r\npydantic_list_as_root.dict()\r\n```\r\n\r\nand the above output a dict. Rather than having to manually loop through my `List[pydantic_entity]` and call `dict()` on each one. \r\n\r\nHowever, I do appreciate what @tiangolo is trying to achieve by keeping things as pythonic as possible, but I would imagine that many if not all FastAPI implementations heavily rely on Pydantic for defining schemas. Therefore, I think it would be a great idea to embrace all/most of its capabilities. \nYeah, I would be happy to support it if someone wants to add a PR with it.", "created_at": "2020-06-06T03:48:18Z"}
{"repo": "fastapi/fastapi", "pull_number": 1299, "instance_id": "fastapi__fastapi-1299", "issue_numbers": ["1296"], "base_commit": "4e77737a3f7bf2608132ea170e9ff013b5af6732", "patch": "diff --git a/docs/en/docs/tutorial/body-fields.md b/docs/en/docs/tutorial/body-fields.md\nindex 28a81e41328bd..91e6b1a101a8d 100644\n--- a/docs/en/docs/tutorial/body-fields.md\n+++ b/docs/en/docs/tutorial/body-fields.md\n@@ -39,7 +39,7 @@ You can then use `Field` with model attributes:\n \n You can declare extra information in `Field`, `Query`, `Body`, etc. And it will be included in the generated JSON Schema.\n \n-You will learn more about it later to declare examples examples.\n+You will learn more about adding extra information later in the docs, when learning to declare examples.\n \n ## Recap\n \n", "test_patch": "", "problem_statement": "Typo in [EN] tutorial: body-fields\n### Describe the bug\r\n\r\nThere is a typo in `fastapi/blob/master/docs/en/docs/tutorial/body-fields.md` under `## Add Extra Information:` \r\n\r\n> ...\r\n> You will learn more about it later to declare examples examples.\r\n\r\n### To Reproduce\r\n\r\nLook for `examples examples` in https://fastapi.tiangolo.com/tutorial/body-fields/#add-extra-information\r\n\r\n### Expected behavior\r\n\r\nIt should probably be a link to somewhere although it is not really clear where to.\r\n\r\n\n", "hints_text": "", "created_at": "2020-04-22T00:35:00Z"}
{"repo": "fastapi/fastapi", "pull_number": 1122, "instance_id": "fastapi__fastapi-1122", "issue_numbers": ["998"], "base_commit": "025b38df40a18f94322fab445aee13024fe783da", "patch": "diff --git a/fastapi/routing.py b/fastapi/routing.py\nindex b36104869648a..f1033a31f52e1 100644\n--- a/fastapi/routing.py\n+++ b/fastapi/routing.py\n@@ -480,7 +480,12 @@ def decorator(func: Callable) -> Callable:\n     def add_api_websocket_route(\n         self, path: str, endpoint: Callable, name: str = None\n     ) -> None:\n-        route = APIWebSocketRoute(path, endpoint=endpoint, name=name)\n+        route = APIWebSocketRoute(\n+            path,\n+            endpoint=endpoint,\n+            name=name,\n+            dependency_overrides_provider=self.dependency_overrides_provider,\n+        )\n         self.routes.append(route)\n \n     def websocket(self, path: str, name: str = None) -> Callable:\n", "test_patch": "diff --git a/tests/test_ws_router.py b/tests/test_ws_router.py\nindex fd19e650a9ace..dd0456127222a 100644\n--- a/tests/test_ws_router.py\n+++ b/tests/test_ws_router.py\n@@ -1,4 +1,4 @@\n-from fastapi import APIRouter, FastAPI, WebSocket\n+from fastapi import APIRouter, Depends, FastAPI, WebSocket\n from fastapi.testclient import TestClient\n \n router = APIRouter()\n@@ -34,6 +34,19 @@ async def routerindex(websocket: WebSocket):\n     await websocket.close()\n \n \n+async def ws_dependency():\n+    return \"Socket Dependency\"\n+\n+\n+@router.websocket(\"/router-ws-depends/\")\n+async def router_ws_decorator_depends(\n+    websocket: WebSocket, data=Depends(ws_dependency)\n+):\n+    await websocket.accept()\n+    await websocket.send_text(data)\n+    await websocket.close()\n+\n+\n app.include_router(router)\n app.include_router(prefix_router, prefix=\"/prefix\")\n \n@@ -64,3 +77,16 @@ def test_router2():\n     with client.websocket_connect(\"/router2\") as websocket:\n         data = websocket.receive_text()\n         assert data == \"Hello, router!\"\n+\n+\n+def test_router_ws_depends():\n+    client = TestClient(app)\n+    with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n+        assert websocket.receive_text() == \"Socket Dependency\"\n+\n+\n+def test_router_ws_depends_with_override():\n+    client = TestClient(app)\n+    app.dependency_overrides[ws_dependency] = lambda: \"Override\"\n+    with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n+        assert websocket.receive_text() == \"Override\"\n", "problem_statement": "Dependency override websocket broken\n### Describe the bug\r\n\r\nDependency override does not work for websockets. \r\n\r\nThe function `add_api_websocket_route` does not add `dependency_overrides_provider` to `APIWebSocketRoute`.\r\n\r\n### To Reproduce\r\n\r\nCreate a simple app with websockets and test it with override.\r\n\r\n### Expected behavior\r\n\r\nThe overrides should be taken into account, but the test uses the original dependency. \r\n\r\n### Environment\r\n\r\n- OS: Windows\r\n- FastAPI version: 0.49.0\r\n- Python version: 3.6.8\r\n\n", "hints_text": "`APIRouter.add_api_websocket_route` should be modified to construct the `APIWebSocketRoute` like this:\r\n```\r\nroute = APIWebSocketRoute(\r\n            path,\r\n            endpoint=endpoint,\r\n            name=name,\r\n            dependency_overrides_provider=self.dependency_overrides_provider,\r\n        )\r\n```", "created_at": "2020-03-16T17:12:49Z"}
{"repo": "fastapi/fastapi", "pull_number": 994, "instance_id": "fastapi__fastapi-994", "issue_numbers": ["967"], "base_commit": "9c3c9b6e78768374868d690bc05918d58481e880", "patch": "diff --git a/fastapi/openapi/utils.py b/fastapi/openapi/utils.py\nindex d53ee6b97b736..91f90ec583785 100644\n--- a/fastapi/openapi/utils.py\n+++ b/fastapi/openapi/utils.py\n@@ -180,7 +180,9 @@ def get_openapi_path(\n             operation_parameters = get_openapi_operation_parameters(all_route_params)\n             parameters.extend(operation_parameters)\n             if parameters:\n-                operation[\"parameters\"] = parameters\n+                operation[\"parameters\"] = list(\n+                    {param[\"name\"]: param for param in parameters}.values()\n+                )\n             if method in METHODS_WITH_BODY:\n                 request_body_oai = get_openapi_operation_request_body(\n                     body_field=route.body_field, model_name_map=model_name_map\n", "test_patch": "diff --git a/tests/test_param_in_path_and_dependency.py b/tests/test_param_in_path_and_dependency.py\nnew file mode 100644\nindex 0000000000000..55b667ee9f744\n--- /dev/null\n+++ b/tests/test_param_in_path_and_dependency.py\n@@ -0,0 +1,93 @@\n+from fastapi import Depends, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+async def user_exists(user_id: int):\n+    return True\n+\n+\n+@app.get(\"/users/{user_id}\", dependencies=[Depends(user_exists)])\n+async def read_users(user_id: int):\n+    pass\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    },\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_reused_param():\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == openapi_schema\n+\n+\n+def test_read_users():\n+    response = client.get(\"/users/42\")\n+    assert response.status_code == 200\n", "problem_statement": "The generated OpenAPI schema duplicates parameter IDs when used with dependencies\n### Describe the bug\r\n\r\nThe generated OpenAPI schema duplicates parameter IDs when used with dependencies.\r\n\r\n### To Reproduce\r\n\r\nSteps to reproduce the behavior with a minimum self-contained file.\r\n\r\n* Create a file with:\r\n\r\n```Python\r\nfrom fastapi import Depends, FastAPI\r\nfrom starlette.testclient import TestClient\r\n\r\napp = FastAPI()\r\n\r\n\r\nasync def user_exists(user_id: int):\r\n    return True\r\n\r\n\r\n@app.post(\"/users/{user_id}\", dependencies=[Depends(user_exists)])\r\nasync def bug(user_id: int):\r\n    pass\r\n\r\n\r\nclient = TestClient(app)\r\n\r\nopenapi_schema = {\r\n    \"openapi\": \"3.0.2\",\r\n    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\r\n    \"paths\": {\r\n        \"/users/{user_id}\": {\r\n            \"post\": {\r\n                \"summary\": \"Bug\",\r\n                \"operationId\": \"bug_users__user_id__post\",\r\n                \"parameters\": [\r\n                    {\r\n                        \"required\": True,\r\n                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\r\n                        \"name\": \"user_id\",\r\n                        \"in\": \"path\",\r\n                    },\r\n                    # This duplicated user_id shouldn't be here\r\n                    # {\r\n                    #     \"required\": True,\r\n                    #     \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\r\n                    #     \"name\": \"user_id\",\r\n                    #     \"in\": \"path\",\r\n                    # },\r\n                ],\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"description\": \"Successful Response\",\r\n                        \"content\": {\"application/json\": {\"schema\": {}}},\r\n                    },\r\n                    \"422\": {\r\n                        \"description\": \"Validation Error\",\r\n                        \"content\": {\r\n                            \"application/json\": {\r\n                                \"schema\": {\r\n                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\r\n                                }\r\n                            }\r\n                        },\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    },\r\n    \"components\": {\r\n        \"schemas\": {\r\n            \"HTTPValidationError\": {\r\n                \"title\": \"HTTPValidationError\",\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"detail\": {\r\n                        \"title\": \"Detail\",\r\n                        \"type\": \"array\",\r\n                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\r\n                    }\r\n                },\r\n            },\r\n            \"ValidationError\": {\r\n                \"title\": \"ValidationError\",\r\n                \"required\": [\"loc\", \"msg\", \"type\"],\r\n                \"type\": \"object\",\r\n                \"properties\": {\r\n                    \"loc\": {\r\n                        \"title\": \"Location\",\r\n                        \"type\": \"array\",\r\n                        \"items\": {\"type\": \"string\"},\r\n                    },\r\n                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\r\n                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\r\n                },\r\n            },\r\n        }\r\n    },\r\n}\r\n\r\n\r\ndef test_reused_param():\r\n    response = client.get(\"/openapi.json\")\r\n    data = response.json()\r\n    assert data == openapi_schema\r\n```\r\n\r\n* Run it with `pytest`.\r\n\r\nAlternatively, you can run it with Uvicorn go to `/openapi.json`, copy that and validate it at: https://editor.swagger.io/ . It should be valid.\r\n\r\n### Expected behavior\r\n\r\nThe `user_id` used by the path operation and the dependency shouldn't be duplicated in the OpenAPI schema.\r\n\r\n### Environment\r\n\r\n- OS: all\r\n- FastAPI Version [e.g. 0.3.0], get it with: 0.48.0\r\n\r\n```bash\r\npython -c \"import fastapi; print(fastapi.__version__)\"\r\n```\r\n\r\n- Python version, get it with: 3.7\r\n\r\n```bash\r\npython --version\r\n```\r\n\r\n### Additional context\r\n\r\nSupersedes #395\r\n\n", "hints_text": "", "created_at": "2020-02-18T14:09:16Z"}
{"repo": "fastapi/fastapi", "pull_number": 918, "instance_id": "fastapi__fastapi-918", "issue_numbers": ["914"], "base_commit": "55afb70b3717969565499f5dcaef54b1f0acc7da", "patch": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex a1cc0b9808d4c..33130a90ef339 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -634,7 +634,11 @@ async def request_body_to_args(\n                 ) and isinstance(received_body, FormData):\n                     value = received_body.getlist(field.alias)\n                 else:\n-                    value = received_body.get(field.alias)\n+                    try:\n+                        value = received_body.get(field.alias)\n+                    except AttributeError:\n+                        errors.append(get_missing_field_error(field.alias))\n+                        continue\n             if (\n                 value is None\n                 or (isinstance(field_info, params.Form) and value == \"\")\n@@ -645,18 +649,7 @@ async def request_body_to_args(\n                 )\n             ):\n                 if field.required:\n-                    if PYDANTIC_1:\n-                        errors.append(\n-                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n-                        )\n-                    else:  # pragma: nocover\n-                        errors.append(\n-                            ErrorWrapper(  # type: ignore\n-                                MissingError(),\n-                                loc=(\"body\", field.alias),\n-                                config=BaseConfig,\n-                            )\n-                        )\n+                    errors.append(get_missing_field_error(field.alias))\n                 else:\n                     values[field.name] = deepcopy(field.default)\n                 continue\n@@ -685,6 +678,16 @@ async def request_body_to_args(\n     return values, errors\n \n \n+def get_missing_field_error(field_alias: str) -> ErrorWrapper:\n+    if PYDANTIC_1:\n+        missing_field_error = ErrorWrapper(MissingError(), loc=(\"body\", field_alias))\n+    else:  # pragma: no cover\n+        missing_field_error = ErrorWrapper(  # type: ignore\n+            MissingError(), loc=(\"body\", field_alias), config=BaseConfig,\n+        )\n+    return missing_field_error\n+\n+\n def get_schema_compatible_field(*, field: ModelField) -> ModelField:\n     out_field = field\n     if lenient_issubclass(field.type_, UploadFile):\n", "test_patch": "diff --git a/tests/test_tutorial/test_body_multiple_params/test_tutorial003.py b/tests/test_tutorial/test_body_multiple_params/test_tutorial003.py\nindex 54bf193e9a613..7dcf9edd846a5 100644\n--- a/tests/test_tutorial/test_body_multiple_params/test_tutorial003.py\n+++ b/tests/test_tutorial/test_body_multiple_params/test_tutorial003.py\n@@ -166,6 +166,30 @@ def test_openapi_schema():\n                 ]\n             },\n         ),\n+        (\n+            \"/items/5\",\n+            [],\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n     ],\n )\n def test_post_body(path, body, expected_status, expected_response):\n", "problem_statement": "Sending incorrect data cause 500 error\nI've got this simple example:\r\n\r\n```\r\nfrom typing import List\r\n\r\nfrom fastapi import FastAPI, Body\r\n\r\n\r\nclass User(BaseModel):\r\n    name: str\r\n\r\n\r\n@app.post('/test/')\r\nasync def test(users: List[User], test: str = Body(...)):\r\n    return {'users': users, 'test': test}\r\n```\r\n\r\nWhen sending incorrect payload the server returns 500 error:\r\n\r\n```\r\n# curl -s -D - -o /dev/null -X POST \"localhost:8080/test/\" -H  \"accept: application/json\" -H  \"Content-Type: application/json\" -d \"[]\"\r\nHTTP/1.1 500 Internal Server Error\r\ndate: Fri, 24 Jan 2020 10:59:47 GMT\r\nserver: uvicorn\r\ncontent-length: 1264\r\ncontent-type: text/plain; charset=utf-8\r\n```\r\nServer exception:\r\n\r\n```\r\nINFO:     127.0.0.1:60652 - \"POST /test/ HTTP/1.1\" 500 Internal Server Error\r\nERROR:    Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/test/venv38/lib/python3.8/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/test/venv38/lib/python3.8/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/test/venv38/lib/python3.8/site-packages/fastapi/applications.py\", line 140, in __call__\r\n    await super().__call__(scope, receive, send)\r\n  File \"/test/venv38/lib/python3.8/site-packages/starlette/applications.py\", line 134, in __call__\r\n    await self.error_middleware(scope, receive, send)\r\n  File \"/test/venv38/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 178, in __call__\r\n    raise exc from None\r\n  File \"/test/venv38/lib/python3.8/site-packages/starlette/middleware/errors.py\", line 156, in __call__\r\n    await self.app(scope, receive, _send)\r\n  File \"/test/venv38/lib/python3.8/site-packages/starlette/exceptions.py\", line 73, in __call__\r\n    raise exc from None\r\n  File \"/test/venv38/lib/python3.8/site-packages/starlette/exceptions.py\", line 62, in __call__\r\n    await self.app(scope, receive, sender)\r\n  File \"/test/venv38/lib/python3.8/site-packages/starlette/routing.py\", line 590, in __call__\r\n    await route(scope, receive, send)\r\n  File \"/test/venv38/lib/python3.8/site-packages/starlette/routing.py\", line 208, in __call__\r\n    await self.app(scope, receive, send)\r\n  File \"/test/venv38/lib/python3.8/site-packages/starlette/routing.py\", line 41, in app\r\n    response = await func(request)\r\n  File \"/test/venv38/lib/python3.8/site-packages/fastapi/routing.py\", line 115, in app\r\n    solved_result = await solve_dependencies(\r\n  File \"/test/venv38/lib/python3.8/site-packages/fastapi/dependencies/utils.py\", line 547, in solve_dependencies\r\n    ) = await request_body_to_args(  # body_params checked above\r\n  File \"/test/venv38/lib/python3.8/site-packages/fastapi/dependencies/utils.py\", line 637, in request_body_to_args\r\n    value = received_body.get(field.alias)\r\nAttributeError: 'list' object has no attribute 'get'\r\n```\r\n\r\nSo the body is not validated in this case?\n", "hints_text": "Have reproduced same error.", "created_at": "2020-01-25T06:59:01Z"}
{"repo": "fastapi/fastapi", "pull_number": 856, "instance_id": "fastapi__fastapi-856", "issue_numbers": ["842"], "base_commit": "3eca945bd17600a0be6eae1d8fd93ba8f9805006", "patch": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 956fffff472de..a1cc0b9808d4c 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -629,9 +629,9 @@ async def request_body_to_args(\n         for field in required_params:\n             value: Any = None\n             if received_body is not None:\n-                if field.shape in sequence_shapes and isinstance(\n-                    received_body, FormData\n-                ):\n+                if (\n+                    field.shape in sequence_shapes or field.type_ in sequence_types\n+                ) and isinstance(received_body, FormData):\n                     value = received_body.getlist(field.alias)\n                 else:\n                     value = received_body.get(field.alias)\n", "test_patch": "diff --git a/tests/test_forms_from_non_typing_sequences.py b/tests/test_forms_from_non_typing_sequences.py\nnew file mode 100644\nindex 0000000000000..0e47e906ae75b\n--- /dev/null\n+++ b/tests/test_forms_from_non_typing_sequences.py\n@@ -0,0 +1,46 @@\n+from fastapi import FastAPI, Form\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/form/python-list\")\n+def post_form_param_list(items: list = Form(...)):\n+    return items\n+\n+\n+@app.post(\"/form/python-set\")\n+def post_form_param_set(items: set = Form(...)):\n+    return items\n+\n+\n+@app.post(\"/form/python-tuple\")\n+def post_form_param_tuple(items: tuple = Form(...)):\n+    return items\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_python_list_param_as_form():\n+    response = client.post(\n+        \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == [\"first\", \"second\", \"third\"]\n+\n+\n+def test_python_set_param_as_form():\n+    response = client.post(\n+        \"/form/python-set\", data={\"items\": [\"first\", \"second\", \"third\"]}\n+    )\n+    assert response.status_code == 200\n+    assert set(response.json()) == {\"first\", \"second\", \"third\"}\n+\n+\n+def test_python_tuple_param_as_form():\n+    response = client.post(\n+        \"/form/python-tuple\", data={\"items\": [\"first\", \"second\", \"third\"]}\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == [\"first\", \"second\", \"third\"]\n", "problem_statement": "Support repeated key=value in form data\n### Is your feature request related to a problem\r\n\r\nYes.\r\n\r\nGiven some URL encoded data like this...\r\n\r\n```\r\nchoices=parrot&choices=spider\r\n```\r\n\r\n...only the last key=value wins.\r\n\r\nThis does not work like I expected:\r\n```python\r\nchoices: list = Form(...)\r\n```\r\n\r\nYou can only validate against the last value.\r\n\r\n### The solution you would like\r\n\r\nPerhaps FastAPI should collect repeated keys in the 2-tuple list that `request.form()` gives and assign those values as a list to the same key before validation happens.\r\n\r\n\r\n\n", "hints_text": "Hey @StephenCarboni, parameters in the URL are part of a querystring and you can get and validate them as described here: https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#query-parameter-list-multiple-values\r\nAs far as I understand, `Form()` is using only for request body\nOh, sorry, looks like I misread you message.\nAnyway, I think this issue better be created in the starlette repo, because the `request` is an object from starlette.\nI am a little surprised that `choices=parrot&choices=spider` doesn't work; if I recall correctly it definitely works for query parameters, and is how you would send a list of values.\r\n\r\nThe logic for form data parsing is in the `starlette.requests.Request.form` method, and delegates to [`python-multipart`](https://github.com/andrew-d/python-multipart), so you can look for the specific logic there.\r\n\r\n(Since it uses an entirely different library for parsing, it ultimately isn't THAT surprising that the logic might be different.)", "created_at": "2020-01-14T03:48:12Z"}
{"repo": "fastapi/fastapi", "pull_number": 756, "instance_id": "fastapi__fastapi-756", "issue_numbers": ["755"], "base_commit": "861ed37c9784c4aefa646c875ed0353c5699d6d8", "patch": "diff --git a/fastapi/encoders.py b/fastapi/encoders.py\nindex 25cd0b0269ad4..765bb18e08a24 100644\n--- a/fastapi/encoders.py\n+++ b/fastapi/encoders.py\n@@ -1,6 +1,6 @@\n from enum import Enum\n from types import GeneratorType\n-from typing import Any, Dict, List, Set, Union\n+from typing import Any, Callable, Dict, List, Set, Tuple, Union\n \n from fastapi.utils import PYDANTIC_1, logger\n from pydantic import BaseModel\n@@ -10,6 +10,21 @@\n DictIntStrAny = Dict[Union[int, str], Any]\n \n \n+def generate_encoders_by_class_tuples(\n+    type_encoder_map: Dict[Any, Callable]\n+) -> Dict[Callable, Tuple]:\n+    encoders_by_classes: Dict[Callable, List] = {}\n+    for type_, encoder in type_encoder_map.items():\n+        encoders_by_classes.setdefault(encoder, []).append(type_)\n+    encoders_by_class_tuples: Dict[Callable, Tuple] = {}\n+    for encoder, classes in encoders_by_classes.items():\n+        encoders_by_class_tuples[encoder] = tuple(classes)\n+    return encoders_by_class_tuples\n+\n+\n+encoders_by_class_tuples = generate_encoders_by_class_tuples(ENCODERS_BY_TYPE)\n+\n+\n def jsonable_encoder(\n     obj: Any,\n     include: Union[SetIntStr, DictIntStrAny] = None,\n@@ -105,24 +120,31 @@ def jsonable_encoder(\n                 )\n             )\n         return encoded_list\n+\n+    if custom_encoder:\n+        if type(obj) in custom_encoder:\n+            return custom_encoder[type(obj)](obj)\n+        else:\n+            for encoder_type, encoder in custom_encoder.items():\n+                if isinstance(obj, encoder_type):\n+                    return encoder(obj)\n+\n+    if type(obj) in ENCODERS_BY_TYPE:\n+        return ENCODERS_BY_TYPE[type(obj)](obj)\n+    for encoder, classes_tuple in encoders_by_class_tuples.items():\n+        if isinstance(obj, classes_tuple):\n+            return encoder(obj)\n+\n     errors: List[Exception] = []\n     try:\n-        if custom_encoder and type(obj) in custom_encoder:\n-            encoder = custom_encoder[type(obj)]\n-        else:\n-            encoder = ENCODERS_BY_TYPE[type(obj)]\n-        return encoder(obj)\n-    except KeyError as e:\n+        data = dict(obj)\n+    except Exception as e:\n         errors.append(e)\n         try:\n-            data = dict(obj)\n+            data = vars(obj)\n         except Exception as e:\n             errors.append(e)\n-            try:\n-                data = vars(obj)\n-            except Exception as e:\n-                errors.append(e)\n-                raise ValueError(errors)\n+            raise ValueError(errors)\n     return jsonable_encoder(\n         data,\n         by_alias=by_alias,\n", "test_patch": "diff --git a/tests/test_inherited_custom_class.py b/tests/test_inherited_custom_class.py\nnew file mode 100644\nindex 0000000000000..a9f6738983591\n--- /dev/null\n+++ b/tests/test_inherited_custom_class.py\n@@ -0,0 +1,73 @@\n+import uuid\n+\n+import pytest\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class MyUuid:\n+    def __init__(self, uuid_string: str):\n+        self.uuid = uuid_string\n+\n+    def __str__(self):\n+        return self.uuid\n+\n+    @property\n+    def __class__(self):\n+        return uuid.UUID\n+\n+    @property\n+    def __dict__(self):\n+        \"\"\"Spoof a missing __dict__ by raising TypeError, this is how\n+        asyncpg.pgroto.pgproto.UUID behaves\"\"\"\n+        raise TypeError(\"vars() argument must have __dict__ attribute\")\n+\n+\n+@app.get(\"/fast_uuid\")\n+def return_fast_uuid():\n+    # I don't want to import asyncpg for this test so I made my own UUID\n+    # Import asyncpg and uncomment the two lines below for the actual bug\n+\n+    # from asyncpg.pgproto import pgproto\n+    # asyncpg_uuid = pgproto.UUID(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n+\n+    asyncpg_uuid = MyUuid(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\n+    assert isinstance(asyncpg_uuid, uuid.UUID)\n+    assert type(asyncpg_uuid) != uuid.UUID\n+    with pytest.raises(TypeError):\n+        vars(asyncpg_uuid)\n+    return {\"fast_uuid\": asyncpg_uuid}\n+\n+\n+class SomeCustomClass(BaseModel):\n+    class Config:\n+        arbitrary_types_allowed = True\n+        json_encoders = {uuid.UUID: str}\n+\n+    a_uuid: MyUuid\n+\n+\n+@app.get(\"/get_custom_class\")\n+def return_some_user():\n+    # Test that the fix also works for custom pydantic classes\n+    return SomeCustomClass(a_uuid=MyUuid(\"b8799909-f914-42de-91bc-95c819218d01\"))\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_dt():\n+    with client:\n+        response_simple = client.get(\"/fast_uuid\")\n+        response_pydantic = client.get(\"/get_custom_class\")\n+\n+    assert response_simple.json() == {\n+        \"fast_uuid\": \"a10ff360-3b1e-4984-a26f-d3ab460bdb51\"\n+    }\n+\n+    assert response_pydantic.json() == {\n+        \"a_uuid\": \"b8799909-f914-42de-91bc-95c819218d01\"\n+    }\n", "problem_statement": "asyncpg uuid implementation not recognized by fastapi because of too strict typechecking\n### Describe the bug\r\n\r\nAn alternative implementation of the `UUID` type is not serialized by fastapi but throws an error instead. This is because it is of type `asyncpg.pgproto.pgproto.UUID` instead of type `uuid.UUID`. However it is implemented in such a way that it does the exact same things as the regular UUID but just faster. Also,\r\n```python\r\nisinstance(asyncpg.pgproto.pgproto.UUID(), uuid.UUID) == True\r\n```\r\nthis should make fastapi able to recognize it as a uuid.\r\n\r\n### To Reproduce\r\n1. Create a file called uuid_error.py with:\r\n\r\n```Python\r\nimport uuid\r\n\r\nfrom fastapi import FastAPI\r\nfrom asyncpg.pgproto import pgproto\r\n\r\napp = FastAPI()\r\n\r\n\r\n@app.get(\"/normal_uuid\")\r\ndef return_normal_uuid():\r\n    regular_uuid = uuid.UUID(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\r\n    assert isinstance(regular_uuid, uuid.UUID)\r\n    return {\"normal_uuid\": regular_uuid}\r\n\r\n\r\n@app.get(\"/fast_uuid\")\r\ndef return_fast_uuid():\r\n    asyncpg_uuid = pgproto.UUID(\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\")\r\n    assert isinstance(asyncpg_uuid, uuid.UUID)\r\n    return {\"fast_uuid\": asyncpg_uuid}\r\n```\r\n2. Run it with uvicorn uuid_error:app\r\n3. Open the browser and call the endpoint `/fast_uuid`.\r\n4. It returns 'internal server error' .\r\n5. But I expected it to return `{\"fast_uuid\":\"a10ff360-3b1e-4984-a26f-d3ab460bdb51\"}`.\r\n\r\n### Expected behavior\r\n\r\nI expected fastapi to jsonify the uuid and send, but instead it returns 'internal server error'. The precise error being thrown in the server is:\r\n```\r\nValueError: [KeyError(<class 'asyncpg.pgproto.pgproto.UUID'>), TypeError(\"'asyncpg.pgproto.pgproto.UUID' object is not iterable\"), TypeError('vars() argument must have __dict__ attribute')]\r\n```\r\n\r\n### Environment\r\n\r\n- OS: Linux Mint 19 Tara\r\n- FastAPI Version: 0.44.0\r\n- Python version: 3.8.0\r\n\r\n### Additional context\r\n\r\nI initially made an issue in the asyncpg repo asking them if they could fix it: https://github.com/MagicStack/asyncpg/issues/512 I think it's usefull as additional context for this issue.\r\nThe problem can be solved here in the fastapi code by improving the code a little. I'm working on a PR, this line seems to be the issue:\r\nhttps://github.com/tiangolo/fastapi/blob/c200bc2240d48a4a27e96fba536351038eafc44f/fastapi/encoders.py#L113\r\nI think it shouldn't use `type()` but it should instead use `isinstance()` this will make for slightly looser typechecking but I think that might be a good thing in this case?\r\n\n", "hints_text": "", "created_at": "2019-11-30T09:57:26Z"}
{"repo": "fastapi/fastapi", "pull_number": 681, "instance_id": "fastapi__fastapi-681", "issue_numbers": ["679"], "base_commit": "c5f5e63810b002306f688b032ad9f134def60bea", "patch": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 4745f173f0d6e..2cda78a9e9a6f 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -351,7 +351,7 @@ def add_param_to_fields(*, field: Field, dependant: Dependant) -> None:\n \n \n def is_coroutine_callable(call: Callable) -> bool:\n-    if inspect.isfunction(call):\n+    if inspect.isroutine(call):\n         return asyncio.iscoroutinefunction(call)\n     if inspect.isclass(call):\n         return False\n", "test_patch": "diff --git a/tests/test_dependency_class.py b/tests/test_dependency_class.py\nnew file mode 100644\nindex 0000000000000..db1f5cc8fe70a\n--- /dev/null\n+++ b/tests/test_dependency_class.py\n@@ -0,0 +1,70 @@\n+import pytest\n+from fastapi import Depends, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class CallableDependency:\n+    def __call__(self, value: str) -> str:\n+        return value\n+\n+\n+class AsyncCallableDependency:\n+    async def __call__(self, value: str) -> str:\n+        return value\n+\n+\n+class MethodsDependency:\n+    def synchronous(self, value: str) -> str:\n+        return value\n+\n+    async def asynchronous(self, value: str) -> str:\n+        return value\n+\n+\n+callable_dependency = CallableDependency()\n+async_callable_dependency = AsyncCallableDependency()\n+methods_dependency = MethodsDependency()\n+\n+\n+@app.get(\"/callable-dependency\")\n+async def get_callable_dependency(value: str = Depends(callable_dependency)):\n+    return value\n+\n+\n+@app.get(\"/async-callable-dependency\")\n+async def get_callable_dependency(value: str = Depends(async_callable_dependency)):\n+    return value\n+\n+\n+@app.get(\"/synchronous-method-dependency\")\n+async def get_synchronous_method_dependency(\n+    value: str = Depends(methods_dependency.synchronous),\n+):\n+    return value\n+\n+\n+@app.get(\"/asynchronous-method-dependency\")\n+async def get_asynchronous_method_dependency(\n+    value: str = Depends(methods_dependency.asynchronous),\n+):\n+    return value\n+\n+\n+client = TestClient(app)\n+\n+\n+@pytest.mark.parametrize(\n+    \"route,value\",\n+    [\n+        (\"/callable-dependency\", \"callable-dependency\"),\n+        (\"/async-callable-dependency\", \"async-callable-dependency\"),\n+        (\"/synchronous-method-dependency\", \"synchronous-method-dependency\"),\n+        (\"/asynchronous-method-dependency\", \"asynchronous-method-dependency\"),\n+    ],\n+)\n+def test_class_dependency(route, value):\n+    response = client.get(route, params={\"value\": value})\n+    assert response.status_code == 200\n+    assert response.json() == value\n", "problem_statement": "Async class method dependency raises a ValueError\n**Describe the bug**\r\nIf you use an async class method as a dependency, a `ValueError` is thrown. It doesn't happen for a non-async method.\r\n\r\nComplete error: `ValueError: [KeyError(<class 'coroutine'>), TypeError(\"'coroutine' object is not iterable\"), TypeError('vars() argument must have __dict__ attribute')]` (at `fastapi/encoders.py:106`)\r\n\r\n**To Reproduce**\r\n\r\n```py\r\nfrom fastapi import Depends, FastAPI\r\nfrom starlette.requests import Request\r\n\r\nclass DependencyClass:\r\n    async def async_dep(self, request: Request):\r\n        return True\r\n\r\n    def sync_dep(self, request: Request):\r\n        return True\r\n\r\napp = FastAPI()\r\ndependency = DependencyClass()\r\n\r\n# Error\r\n@app.get('/async-dep')\r\ndef async_dep(r=Depends(dependency.async_dep)):\r\n    return r\r\n\r\n# Everything is fine\r\n@app.get('/sync-dep')\r\ndef sync_dep(r=Depends(dependency.sync_dep)):\r\n    return r\r\n```\r\n\r\n**Expected behavior**\r\nThe async class method dependency should be called and its return value injected.\r\n\r\n**Environment:**\r\n - OS: macOS\r\n - FastAPI Version: 0.42.0\r\n- Python version: 3.7.2\r\n\r\n**Additional context**\r\nI believe the issue comes from here:\r\n\r\nhttps://github.com/tiangolo/fastapi/blob/65536cbf63318d111bf608960378d651b6c1596a/fastapi/dependencies/utils.py#L353-L359\r\n\r\nIndeed, `inspect.isfunction(call)` will return `False` in case of a class method. Hence, it is [sent to `run_in_threadpool`](https://github.com/tiangolo/fastapi/blob/65536cbf63318d111bf608960378d651b6c1596a/fastapi/dependencies/utils.py#L453-L456), which never awaits the coroutine, and we end up trying to serialize it instead of its result (hence the `ValueError`).\r\n\r\nChanging the check by:\r\n\r\n```py\r\nif inspect.isfunction(call) or inspect.ismethod(call):\r\n```\r\n\r\nsolves the issue. I can make a PR with the fix and unit tests if it helps.\n", "hints_text": "not sure what the \"right\" behavior should be but in your `async_dep` (wich itself is not async) you return a coroutine r without awaiting it so it's kind of expected that it doesn't return it's value, is it ?\r\n\r\nsomehting like this \"works\" even if I fail to see the use case\r\n```\r\nimport asyncio\r\n\r\nimport uvicorn\r\nfrom fastapi import Depends, FastAPI\r\nfrom starlette.requests import Request\r\n\r\n\r\nclass DependencyClass:\r\n    async def async_dep(self, request: Request):\r\n        await asyncio.sleep(0)\r\n        return False\r\n\r\n    def sync_dep(self, request: Request):\r\n        return True\r\n\r\n\r\napp = FastAPI()\r\ndependency = DependencyClass()\r\n\r\n# Error\r\n@app.get('/async-dep')\r\nasync def authenticate(r=Depends(dependency.async_dep)):\r\n    s = await r\r\n    return s\r\n\r\n# Everything is fine\r\n@app.get('/sync-dep')\r\ndef authenticate(r=Depends(dependency.sync_dep)):\r\n    return r\r\n\r\n\r\nif __name__ == '__main__':\r\n    uvicorn.run(\"679_async_dep_class:app\", reload= True)\r\n```\r\n\nWell yes, for the sake of simplicity in the example, my async method don't do anything async, but still is a coroutine that needs to be awaited.\r\n\r\nThe use case is inspired from the async class dependencies, like `OAuth2PasswordBearer`:\r\n\r\nhttps://github.com/tiangolo/fastapi/blob/65536cbf63318d111bf608960378d651b6c1596a/fastapi/security/oauth2.py#L138-L163\r\n\r\n`__call__` *is* async here and, when you inject this dependency, we do get `param`, we don't need to `await` it in the controller function.\r\n\r\nSo, I think we should be able to do something similar with class methods. For example:\r\n\r\n```py\r\nclass Authentication:\r\n    def __init__(self, params):\r\n        self.params = params\r\n\r\n    async def get_user(self, request: Request) -> User:\r\n        return await self._authenticate(request)\r\n\r\n    async def get_active_user(self, request: Request) -> User:\r\n        user = await self._authenticate(request)\r\n        if not user.is_active:\r\n            raise HTTPException()\r\n        return user\r\n\r\n    async def _authenticate(self, request: Request) -> User:\r\n        # Do some authentication logic\r\n        return user\r\n\r\nauthentication = Authentication(params)\r\n\r\n@app.get('/active-user')\r\ndef active_user(user=Depends(authentication.get_active_user)):\r\n    return user\r\n```\r\n\r\nThis is useful to share common logic between all the dependencies while providing some specialized behaviour.\r\n\r\nIMO, this is clearly a bug as it works flawlessly with async `__call__` and non-async methods.\nmakes lot of sense indeed, was stuck on your version before edit\nThis makes sense to me; @frankie567 I think it's worth a PR.", "created_at": "2019-11-05T08:02:25Z"}
{"repo": "fastapi/fastapi", "pull_number": 637, "instance_id": "fastapi__fastapi-637", "issue_numbers": ["630", "630"], "base_commit": "65536cbf63318d111bf608960378d651b6c1596a", "patch": "diff --git a/fastapi/utils.py b/fastapi/utils.py\nindex 8cb0ec123b377..9e4210f86ef84 100644\n--- a/fastapi/utils.py\n+++ b/fastapi/utils.py\n@@ -59,12 +59,11 @@ def create_cloned_field(field: Field) -> Field:\n     if lenient_issubclass(original_type, BaseModel):\n         original_type = cast(Type[BaseModel], original_type)\n         use_type = create_model(\n-            original_type.__name__,\n-            __config__=original_type.__config__,\n-            __validators__=original_type.__validators__,  # type: ignore\n+            original_type.__name__, __config__=original_type.__config__\n         )\n         for f in original_type.__fields__.values():\n             use_type.__fields__[f.name] = f\n+        use_type.__validators__ = original_type.__validators__\n     new_field = Field(\n         name=field.name,\n         type_=use_type,\n", "test_patch": "", "problem_statement": "JSON output reordered by pydantic @validator\nThis isn't a big problem, but I'm wondering if it's possible to keep the JSON output key ordering unaffected by the presence of a Pydantic `@validator(...)`? I like consistency. \ud83e\udd37\u200d\u2642\ufe0f\r\n\r\nI have this pydantic model structure:\r\n```\r\nclass IngredientBase(BaseIngredientMixin):\r\n    name: str = None\r\n    unit: str = None\r\n    unit_price: decimal.Decimal = None\r\n    flavour_warning: bool = None\r\n\r\n    @validator('unit')\r\n    def valid_units_only(cls, v):\r\n        choices = set(SingleIngredientTable.unit_choices.keys())\r\n        if v and v not in choices:\r\n            raise ValueError(f'must be one of {choices}')\r\n        return v\r\n\r\n\r\nclass IngredientIn(IngredientBase):\r\n    pass\r\n\r\n\r\nclass IngredientNew(IngredientIn):\r\n    name: str = ...\r\n    unit: str = ...\r\n    unit_price: decimal.Decimal = ...\r\n\r\n\r\nclass IngredientOut(IngredientBase, TestModelMixin, TimestampModelMixin, IDModelMixin):\r\n    pass\r\n```\r\n\r\nThis will produce:\r\n```\r\n{\r\n  \"unit\": \"IU\",\r\n  \"id\": \"sing_qOYSyqZhfOcJKHsfVz7tnfP6M\",\r\n  \"created\": 1571357369,\r\n  \"updated\": 1571418480,\r\n  \"is_test\": false,\r\n  \"name\": \"Vitamin C\",\r\n  \"unit_price\": 10.568536363534536,\r\n  \"flavour_warning\": false\r\n}\r\n```\r\nWithout the validator, it produces what I would expect:\r\n```\r\n{\r\n  \"id\": \"sing_qOYSyqZhfOcJKHsfVz7tnfP6M\",\r\n  \"created\": 1571357369,\r\n  \"updated\": 1571418480,\r\n  \"is_test\": false,\r\n  \"name\": \"Vitamin C\",\r\n  \"unit\": \"IU\",\r\n  \"unit_price\": 10.568536363534536,\r\n  \"flavour_warning\": false\r\n}\r\n```\r\n\r\nHow can I continue to use `@validator`s and maintain the expected JSON key ordering?\r\n\r\n**Edit**: I can pull out the validator into a 'mixin' class that I apply ONLY to the `IngredientIn` and `IngredientNew` models (leaving `IngredientOut` untouched). But is that my only path here?\nJSON output reordered by pydantic @validator\nThis isn't a big problem, but I'm wondering if it's possible to keep the JSON output key ordering unaffected by the presence of a Pydantic `@validator(...)`? I like consistency. \ud83e\udd37\u200d\u2642\ufe0f\r\n\r\nI have this pydantic model structure:\r\n```\r\nclass IngredientBase(BaseIngredientMixin):\r\n    name: str = None\r\n    unit: str = None\r\n    unit_price: decimal.Decimal = None\r\n    flavour_warning: bool = None\r\n\r\n    @validator('unit')\r\n    def valid_units_only(cls, v):\r\n        choices = set(SingleIngredientTable.unit_choices.keys())\r\n        if v and v not in choices:\r\n            raise ValueError(f'must be one of {choices}')\r\n        return v\r\n\r\n\r\nclass IngredientIn(IngredientBase):\r\n    pass\r\n\r\n\r\nclass IngredientNew(IngredientIn):\r\n    name: str = ...\r\n    unit: str = ...\r\n    unit_price: decimal.Decimal = ...\r\n\r\n\r\nclass IngredientOut(IngredientBase, TestModelMixin, TimestampModelMixin, IDModelMixin):\r\n    pass\r\n```\r\n\r\nThis will produce:\r\n```\r\n{\r\n  \"unit\": \"IU\",\r\n  \"id\": \"sing_qOYSyqZhfOcJKHsfVz7tnfP6M\",\r\n  \"created\": 1571357369,\r\n  \"updated\": 1571418480,\r\n  \"is_test\": false,\r\n  \"name\": \"Vitamin C\",\r\n  \"unit_price\": 10.568536363534536,\r\n  \"flavour_warning\": false\r\n}\r\n```\r\nWithout the validator, it produces what I would expect:\r\n```\r\n{\r\n  \"id\": \"sing_qOYSyqZhfOcJKHsfVz7tnfP6M\",\r\n  \"created\": 1571357369,\r\n  \"updated\": 1571418480,\r\n  \"is_test\": false,\r\n  \"name\": \"Vitamin C\",\r\n  \"unit\": \"IU\",\r\n  \"unit_price\": 10.568536363534536,\r\n  \"flavour_warning\": false\r\n}\r\n```\r\n\r\nHow can I continue to use `@validator`s and maintain the expected JSON key ordering?\r\n\r\n**Edit**: I can pull out the validator into a 'mixin' class that I apply ONLY to the `IngredientIn` and `IngredientNew` models (leaving `IngredientOut` untouched). But is that my only path here?\n", "hints_text": "@samuelcolvin, @dmontagu mentioned that I should pose this question to you? Might I ask you to weigh in? Thank you!\nI don't see how validators could effect output order, but I could be wrong.\r\n\r\nCould you create a minimal example of the problem and ask on pydantic?\r\n\r\nThere are numerous fields referenced here that aren't in the example, and there's a complicated inheritance landscape that makes working out what's happening very complicated.\n@samuelcolvin if you look in `BaseModel._iter`, it is iterating over `self.__dict__`, which I believe is built up incrementally during the validation process. I thought having a `pre=True` validator could result in the key getting set earlier than it might otherwise, and then since dicts get iterated over in the order keys were added, that would explain the ordering change.\r\n\r\nThe example here doesn\u2019t use `pre=True` but I figured something related might be going on.\nMaybe I'm being dumb, but I don't think validators effect the order of `__fields__`.\n@samuelcolvin Yep, looking through the code I don't see an obvious way this could happen. Thanks for checking.\r\n\r\n@jaddison If you can produce a (small) self-contained reproducible example, I can look into this more.\n@dmontagu @samuelcolvin - thank you for looking into this.\r\n\r\nIt isn't (directly) pydantic-related - I replicated my model structure separately and could not reproduce. However...\r\n\r\nInstead, **it is related to the `response_model` parameter**; it must force a different method of validation?\r\n\r\nTo be specific:\r\n* if I remove the `response_model` parameter from the endpoint and return just an instance of that same pydantic model from the endpoint, the key ordering is as I would expect\r\n* reintroducing the `response_model` param manifests the key mis-ordering\r\n\r\n**EDIT**: To be clear, you still need to have the validator. However, the model inheritance is not a factor - I believe you can have a single model (no subclassing) with a field validator, and it ought to exhibit this behaviour still (I think)\nTiny sample, demonstrating the issue:\r\n```\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel, validator\r\n\r\napp = FastAPI()\r\n\r\nclass ValidatedModel(BaseModel):\r\n    one: str = None\r\n    two: str = None\r\n    three: str = None\r\n\r\n    @validator('two')\r\n    def validate_two(cls, v):\r\n        if v is '1':\r\n            raise ValueError\r\n        return v\r\n\r\n# @app.get(\"/\")\r\n@app.get(\"/\", response_model=ValidatedModel)\r\nasync def get():\r\n    return {\r\n        \"one\": \"one\",\r\n        \"two\": \"two\",\r\n        \"three\": \"three\"\r\n    }\r\n```\r\n\r\nNote that I am on Python 3.7.4.\nConfirmed the issue, and that the problem doesn't occur for `pydantic.json()` calls. It looks like this is related to the creation of the secured cloned model; if you drop the `response_model` argument to the decorator the order comes out the same with validator or without:\r\n\r\n```python\r\n@app.get(\"/\", response_model=None)\r\nasync def get():\r\n    return ValidatedModel(**{\r\n        \"one\": \"one\",\r\n        \"two\": \"two\",\r\n        \"three\": \"three\"\r\n    })\r\n```\r\n\r\nI think this will be addressed by https://github.com/samuelcolvin/pydantic/pull/812 (which I'll finish up once pydantic v1 is released) and we can refactor fastapi to make use of that functionality. (That change should also result in a >=2x speedup of serialization when specifying a `response_model`, assuming you return a valid BaseModel instance.)\nYep, I found the problem -- it is in `fastapi.utils`:\r\n\r\n```python\r\ndef create_cloned_field(field: Field) -> Field:\r\n    original_type = field.type_\r\n    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\r\n        original_type = original_type.__pydantic_model__  # type: ignore\r\n    use_type = original_type\r\n    if lenient_issubclass(original_type, BaseModel):\r\n        original_type = cast(Type[BaseModel], original_type)\r\n        use_type = create_model(\r\n            original_type.__name__,\r\n            __config__=original_type.__config__,\r\n            __validators__=original_type.__validators__,  # type: ignore\r\n        )\r\n        for f in original_type.__fields__.values():\r\n            use_type.__fields__[f.name] = f\r\n    ...\r\n```\r\nIt passes the validator fields first, then tacks on the non-validator fields. Actually, it overwrites them all, but because the `use_type.__fields__` already has the validated fields as keys, they remain at the start of dictionary (because of how dictionaries are ordered in python 3.6+).\r\n\r\nThe PR I linked above should help do away with the cloned field, which would resolve this issue.\r\n\r\n@jaddison It should be a relatively simple fix to get the field ordering right, and you could create a PR doing that if you really cared; that could probably be merged more quickly.\n@samuelcolvin, @dmontagu mentioned that I should pose this question to you? Might I ask you to weigh in? Thank you!\nI don't see how validators could effect output order, but I could be wrong.\r\n\r\nCould you create a minimal example of the problem and ask on pydantic?\r\n\r\nThere are numerous fields referenced here that aren't in the example, and there's a complicated inheritance landscape that makes working out what's happening very complicated.\n@samuelcolvin if you look in `BaseModel._iter`, it is iterating over `self.__dict__`, which I believe is built up incrementally during the validation process. I thought having a `pre=True` validator could result in the key getting set earlier than it might otherwise, and then since dicts get iterated over in the order keys were added, that would explain the ordering change.\r\n\r\nThe example here doesn\u2019t use `pre=True` but I figured something related might be going on.\nMaybe I'm being dumb, but I don't think validators effect the order of `__fields__`.\n@samuelcolvin Yep, looking through the code I don't see an obvious way this could happen. Thanks for checking.\r\n\r\n@jaddison If you can produce a (small) self-contained reproducible example, I can look into this more.\n@dmontagu @samuelcolvin - thank you for looking into this.\r\n\r\nIt isn't (directly) pydantic-related - I replicated my model structure separately and could not reproduce. However...\r\n\r\nInstead, **it is related to the `response_model` parameter**; it must force a different method of validation?\r\n\r\nTo be specific:\r\n* if I remove the `response_model` parameter from the endpoint and return just an instance of that same pydantic model from the endpoint, the key ordering is as I would expect\r\n* reintroducing the `response_model` param manifests the key mis-ordering\r\n\r\n**EDIT**: To be clear, you still need to have the validator. However, the model inheritance is not a factor - I believe you can have a single model (no subclassing) with a field validator, and it ought to exhibit this behaviour still (I think)\nTiny sample, demonstrating the issue:\r\n```\r\nfrom fastapi import FastAPI\r\nfrom pydantic import BaseModel, validator\r\n\r\napp = FastAPI()\r\n\r\nclass ValidatedModel(BaseModel):\r\n    one: str = None\r\n    two: str = None\r\n    three: str = None\r\n\r\n    @validator('two')\r\n    def validate_two(cls, v):\r\n        if v is '1':\r\n            raise ValueError\r\n        return v\r\n\r\n# @app.get(\"/\")\r\n@app.get(\"/\", response_model=ValidatedModel)\r\nasync def get():\r\n    return {\r\n        \"one\": \"one\",\r\n        \"two\": \"two\",\r\n        \"three\": \"three\"\r\n    }\r\n```\r\n\r\nNote that I am on Python 3.7.4.\nConfirmed the issue, and that the problem doesn't occur for `pydantic.json()` calls. It looks like this is related to the creation of the secured cloned model; if you drop the `response_model` argument to the decorator the order comes out the same with validator or without:\r\n\r\n```python\r\n@app.get(\"/\", response_model=None)\r\nasync def get():\r\n    return ValidatedModel(**{\r\n        \"one\": \"one\",\r\n        \"two\": \"two\",\r\n        \"three\": \"three\"\r\n    })\r\n```\r\n\r\nI think this will be addressed by https://github.com/samuelcolvin/pydantic/pull/812 (which I'll finish up once pydantic v1 is released) and we can refactor fastapi to make use of that functionality. (That change should also result in a >=2x speedup of serialization when specifying a `response_model`, assuming you return a valid BaseModel instance.)\nYep, I found the problem -- it is in `fastapi.utils`:\r\n\r\n```python\r\ndef create_cloned_field(field: Field) -> Field:\r\n    original_type = field.type_\r\n    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\r\n        original_type = original_type.__pydantic_model__  # type: ignore\r\n    use_type = original_type\r\n    if lenient_issubclass(original_type, BaseModel):\r\n        original_type = cast(Type[BaseModel], original_type)\r\n        use_type = create_model(\r\n            original_type.__name__,\r\n            __config__=original_type.__config__,\r\n            __validators__=original_type.__validators__,  # type: ignore\r\n        )\r\n        for f in original_type.__fields__.values():\r\n            use_type.__fields__[f.name] = f\r\n    ...\r\n```\r\nIt passes the validator fields first, then tacks on the non-validator fields. Actually, it overwrites them all, but because the `use_type.__fields__` already has the validated fields as keys, they remain at the start of dictionary (because of how dictionaries are ordered in python 3.6+).\r\n\r\nThe PR I linked above should help do away with the cloned field, which would resolve this issue.\r\n\r\n@jaddison It should be a relatively simple fix to get the field ordering right, and you could create a PR doing that if you really cared; that could probably be merged more quickly.", "created_at": "2019-10-21T23:06:37Z"}
{"repo": "fastapi/fastapi", "pull_number": 621, "instance_id": "fastapi__fastapi-621", "issue_numbers": ["259"], "base_commit": "65536cbf63318d111bf608960378d651b6c1596a", "patch": "diff --git a/docs/tutorial/additional-responses.md b/docs/tutorial/additional-responses.md\nindex a74e431f8b9b5..15ff23d6d979c 100644\n--- a/docs/tutorial/additional-responses.md\n+++ b/docs/tutorial/additional-responses.md\n@@ -174,6 +174,11 @@ For example, you can add an additional media type of `image/png`, declaring that\n !!! note\n     Notice that you have to return the image using a `FileResponse` directly.\n \n+!!! info\n+    Unless you specify a different media type explicitly in your `responses` parameter, FastAPI will assume the response has the same media type as the main response class (default `application/json`).\n+\n+    But if you have specified a custom response class with `None` as its media type, FastAPI will use `application/json` for any additional response that has an associated model.\n+\n ## Combining information\n \n You can also combine response information from multiple places, including the `response_model`, `status_code`, and `responses` parameters.\ndiff --git a/docs/tutorial/custom-response.md b/docs/tutorial/custom-response.md\nindex 600033f15ba99..2ab2b512cbcd9 100644\n--- a/docs/tutorial/custom-response.md\n+++ b/docs/tutorial/custom-response.md\n@@ -15,6 +15,9 @@ The contents that you return from your *path operation function* will be put ins\n \n And if that `Response` has a JSON media type (`application/json`), like is the case with the `JSONResponse` and `UJSONResponse`, the data you return will be automatically converted (and filtered) with any Pydantic `response_model` that you declared in the *path operation decorator*.\n \n+!!! note\n+    If you use a response class with no media type, FastAPI will expect your response to have no content, so it will not document the response format in its generated OpenAPI docs.\n+\n ## Use `UJSONResponse`\n \n For example, if you are squeezing performance, you can install and use `ujson` and set the response to be Starlette's `UJSONResponse`.\ndiff --git a/docs/tutorial/response-status-code.md b/docs/tutorial/response-status-code.md\nindex f87035ca7468d..45b82a254acce 100644\n--- a/docs/tutorial/response-status-code.md\n+++ b/docs/tutorial/response-status-code.md\n@@ -22,6 +22,10 @@ It will:\n \n <img src=\"/img/tutorial/response-status-code/image01.png\">\n \n+!!! note\n+    Some response codes (see the next section) indicate that the response does not have a body.\n+\n+    FastAPI knows this, and will produce OpenAPI docs that state there is no response body.\n \n ## About HTTP status codes\n \n@@ -34,11 +38,12 @@ These status codes have a name associated to recognize them, but the important p\n \n In short:\n \n-* `100` and above are for \"Information\". You rarely use them directly.\n+* `100` and above are for \"Information\". You rarely use them directly.  Responses with these status codes cannot have a body.\n * **`200`** and above are for \"Successful\" responses. These are the ones you would use the most.\n     * `200` is the default status code, which means everything was \"OK\".\n     * Another example would be `201`, \"Created\". It is commonly used after creating a new record in the database.\n-* `300` and above are for \"Redirection\". \n+    * A special case is `204`, \"No Content\".  This response is used when there is no content to return to the client, and so the response must not have a body.\n+* **`300`** and above are for \"Redirection\".  Responses with these status codes may or may not have a body, except for `304`, \"Not Modified\", which must not have one.\n * **`400`** and above are for \"Client error\" responses. These are the second type you would probably use the most.\n     * An example is `404`, for a \"Not Found\" response.\n     * For generic errors from the client, you can just use `400`.\ndiff --git a/fastapi/openapi/constants.py b/fastapi/openapi/constants.py\nindex 3b50b05bd963b..bba050a1a2295 100644\n--- a/fastapi/openapi/constants.py\n+++ b/fastapi/openapi/constants.py\n@@ -1,2 +1,3 @@\n METHODS_WITH_BODY = set((\"POST\", \"PUT\", \"DELETE\", \"PATCH\"))\n+STATUS_CODES_WITH_NO_BODY = set((100, 101, 102, 103, 204, 304))\n REF_PREFIX = \"#/components/schemas/\"\ndiff --git a/fastapi/openapi/utils.py b/fastapi/openapi/utils.py\nindex 89954f5b18801..311fb25a733f3 100644\n--- a/fastapi/openapi/utils.py\n+++ b/fastapi/openapi/utils.py\n@@ -5,7 +5,11 @@\n from fastapi.dependencies.models import Dependant\n from fastapi.dependencies.utils import get_flat_dependant\n from fastapi.encoders import jsonable_encoder\n-from fastapi.openapi.constants import METHODS_WITH_BODY, REF_PREFIX\n+from fastapi.openapi.constants import (\n+    METHODS_WITH_BODY,\n+    REF_PREFIX,\n+    STATUS_CODES_WITH_NO_BODY,\n+)\n from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n from fastapi.utils import (\n@@ -79,7 +83,7 @@ def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L\n \n \n def get_openapi_operation_parameters(\n-    all_route_params: Sequence[Field]\n+    all_route_params: Sequence[Field],\n ) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n@@ -151,10 +155,8 @@ def get_openapi_path(\n     security_schemes: Dict[str, Any] = {}\n     definitions: Dict[str, Any] = {}\n     assert route.methods is not None, \"Methods must be a list\"\n-    assert (\n-        route.response_class and route.response_class.media_type\n-    ), \"A response class with media_type is needed to generate OpenAPI\"\n-    route_response_media_type: str = route.response_class.media_type\n+    assert route.response_class, \"A response class is needed to generate OpenAPI\"\n+    route_response_media_type: Optional[str] = route.response_class.media_type\n     if route.include_in_schema:\n         for method in route.methods:\n             operation = get_openapi_operation_metadata(route=route, method=method)\n@@ -189,7 +191,7 @@ def get_openapi_path(\n                             field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                         )\n                         response.setdefault(\"content\", {}).setdefault(\n-                            route_response_media_type, {}\n+                            route_response_media_type or \"application/json\", {}\n                         )[\"schema\"] = response_schema\n                     status_text: Optional[str] = status_code_ranges.get(\n                         str(additional_status_code).upper()\n@@ -202,24 +204,28 @@ def get_openapi_path(\n                         status_code_key = \"default\"\n                     operation.setdefault(\"responses\", {})[status_code_key] = response\n             status_code = str(route.status_code)\n-            response_schema = {\"type\": \"string\"}\n-            if lenient_issubclass(route.response_class, JSONResponse):\n-                if route.response_field:\n-                    response_schema, _, _ = field_schema(\n-                        route.response_field,\n-                        model_name_map=model_name_map,\n-                        ref_prefix=REF_PREFIX,\n-                    )\n-                else:\n-                    response_schema = {}\n             operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                 \"description\"\n             ] = route.response_description\n-            operation.setdefault(\"responses\", {}).setdefault(\n-                status_code, {}\n-            ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n-                \"schema\"\n-            ] = response_schema\n+            if (\n+                route_response_media_type\n+                and route.status_code not in STATUS_CODES_WITH_NO_BODY\n+            ):\n+                response_schema = {\"type\": \"string\"}\n+                if lenient_issubclass(route.response_class, JSONResponse):\n+                    if route.response_field:\n+                        response_schema, _, _ = field_schema(\n+                            route.response_field,\n+                            model_name_map=model_name_map,\n+                            ref_prefix=REF_PREFIX,\n+                        )\n+                    else:\n+                        response_schema = {}\n+                operation.setdefault(\"responses\", {}).setdefault(\n+                    status_code, {}\n+                ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n+                    \"schema\"\n+                ] = response_schema\n \n             http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n             if (all_route_params or route.body_field) and not any(\ndiff --git a/fastapi/routing.py b/fastapi/routing.py\nindex 2a4e0bc8d4f2e..b2a900b7e0102 100644\n--- a/fastapi/routing.py\n+++ b/fastapi/routing.py\n@@ -13,6 +13,7 @@\n )\n from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n+from fastapi.openapi.constants import STATUS_CODES_WITH_NO_BODY\n from fastapi.utils import create_cloned_field, generate_operation_id_for_path\n from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n@@ -215,6 +216,9 @@ def __init__(\n         )\n         self.response_model = response_model\n         if self.response_model:\n+            assert (\n+                status_code not in STATUS_CODES_WITH_NO_BODY\n+            ), f\"Status code {status_code} must not have a response body\"\n             response_name = \"Response_\" + self.unique_id\n             self.response_field: Optional[Field] = Field(\n                 name=response_name,\n@@ -256,6 +260,9 @@ def __init__(\n             assert isinstance(response, dict), \"An additional response must be a dict\"\n             model = response.get(\"model\")\n             if model:\n+                assert (\n+                    additional_status_code not in STATUS_CODES_WITH_NO_BODY\n+                ), f\"Status code {additional_status_code} must not have a response body\"\n                 assert lenient_issubclass(\n                     model, BaseModel\n                 ), \"A response model must be a Pydantic model\"\n", "test_patch": "diff --git a/tests/test_response_class_no_mediatype.py b/tests/test_response_class_no_mediatype.py\nnew file mode 100644\nindex 0000000000000..d5e35f38856ce\n--- /dev/null\n+++ b/tests/test_response_class_no_mediatype.py\n@@ -0,0 +1,114 @@\n+import typing\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse, Response\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class JsonApiResponse(JSONResponse):\n+    media_type = \"application/vnd.api+json\"\n+\n+\n+class Error(BaseModel):\n+    status: str\n+    title: str\n+\n+\n+class JsonApiError(BaseModel):\n+    errors: typing.List[Error]\n+\n+\n+@app.get(\n+    \"/a\",\n+    response_class=Response,\n+    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n+)\n+async def a():\n+    pass  # pragma: no cover\n+\n+\n+@app.get(\"/b\", responses={500: {\"description\": \"Error\", \"model\": Error}})\n+async def b():\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\"description\": \"Successful Response\"},\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a_get\",\n+            }\n+        },\n+        \"/b\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Error\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"B\",\n+                \"operationId\": \"b_b_get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Error\": {\n+                \"title\": \"Error\",\n+                \"required\": [\"status\", \"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                },\n+            },\n+            \"JsonApiError\": {\n+                \"title\": \"JsonApiError\",\n+                \"required\": [\"errors\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"errors\": {\n+                        \"title\": \"Errors\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\ndiff --git a/tests/test_response_code_no_body.py b/tests/test_response_code_no_body.py\nnew file mode 100644\nindex 0000000000000..19a59df36081e\n--- /dev/null\n+++ b/tests/test_response_code_no_body.py\n@@ -0,0 +1,108 @@\n+import typing\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class JsonApiResponse(JSONResponse):\n+    media_type = \"application/vnd.api+json\"\n+\n+\n+class Error(BaseModel):\n+    status: str\n+    title: str\n+\n+\n+class JsonApiError(BaseModel):\n+    errors: typing.List[Error]\n+\n+\n+@app.get(\n+    \"/a\",\n+    status_code=204,\n+    response_class=JsonApiResponse,\n+    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n+)\n+async def a():\n+    pass  # pragma: no cover\n+\n+\n+@app.get(\"/b\", responses={204: {\"description\": \"No Content\"}})\n+async def b():\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/vnd.api+json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                            }\n+                        },\n+                    },\n+                    \"204\": {\"description\": \"Successful Response\"},\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a_get\",\n+            }\n+        },\n+        \"/b\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"204\": {\"description\": \"No Content\"},\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"B\",\n+                \"operationId\": \"b_b_get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Error\": {\n+                \"title\": \"Error\",\n+                \"required\": [\"status\", \"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                },\n+            },\n+            \"JsonApiError\": {\n+                \"title\": \"JsonApiError\",\n+                \"required\": [\"errors\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"errors\": {\n+                        \"title\": \"Errors\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n", "problem_statement": "204 No Content support for OpenAPI schema\nI would like to be able to specify in the endpoint decorator that the endpoint will have no response (204 No Content). This is documented in the [swagger.io specification](https://swagger.io/docs/specification/describing-responses/) under the heading Empty Response Body.\r\n\r\n**Is your feature request related to a problem? Please describe.**\r\nThis would allow my `openapi-generator`-generated client to detect that there will not be a response, and will automatically make use of an appropriate response (non-)decoder. \r\n\r\nIt's not a terribly hard issue to work around manually by tweaking my generated client, but it would simplify things if I could generate an OpenAPI schema without the content field for the 204-response endpoints.\r\n\r\n**Describe the solution you'd like**\r\nSo far, my favorite version of an end-user-facing API would involve introducing a new response class (perhaps called `NoContentResponse`) to pass in the endpoint decorator. \r\n\r\n(But I'm not sure how that would interact with `starlette` or if detecting the response_class is even feasible when generating the OpenAPI spec.)\n", "hints_text": "I see. I'll check it.\nAny news on this issue? I'm facing the same problem and tried something like\r\n\r\n```python\r\n        HTTP_204_NO_CONTENT: dict(\r\n            description=\"Successful action.\",\r\n            content=None,\r\n        )\r\n```\r\nWhich only lead to `AttributeError: 'NoneType' object has no attribute 'setdefault'`.\r\n\r\nThis seemed like an intuitive way to me, but it would be even more intuitive if no content was the default for a 204 with a warning for the user if he declared `content` explicitly.\nI just ran into this as well.  I have an idea about how to make `get_openapi_path` for response codes that don't allow bodies or additional status codes that don't specify body parameters.  That would be backward-compatible with existing code, and would make decorators such as:\r\n```python\r\n@app.delete('/frotz/{fid}', status_code=204)\r\n```\r\nand\r\n```python\r\n@app.post(\r\n    '/frotz/', \r\n    status_code=201,\r\n    responses={302: {'description': 'Such a frotz already exists'}\r\n)\r\n```\r\ndo the right thing.\r\n ", "created_at": "2019-10-14T06:53:04Z"}
{"repo": "fastapi/fastapi", "pull_number": 598, "instance_id": "fastapi__fastapi-598", "issue_numbers": ["597"], "base_commit": "5592fa0f6f6b9c9b3ae774d80adb8163fcdedfdf", "patch": "diff --git a/mkdocs.yml b/mkdocs.yml\nindex b4c2ec1521949..b5e85e5369064 100644\n--- a/mkdocs.yml\n+++ b/mkdocs.yml\n@@ -1,5 +1,6 @@\n site_name: FastAPI\n site_description: FastAPI framework, high performance, easy to learn, fast to code, ready for production\n+site_url: https://fastapi.tiangolo.com/\n \n theme:\n     name: 'material'\n", "test_patch": "", "problem_statement": "help site sitemap is invalid\nSee https://fastapi.tiangolo.com/sitemap.xml\r\n\r\n`loc` is missing. This may be a problem with the theme, but [their sitemap](https://squidfunk.github.io/mkdocs-material/) does not have the same problem.\r\n\r\n```xml\r\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\r\n<url>\r\n<loc>None</loc>\r\n<lastmod>2019-10-07</lastmod>\r\n<changefreq>daily</changefreq>\r\n</url>\r\n<url>\r\n<loc>None</loc>\r\n<lastmod>2019-10-07</lastmod>\r\n<changefreq>daily</changefreq>\r\n</url>\r\n<url>\r\n<loc>None</loc>\r\n<lastmod>2019-10-07</lastmod>\r\n<changefreq>daily</changefreq>\r\n</url>\r\n<url>\r\n<loc>None</loc>\r\n<lastmod>2019-10-07</lastmod>\r\n<changefreq>daily</changefreq>\r\n</url>\r\n<url>\r\n<loc>None</loc>\r\n<lastmod>2019-10-07</lastmod>\r\n<changefreq>daily</changefreq>\r\n</url>\r\n...\r\n```\r\n\n", "hints_text": "", "created_at": "2019-10-07T13:03:19Z"}
{"repo": "fastapi/fastapi", "pull_number": 538, "instance_id": "fastapi__fastapi-538", "issue_numbers": ["539"], "base_commit": "f5ccb3c35d4ee87f61b0c03c8e4b0c24edffac60", "patch": "diff --git a/fastapi/routing.py b/fastapi/routing.py\nindex aeafd07187e81..51b1ef9d6e137 100644\n--- a/fastapi/routing.py\n+++ b/fastapi/routing.py\n@@ -345,8 +345,10 @@ def add_api_route(\n         include_in_schema: bool = True,\n         response_class: Type[Response] = None,\n         name: str = None,\n+        route_class_override: Optional[Type[APIRoute]] = None,\n     ) -> None:\n-        route = self.route_class(\n+        route_class = route_class_override or self.route_class\n+        route = route_class(\n             path,\n             endpoint=endpoint,\n             response_model=response_model,\n@@ -484,6 +486,7 @@ def include_router(\n                     include_in_schema=route.include_in_schema,\n                     response_class=route.response_class or default_response_class,\n                     name=route.name,\n+                    route_class_override=type(route),\n                 )\n             elif isinstance(route, routing.Route):\n                 self.add_route(\n", "test_patch": "diff --git a/tests/test_custom_route_class.py b/tests/test_custom_route_class.py\nnew file mode 100644\nindex 0000000000000..8bbf88ad30f2c\n--- /dev/null\n+++ b/tests/test_custom_route_class.py\n@@ -0,0 +1,114 @@\n+import pytest\n+from fastapi import APIRouter, FastAPI\n+from fastapi.routing import APIRoute\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class APIRouteA(APIRoute):\n+    x_type = \"A\"\n+\n+\n+class APIRouteB(APIRoute):\n+    x_type = \"B\"\n+\n+\n+class APIRouteC(APIRoute):\n+    x_type = \"C\"\n+\n+\n+router_a = APIRouter(route_class=APIRouteA)\n+router_b = APIRouter(route_class=APIRouteB)\n+router_c = APIRouter(route_class=APIRouteC)\n+\n+\n+@router_a.get(\"/\")\n+def get_a():\n+    return {\"msg\": \"A\"}\n+\n+\n+@router_b.get(\"/\")\n+def get_b():\n+    return {\"msg\": \"B\"}\n+\n+\n+@router_c.get(\"/\")\n+def get_c():\n+    return {\"msg\": \"C\"}\n+\n+\n+router_b.include_router(router=router_c, prefix=\"/c\")\n+router_a.include_router(router=router_b, prefix=\"/b\")\n+app.include_router(router=router_a, prefix=\"/a\")\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Get A\",\n+                \"operationId\": \"get_a_a__get\",\n+            }\n+        },\n+        \"/a/b/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Get B\",\n+                \"operationId\": \"get_b_a_b__get\",\n+            }\n+        },\n+        \"/a/b/c/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Get C\",\n+                \"operationId\": \"get_c_a_b_c__get\",\n+            }\n+        },\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/a\", 200, {\"msg\": \"A\"}),\n+        (\"/a/b\", 200, {\"msg\": \"B\"}),\n+        (\"/a/b/c\", 200, {\"msg\": \"C\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_route_classes():\n+    routes = {}\n+    r: APIRoute\n+    for r in app.router.routes:\n+        routes[r.path] = r\n+    assert routes[\"/a/\"].x_type == \"A\"\n+    assert routes[\"/a/b/\"].x_type == \"B\"\n+    assert routes[\"/a/b/c/\"].x_type == \"C\"\n", "problem_statement": "route_class not preserved when calling APIRouter.include_router\n**Describe the bug**\r\n\r\nWhen calling `APIRouter.include_router`, the class of the included routes should be preserved. Right now, this is not the case -- the `route_class` of the parent router is used. This means that the `route_class` is lost on inclusion if one isn't careful. Worse, it means that even if you manually create a router with multiple route-types present, there is no way to include that router in another without changing the route type of some of the routes.\r\n\r\nSee the `include_typed_router` function from #521 for an example of how this currently requires a workaround.\r\n\r\nI have addressed this in the short PR #538, but wanted to create an issue for discussion in case there is any reason to preserve the current behavior.\n", "hints_text": "", "created_at": "2019-09-17T04:51:53Z"}
{"repo": "fastapi/fastapi", "pull_number": 493, "instance_id": "fastapi__fastapi-493", "issue_numbers": ["492", "492"], "base_commit": "203e10596f7de81eda52925113440ebc9a1278a0", "patch": "diff --git a/fastapi/exceptions.py b/fastapi/exceptions.py\nindex a85dfa82c1934..310da940d8e8f 100644\n--- a/fastapi/exceptions.py\n+++ b/fastapi/exceptions.py\n@@ -2,8 +2,8 @@\n \n from pydantic import ValidationError\n from pydantic.error_wrappers import ErrorList\n-from requests import Request\n from starlette.exceptions import HTTPException as StarletteHTTPException\n+from starlette.requests import Request\n from starlette.websockets import WebSocket\n \n \n", "test_patch": "", "problem_statement": "FastAPI exceptions module mistakenly references the 'requests' package\n**Describe the bug**\r\nStarting up a FastAPI 0.38.0 app displays the following error:\r\n\r\n```python\r\nfrom fastapi import FastAPI\r\n  File \".../lib/site-packages/fastapi/__init__.py\", line 7, in <module>\r\n    from .applications import FastAPI\r\n  File \".../lib/site-packages/fastapi/applications.py\", line 3, in <module>\r\n    from fastapi import routing\r\n  File \".../lib/site-packages/fastapi/routing.py\", line 7, in <module>\r\n    from fastapi.dependencies.models import Dependant\r\n  File \".../lib/site-packages/fastapi/dependencies/models.py\", line 3, in <module>\r\n    from fastapi.security.base import SecurityBase\r\n  File \".../lib/site-packages/fastapi/security/__init__.py\", line 2, in <module>\r\n    from .http import (\r\n  File \".../lib/site-packages/fastapi/security/http.py\", line 5, in <module>\r\n    from fastapi.exceptions import HTTPException\r\n  File \".../lib/site-packages/fastapi/exceptions.py\", line 5, in <module>\r\n    from requests import Request\r\nModuleNotFoundError: No module named 'requests'\r\n```\r\n\r\n**Expected behavior**\r\nThe app should start without import errors.\r\n\r\n**Environment:**\r\n - OS: Linux, Windows, and macOS\r\n - FastAPI Version: 0.38.0\r\n\r\n**Additional context**\r\nIt's likely the `from requests import Request` should be replaced with `from starlette.requests import Request` in line 5 of `fastapi/exceptions.py`\nFastAPI exceptions module mistakenly references the 'requests' package\n**Describe the bug**\r\nStarting up a FastAPI 0.38.0 app displays the following error:\r\n\r\n```python\r\nfrom fastapi import FastAPI\r\n  File \".../lib/site-packages/fastapi/__init__.py\", line 7, in <module>\r\n    from .applications import FastAPI\r\n  File \".../lib/site-packages/fastapi/applications.py\", line 3, in <module>\r\n    from fastapi import routing\r\n  File \".../lib/site-packages/fastapi/routing.py\", line 7, in <module>\r\n    from fastapi.dependencies.models import Dependant\r\n  File \".../lib/site-packages/fastapi/dependencies/models.py\", line 3, in <module>\r\n    from fastapi.security.base import SecurityBase\r\n  File \".../lib/site-packages/fastapi/security/__init__.py\", line 2, in <module>\r\n    from .http import (\r\n  File \".../lib/site-packages/fastapi/security/http.py\", line 5, in <module>\r\n    from fastapi.exceptions import HTTPException\r\n  File \".../lib/site-packages/fastapi/exceptions.py\", line 5, in <module>\r\n    from requests import Request\r\nModuleNotFoundError: No module named 'requests'\r\n```\r\n\r\n**Expected behavior**\r\nThe app should start without import errors.\r\n\r\n**Environment:**\r\n - OS: Linux, Windows, and macOS\r\n - FastAPI Version: 0.38.0\r\n\r\n**Additional context**\r\nIt's likely the `from requests import Request` should be replaced with `from starlette.requests import Request` in line 5 of `fastapi/exceptions.py`\n", "hints_text": "Sorry about this! (It was my PR that caused the problem.) \r\n\r\nThis is the correct fix. @tiangolo this should probably be released as a patch.\nSorry about this! (It was my PR that caused the problem.) \r\n\r\nThis is the correct fix. @tiangolo this should probably be released as a patch.", "created_at": "2019-08-31T18:33:37Z"}
{"repo": "fastapi/fastapi", "pull_number": 454, "instance_id": "fastapi__fastapi-454", "issue_numbers": ["265"], "base_commit": "033bc2a6c9aec3a245eb1f1b4fadb2fbb7a514b8", "patch": "diff --git a/fastapi/utils.py b/fastapi/utils.py\nindex de0260615ee00..17a16b5227687 100644\n--- a/fastapi/utils.py\n+++ b/fastapi/utils.py\n@@ -1,4 +1,5 @@\n import re\n+from dataclasses import is_dataclass\n from typing import Any, Dict, List, Sequence, Set, Type, cast\n \n from fastapi import routing\n@@ -52,6 +53,8 @@ def get_path_param_names(path: str) -> Set[str]:\n \n def create_cloned_field(field: Field) -> Field:\n     original_type = field.type_\n+    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n+        original_type = original_type.__pydantic_model__  # type: ignore\n     use_type = original_type\n     if lenient_issubclass(original_type, BaseModel):\n         original_type = cast(Type[BaseModel], original_type)\n", "test_patch": "diff --git a/tests/test_serialize_response.py b/tests/test_serialize_response.py\nindex c0382b899438a..5fff871f0f0ca 100644\n--- a/tests/test_serialize_response.py\n+++ b/tests/test_serialize_response.py\n@@ -1,8 +1,7 @@\n from typing import List\n \n-import pytest\n from fastapi import FastAPI\n-from pydantic import BaseModel, ValidationError\n+from pydantic import BaseModel\n from starlette.testclient import TestClient\n \n app = FastAPI()\n@@ -14,38 +13,45 @@ class Item(BaseModel):\n     owner_ids: List[int] = None\n \n \n-@app.get(\"/items/invalid\", response_model=Item)\n-def get_invalid():\n-    return {\"name\": \"invalid\", \"price\": \"foo\"}\n+@app.get(\"/items/valid\", response_model=Item)\n+def get_valid():\n+    return {\"name\": \"valid\", \"price\": 1.0}\n \n \n-@app.get(\"/items/innerinvalid\", response_model=Item)\n-def get_innerinvalid():\n-    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n+@app.get(\"/items/coerce\", response_model=Item)\n+def get_coerce():\n+    return {\"name\": \"coerce\", \"price\": \"1.0\"}\n \n \n-@app.get(\"/items/invalidlist\", response_model=List[Item])\n-def get_invalidlist():\n+@app.get(\"/items/validlist\", response_model=List[Item])\n+def get_validlist():\n     return [\n         {\"name\": \"foo\"},\n-        {\"name\": \"bar\", \"price\": \"bar\"},\n-        {\"name\": \"baz\", \"price\": \"baz\"},\n+        {\"name\": \"bar\", \"price\": 1.0},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n     ]\n \n \n client = TestClient(app)\n \n \n-def test_invalid():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/items/invalid\")\n+def test_valid():\n+    response = client.get(\"/items/valid\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n \n \n-def test_double_invalid():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/items/innerinvalid\")\n+def test_coerce():\n+    response = client.get(\"/items/coerce\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"coerce\", \"price\": 1.0, \"owner_ids\": None}\n \n \n-def test_invalid_list():\n-    with pytest.raises(ValidationError):\n-        client.get(\"/items/invalidlist\")\n+def test_validlist():\n+    response = client.get(\"/items/validlist\")\n+    response.raise_for_status()\n+    assert response.json() == [\n+        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n+        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\ndiff --git a/tests/test_serialize_response_dataclass.py b/tests/test_serialize_response_dataclass.py\nnew file mode 100644\nindex 0000000000000..ee701f9696f77\n--- /dev/null\n+++ b/tests/test_serialize_response_dataclass.py\n@@ -0,0 +1,58 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic.dataclasses import dataclass\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@dataclass\n+class Item:\n+    name: str\n+    price: float = None\n+    owner_ids: List[int] = None\n+\n+\n+@app.get(\"/items/valid\", response_model=Item)\n+def get_valid():\n+    return {\"name\": \"valid\", \"price\": 1.0}\n+\n+\n+@app.get(\"/items/coerce\", response_model=Item)\n+def get_coerce():\n+    return {\"name\": \"coerce\", \"price\": \"1.0\"}\n+\n+\n+@app.get(\"/items/validlist\", response_model=List[Item])\n+def get_validlist():\n+    return [\n+        {\"name\": \"foo\"},\n+        {\"name\": \"bar\", \"price\": 1.0},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_valid():\n+    response = client.get(\"/items/valid\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n+\n+\n+def test_coerce():\n+    response = client.get(\"/items/coerce\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"coerce\", \"price\": 1.0, \"owner_ids\": None}\n+\n+\n+def test_validlist():\n+    response = client.get(\"/items/validlist\")\n+    response.raise_for_status()\n+    assert response.json() == [\n+        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n+        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\ndiff --git a/tests/test_validate_response.py b/tests/test_validate_response.py\nnew file mode 100644\nindex 0000000000000..c0382b899438a\n--- /dev/null\n+++ b/tests/test_validate_response.py\n@@ -0,0 +1,51 @@\n+from typing import List\n+\n+import pytest\n+from fastapi import FastAPI\n+from pydantic import BaseModel, ValidationError\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float = None\n+    owner_ids: List[int] = None\n+\n+\n+@app.get(\"/items/invalid\", response_model=Item)\n+def get_invalid():\n+    return {\"name\": \"invalid\", \"price\": \"foo\"}\n+\n+\n+@app.get(\"/items/innerinvalid\", response_model=Item)\n+def get_innerinvalid():\n+    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n+\n+\n+@app.get(\"/items/invalidlist\", response_model=List[Item])\n+def get_invalidlist():\n+    return [\n+        {\"name\": \"foo\"},\n+        {\"name\": \"bar\", \"price\": \"bar\"},\n+        {\"name\": \"baz\", \"price\": \"baz\"},\n+    ]\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalid\")\n+\n+\n+def test_double_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/innerinvalid\")\n+\n+\n+def test_invalid_list():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalidlist\")\ndiff --git a/tests/test_validate_response_dataclass.py b/tests/test_validate_response_dataclass.py\nnew file mode 100644\nindex 0000000000000..4a066416a6ab1\n--- /dev/null\n+++ b/tests/test_validate_response_dataclass.py\n@@ -0,0 +1,53 @@\n+from typing import List\n+\n+import pytest\n+from fastapi import FastAPI\n+from pydantic import ValidationError\n+from pydantic.dataclasses import dataclass\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@dataclass\n+class Item:\n+    name: str\n+    price: float = None\n+    owner_ids: List[int] = None\n+\n+\n+@app.get(\"/items/invalid\", response_model=Item)\n+def get_invalid():\n+    return {\"name\": \"invalid\", \"price\": \"foo\"}\n+\n+\n+@app.get(\"/items/innerinvalid\", response_model=Item)\n+def get_innerinvalid():\n+    return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n+\n+\n+@app.get(\"/items/invalidlist\", response_model=List[Item])\n+def get_invalidlist():\n+    return [\n+        {\"name\": \"foo\"},\n+        {\"name\": \"bar\", \"price\": \"bar\"},\n+        {\"name\": \"baz\", \"price\": \"baz\"},\n+    ]\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalid\")\n+\n+\n+def test_double_invalid():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/innerinvalid\")\n+\n+\n+def test_invalid_list():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalidlist\")\n", "problem_statement": "Add support for Pydantic's dataclasses\n**Describe the question**\r\nI am using a  pydantic.dataclasses.dataclass as a response_model of my fast api route.\r\n\r\n\r\n```\r\nfrom fastapi import FastAPI\r\nfrom pydantic.dataclasses import dataclass\r\n\r\n\r\n@dataclass\r\nclass Foo:\r\n    bar: int\r\n\r\napp = FastAPI()\r\n\r\n@app.get('/foo', response_model=Foo)\r\ndef get_bar() -> Foo:\r\n    return Foo(bar=1)\r\n```\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create a file **app.py** with the above code.\r\n2. Start the app: `uvicorn app:app`\r\n3. Open the browser and go to **localhost:8000/foo**\r\n4. See error: \r\n```\r\npydantic.error_wrappers.ValidationError: 1 validation error\r\nresponse\r\n  __init__() got an unexpected keyword argument '__initialised__' (type=type_error)\r\n```\r\n\r\n**Expected behavior**\r\nNo validation error and serialized json does not contain any keys `__initialised__`.\r\n\r\n\r\n**Environment:**\r\n - OS: Linux\r\n - FastAPI Version 0.25.0\r\n- Python version 3.7.3\r\n\n", "hints_text": "**Possible solution**\r\n\r\nAdd the following to jsonable_encoder in fastapi.encoders:\r\n\r\n```\r\nfrom dataclasses import is_dataclass, asdict\r\n\r\ndef jsonable_encoder(\r\n    obj: Any,\r\n    include: Set[str] = None,\r\n    exclude: Set[str] = set(),\r\n    by_alias: bool = True,\r\n    skip_defaults: bool = False,\r\n    include_none: bool = True,\r\n    custom_encoder: dict = {},\r\n    sqlalchemy_safe: bool = True,\r\n) -> Any:\r\n...\r\n    if is_dataclass(obj):\r\n        return asdict(obj)\r\n```\nThank you. Pydantic's dataclasses are not supported yet. They probably will be at some point.\nAny updates on this?\nUsing pydantic BaseModel vs dataclass causes tremendous slowdown as well in my codebase.\n@manojlds which one is slower?\n\ud83d\udc4d for this.  I have a backend code base that heavily relies on pydantic dataclasses.\r\n\r\nJust a thought, the way pydantic dataclasses are handled is by putting the `BaseModel` subclass at `cls.__pydantic_model__`, e.g.:\r\n\r\n```python\r\nfrom pydantic.dataclasses import dataclass\r\nfrom pydantic import BaseModel\r\n\r\n@dataclass\r\nclass Foobar:\r\n    pass\r\n\r\nassert issubclass(Foobar.__pydantic_model__, BaseModel)\r\n```\r\n\r\nCould this be solved with a simple:\r\n```python\r\nif isdataclass(cls) and hasattr(cls, \"__pydantic_model__\"):\r\n    cls = cls.__pydantic_model__\r\n```\r\nSomewhere?\nMaybe part of https://github.com/tiangolo/fastapi/blob/master/fastapi/utils.py#L53 ?", "created_at": "2019-08-21T17:34:14Z"}
{"repo": "fastapi/fastapi", "pull_number": 439, "instance_id": "fastapi__fastapi-439", "issue_numbers": ["431"], "base_commit": "033bc2a6c9aec3a245eb1f1b4fadb2fbb7a514b8", "patch": "diff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex c898ab7db51d8..99090e0c584a2 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -546,6 +546,8 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n     for f in flat_dependant.body_params:\n         BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n     required = any(True for f in flat_dependant.body_params if f.required)\n+\n+    BodySchema_kwargs: Dict[str, Any] = dict(default=None)\n     if any(isinstance(f.schema, params.File) for f in flat_dependant.body_params):\n         BodySchema: Type[params.Body] = params.File\n     elif any(isinstance(f.schema, params.Form) for f in flat_dependant.body_params):\n@@ -553,6 +555,14 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n     else:\n         BodySchema = params.Body\n \n+        body_param_media_types = [\n+            getattr(f.schema, \"media_type\")\n+            for f in flat_dependant.body_params\n+            if isinstance(f.schema, params.Body)\n+        ]\n+        if len(set(body_param_media_types)) == 1:\n+            BodySchema_kwargs[\"media_type\"] = body_param_media_types[0]\n+\n     field = Field(\n         name=\"body\",\n         type_=BodyModel,\n@@ -561,6 +571,6 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n         model_config=BaseConfig,\n         class_validators={},\n         alias=\"body\",\n-        schema=BodySchema(None),\n+        schema=BodySchema(**BodySchema_kwargs),\n     )\n     return field\n", "test_patch": "diff --git a/tests/test_request_body_parameters_media_type.py b/tests/test_request_body_parameters_media_type.py\nnew file mode 100644\nindex 0000000000000..89b98b2203cca\n--- /dev/null\n+++ b/tests/test_request_body_parameters_media_type.py\n@@ -0,0 +1,67 @@\n+import typing\n+\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+media_type = \"application/vnd.api+json\"\n+\n+# NOTE: These are not valid JSON:API resources\n+# but they are fine for testing requestBody with custom media_type\n+class Product(BaseModel):\n+    name: str\n+    price: float\n+\n+\n+class Shop(BaseModel):\n+    name: str\n+\n+\n+@app.post(\"/products\")\n+async def create_product(data: Product = Body(..., media_type=media_type, embed=True)):\n+    pass  # pragma: no cover\n+\n+\n+@app.post(\"/shops\")\n+async def create_shop(\n+    data: Shop = Body(..., media_type=media_type),\n+    included: typing.List[Product] = Body([], media_type=media_type),\n+):\n+    pass  # pragma: no cover\n+\n+\n+create_product_request_body = {\n+    \"content\": {\n+        \"application/vnd.api+json\": {\n+            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_product_products_post\"}\n+        }\n+    },\n+    \"required\": True,\n+}\n+\n+create_shop_request_body = {\n+    \"content\": {\n+        \"application/vnd.api+json\": {\n+            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_shop_shops_post\"}\n+        }\n+    },\n+    \"required\": True,\n+}\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    openapi_schema = response.json()\n+    assert (\n+        openapi_schema[\"paths\"][\"/products\"][\"post\"][\"requestBody\"]\n+        == create_product_request_body\n+    )\n+    assert (\n+        openapi_schema[\"paths\"][\"/shops\"][\"post\"][\"requestBody\"]\n+        == create_shop_request_body\n+    )\n", "problem_statement": "OpenAPI: media_types of Body parameters and requestBody do not match\n**Describe the bug**\r\nThe openapi.json for requestBody definitions uses the FastAPI default media_type instead of the defined one in the Body parameter(s).\r\n\r\n**To Reproduce**\r\nCreate a path with request body that has either a single embedded parameter or multiple ones. List media_type that is different than the default application/json is. \r\n\r\n```python\r\nfrom fastapi import FastAPI\r\nfrom starlette import status\r\nfrom . import schemas\r\n\r\napp = FastAPI()\r\n\r\n@app.post('/customers',\r\n         status_code=status.HTTP_201_CREATED,\r\n         )\r\ndef customer_create(data: schemas.Customer = Body(..., media_type='application/vnd+json.api', embed=True)):\r\n    created_customer = {**data.dict(), **{'id': '1'}}\r\n    return {'data': created_customer}\r\n```\r\n\r\nThen verify your openapi.json.\r\n\r\n```yaml\r\n# ...\r\npost:\r\n  responses:\r\n    # ...\r\n  summary: Customer Create\r\n  operationId: customer_create_api_customers_post\r\n  requestBody:\r\n    content:\r\n      application/json: # this should be different\r\n        schema:\r\n          \"$ref\": \"#/components/schemas/Body_customer_create_api_customers_post\"\r\n    required: true\r\n```\r\n\r\n**Expected behavior**\r\nThe media_type of the requestBody of given path matches the specified one:\r\n\r\n```yaml\r\n# ...\r\npost:\r\n  responses:\r\n    # ...\r\n  summary: Customer Create\r\n  operationId: customer_create_api_customers_post\r\n  requestBody:\r\n    content:\r\n      application/vnd+json.api:\r\n        schema:\r\n          \"$ref\": \"#/components/schemas/Body_customer_create_api_customers_post\"\r\n    required: true\r\n```\r\n\r\n**Environment:**\r\n - OS: masOS 10.14.6\r\n - Python: 3.6.5\r\n - FastAPI: 0.35.0\n", "hints_text": "", "created_at": "2019-08-15T07:13:04Z"}
{"repo": "fastapi/fastapi", "pull_number": 437, "instance_id": "fastapi__fastapi-437", "issue_numbers": ["429"], "base_commit": "033bc2a6c9aec3a245eb1f1b4fadb2fbb7a514b8", "patch": "diff --git a/fastapi/openapi/utils.py b/fastapi/openapi/utils.py\nindex 9c043103dc0b7..639cc39776603 100644\n--- a/fastapi/openapi/utils.py\n+++ b/fastapi/openapi/utils.py\n@@ -71,15 +71,11 @@ def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L\n \n def get_openapi_operation_parameters(\n     all_route_params: Sequence[Field]\n-) -> Tuple[Dict[str, Dict], List[Dict[str, Any]]]:\n-    definitions: Dict[str, Dict] = {}\n+) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n         schema = param.schema\n         schema = cast(Param, schema)\n-        if \"ValidationError\" not in definitions:\n-            definitions[\"ValidationError\"] = validation_error_definition\n-            definitions[\"HTTPValidationError\"] = validation_error_response_definition\n         parameter = {\n             \"name\": param.alias,\n             \"in\": schema.in_.value,\n@@ -91,7 +87,7 @@ def get_openapi_operation_parameters(\n         if schema.deprecated:\n             parameter[\"deprecated\"] = schema.deprecated\n         parameters.append(parameter)\n-    return definitions, parameters\n+    return parameters\n \n \n def get_openapi_operation_request_body(\n@@ -159,10 +155,7 @@ def get_openapi_path(\n             if security_definitions:\n                 security_schemes.update(security_definitions)\n             all_route_params = get_openapi_params(route.dependant)\n-            validation_definitions, operation_parameters = get_openapi_operation_parameters(\n-                all_route_params=all_route_params\n-            )\n-            definitions.update(validation_definitions)\n+            operation_parameters = get_openapi_operation_parameters(all_route_params)\n             parameters.extend(operation_parameters)\n             if parameters:\n                 operation[\"parameters\"] = parameters\n@@ -172,11 +165,6 @@ def get_openapi_path(\n                 )\n                 if request_body_oai:\n                     operation[\"requestBody\"] = request_body_oai\n-                    if \"ValidationError\" not in definitions:\n-                        definitions[\"ValidationError\"] = validation_error_definition\n-                        definitions[\n-                            \"HTTPValidationError\"\n-                        ] = validation_error_response_definition\n             if route.responses:\n                 for (additional_status_code, response) in route.responses.items():\n                     assert isinstance(\n@@ -188,7 +176,7 @@ def get_openapi_path(\n                             field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                         )\n                         response.setdefault(\"content\", {}).setdefault(\n-                            \"application/json\", {}\n+                            route.response_class.media_type, {}\n                         )[\"schema\"] = response_schema\n                     status_text = http.client.responses.get(int(additional_status_code))\n                     response.setdefault(\n@@ -216,8 +204,15 @@ def get_openapi_path(\n             ).setdefault(\"content\", {}).setdefault(route.response_class.media_type, {})[\n                 \"schema\"\n             ] = response_schema\n-            if all_route_params or route.body_field:\n-                operation[\"responses\"][str(HTTP_422_UNPROCESSABLE_ENTITY)] = {\n+\n+            http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n+            if (all_route_params or route.body_field) and not any(\n+                [\n+                    status in operation[\"responses\"]\n+                    for status in [http422, \"4xx\", \"default\"]\n+                ]\n+            ):\n+                operation[\"responses\"][http422] = {\n                     \"description\": \"Validation Error\",\n                     \"content\": {\n                         \"application/json\": {\n@@ -225,6 +220,13 @@ def get_openapi_path(\n                         }\n                     },\n                 }\n+                if \"ValidationError\" not in definitions:\n+                    definitions.update(\n+                        {\n+                            \"ValidationError\": validation_error_definition,\n+                            \"HTTPValidationError\": validation_error_response_definition,\n+                        }\n+                    )\n             path[method.lower()] = operation\n     return path, security_schemes, definitions\n \n", "test_patch": "diff --git a/tests/test_additional_responses_custom_validationerror.py b/tests/test_additional_responses_custom_validationerror.py\nnew file mode 100644\nindex 0000000000000..37982eef45e64\n--- /dev/null\n+++ b/tests/test_additional_responses_custom_validationerror.py\n@@ -0,0 +1,100 @@\n+import typing\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class JsonApiResponse(JSONResponse):\n+    media_type = \"application/vnd.api+json\"\n+\n+\n+class Error(BaseModel):\n+    status: str\n+    title: str\n+\n+\n+class JsonApiError(BaseModel):\n+    errors: typing.List[Error]\n+\n+\n+@app.get(\n+    \"/a/{id}\",\n+    response_class=JsonApiResponse,\n+    responses={422: {\"description\": \"Error\", \"model\": JsonApiError}},\n+)\n+async def a(id):\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a/{id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"422\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/vnd.api+json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/vnd.api+json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a__id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Id\"},\n+                        \"name\": \"id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Error\": {\n+                \"title\": \"Error\",\n+                \"required\": [\"status\", \"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                },\n+            },\n+            \"JsonApiError\": {\n+                \"title\": \"JsonApiError\",\n+                \"required\": [\"errors\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"errors\": {\n+                        \"title\": \"Errors\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\ndiff --git a/tests/test_additional_responses_default_validationerror.py b/tests/test_additional_responses_default_validationerror.py\nnew file mode 100644\nindex 0000000000000..ac22bf573077c\n--- /dev/null\n+++ b/tests/test_additional_responses_default_validationerror.py\n@@ -0,0 +1,85 @@\n+from fastapi import FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/a/{id}\")\n+async def a(id):\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a/{id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a__id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Id\"},\n+                        \"name\": \"id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\ndiff --git a/tests/test_additional_responses_response_class.py b/tests/test_additional_responses_response_class.py\nnew file mode 100644\nindex 0000000000000..81c28e348e7a8\n--- /dev/null\n+++ b/tests/test_additional_responses_response_class.py\n@@ -0,0 +1,117 @@\n+import typing\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class JsonApiResponse(JSONResponse):\n+    media_type = \"application/vnd.api+json\"\n+\n+\n+class Error(BaseModel):\n+    status: str\n+    title: str\n+\n+\n+class JsonApiError(BaseModel):\n+    errors: typing.List[Error]\n+\n+\n+@app.get(\n+    \"/a\",\n+    response_class=JsonApiResponse,\n+    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n+)\n+async def a():\n+    pass  # pragma: no cover\n+\n+\n+@app.get(\"/b\", responses={500: {\"description\": \"Error\", \"model\": Error}})\n+async def b():\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/vnd.api+json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/vnd.api+json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a_get\",\n+            }\n+        },\n+        \"/b\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Error\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"B\",\n+                \"operationId\": \"b_b_get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Error\": {\n+                \"title\": \"Error\",\n+                \"required\": [\"status\", \"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                },\n+            },\n+            \"JsonApiError\": {\n+                \"title\": \"JsonApiError\",\n+                \"required\": [\"errors\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"errors\": {\n+                        \"title\": \"Errors\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n", "problem_statement": "OpenAPI: HTTP_422 response does not use custom media_type\n**Describe the bug**\r\nFastAPI automatically adds an HTTP_422 response to all paths in the OpenAPI specification that have parameters or request body. This response does not use the media_type of response_class if any custom defined. Furthermore, it overwrites any error object format with the default one.\r\n\r\n**To Reproduce**\r\nCreate a path with parameters and add custom response_class to decorator. Add custom exception handlers that reformat the default error responses as per your liking. Then observe generated openapi.json\r\n\r\n```python\r\nfrom fastapi import FastAPI, HTTPException\r\nfrom fastapi.exceptions import RequestValidationError\r\nfrom starlette import status\r\nfrom starlette.responses import JSONResponse\r\nfrom . import schemas\r\n\r\napp = FastAPI()\r\n\r\nclass JsonApiResponse(JSONResponse):\r\n    media_type = 'application/vnd+json.api'\r\n\r\n@app.exception_handler(HTTPException)\r\nasync def http_exception_handler(request, exc: HTTPException) -> JsonApiResponse:\r\n    headers = getattr(exc, \"headers\", None)\r\n    content = schemas.ErrorResponse(errors=[dict(title=\"Bad request\", detail=exc.detail, status=exc.status_code)]).dict()\r\n    status_code = exc.status_code\r\n    if headers:\r\n        return JsonApiResponse(content=content, status_code=status_code, headers=headers)\r\n    else:\r\n        return JsonApiResponse(content=content, status_code=status_code)\r\n\r\n@app.exception_handler(RequestValidationError)\r\nasync def request_validation_exception_handler(request, exc: RequestValidationError) -> JsonApiResponse:\r\n    http422 = status.HTTP_422_UNPROCESSABLE_ENTITY\r\n    return JsonApiResponse(\r\n        content=schemas.ErrorResponse(errors=[\r\n            dict(title=err['type'], detail=err['msg'], source='/'.join(err['loc']), status=http422)\r\n            for err in exc.errors()\r\n        ]).dict(),\r\n        status_code=http422,\r\n    )\r\n\r\n@app.post('/customers',\r\n         status_code=status.HTTP_201_CREATED,\r\n         response_model=schemas.CustomerDetailsResponse,\r\n         response_class=JsonApiResponse,\r\n         )\r\ndef customer_create(data: schemas.Customer = Body(..., media_type='application/vnd+json.api', embed=True)):\r\n    created_customer = {**data.dict(), **{'id': '1'}}\r\n    return {'data': created_customer}\r\n``` \r\n\r\nThe openapi.json will include the unwanted 422 response with the FastAPI default error object definitions:\r\n\r\n```yaml\r\n  # ...\r\n  '422':\r\n    description: Validation Error\r\n    content:\r\n      application/json:\r\n        schema:\r\n          \"$ref\": \"#/components/schemas/HTTPValidationError\"\r\n```\r\n\r\n**Expected behavior**\r\nAt least, the media_type of the response_class should be respected. But the best would be if the 422 would not be added to the specification unless requested via the path decorator. Or if the 422 definitions of mine were respected.\r\n\r\n```python\r\n@app.post('/customers',\r\n         status_code=status.HTTP_201_CREATED,\r\n         response_model=schemas.CustomerDetailsResponse,\r\n         response_class=JsonApiResponse,\r\n         responses={\r\n             422: {\r\n                 'model': schemas.ErrorResponse\r\n             },\r\n         })\r\ndata: schemas.Customer = Body(..., media_type='application/vnd+json.api', embed=True)):\r\n    pass\r\n```\r\n\r\n**Environment:**\r\n - OS: masOS 10.14.6\r\n - Python: 3.6.5\r\n - FastAPI: 0.35.0\n", "hints_text": "", "created_at": "2019-08-14T12:08:29Z"}
{"repo": "fastapi/fastapi", "pull_number": 435, "instance_id": "fastapi__fastapi-435", "issue_numbers": ["428", "428"], "base_commit": "033bc2a6c9aec3a245eb1f1b4fadb2fbb7a514b8", "patch": "diff --git a/fastapi/openapi/utils.py b/fastapi/openapi/utils.py\nindex 9c043103dc0b7..96be89d937fe0 100644\n--- a/fastapi/openapi/utils.py\n+++ b/fastapi/openapi/utils.py\n@@ -43,6 +43,15 @@\n     },\n }\n \n+status_code_ranges: Dict[str, str] = {\n+    \"1XX\": \"Information\",\n+    \"2XX\": \"Success\",\n+    \"3XX\": \"Redirection\",\n+    \"4XX\": \"Client Error\",\n+    \"5XX\": \"Server Error\",\n+    \"default\": \"Default Response\",\n+}\n+\n \n def get_openapi_params(dependant: Dependant) -> List[Field]:\n     flat_dependant = get_flat_dependant(dependant)\n@@ -190,12 +199,14 @@ def get_openapi_path(\n                         response.setdefault(\"content\", {}).setdefault(\n                             \"application/json\", {}\n                         )[\"schema\"] = response_schema\n-                    status_text = http.client.responses.get(int(additional_status_code))\n+                    status_text: Optional[str] = status_code_ranges.get(\n+                        str(additional_status_code).upper()\n+                    ) or http.client.responses.get(int(additional_status_code))\n                     response.setdefault(\n                         \"description\", status_text or \"Additional Response\"\n                     )\n                     operation.setdefault(\"responses\", {})[\n-                        str(additional_status_code)\n+                        str(additional_status_code).upper()\n                     ] = response\n             status_code = str(route.status_code)\n             response_schema = {\"type\": \"string\"}\n", "test_patch": "diff --git a/tests/test_additional_responses_bad.py b/tests/test_additional_responses_bad.py\nnew file mode 100644\nindex 0000000000000..fda4755763b3e\n--- /dev/null\n+++ b/tests/test_additional_responses_bad.py\n@@ -0,0 +1,40 @@\n+import pytest\n+from fastapi import FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/a\", responses={\"hello\": {\"description\": \"Not a valid additional response\"}})\n+async def a():\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a\": {\n+            \"get\": {\n+                \"responses\": {\n+                    # this is how one would imagine the openapi schema to be\n+                    # but since the key is not valid, openapi.utils.get_openapi will raise ValueError\n+                    \"hello\": {\"description\": \"Not a valid additional response\"},\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a_get\",\n+            }\n+        }\n+    },\n+}\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    with pytest.raises(ValueError):\n+        client.get(\"/openapi.json\")\ndiff --git a/tests/test_additional_responses_router.py b/tests/test_additional_responses_router.py\nindex 49ef5f04992f4..ce66ead7e0c71 100644\n--- a/tests/test_additional_responses_router.py\n+++ b/tests/test_additional_responses_router.py\n@@ -10,12 +10,24 @@ async def a():\n     return \"a\"\n \n \n-@router.get(\"/b\", responses={502: {\"description\": \"Error 2\"}})\n+@router.get(\n+    \"/b\",\n+    responses={\n+        502: {\"description\": \"Error 2\"},\n+        \"4XX\": {\"description\": \"Error with range, upper\"},\n+    },\n+)\n async def b():\n     return \"b\"\n \n \n-@router.get(\"/c\", responses={501: {\"description\": \"Error 3\"}})\n+@router.get(\n+    \"/c\",\n+    responses={\n+        \"400\": {\"description\": \"Error with str\"},\n+        \"5xx\": {\"description\": \"Error with range, lower\"},\n+    },\n+)\n async def c():\n     return \"c\"\n \n@@ -43,6 +55,7 @@ async def c():\n             \"get\": {\n                 \"responses\": {\n                     \"502\": {\"description\": \"Error 2\"},\n+                    \"4XX\": {\"description\": \"Error with range, upper\"},\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n@@ -55,7 +68,8 @@ async def c():\n         \"/c\": {\n             \"get\": {\n                 \"responses\": {\n-                    \"501\": {\"description\": \"Error 3\"},\n+                    \"400\": {\"description\": \"Error with str\"},\n+                    \"5XX\": {\"description\": \"Error with range, lower\"},\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n", "problem_statement": "OpenAPI: response keys are limited to be status codes\n**Describe the bug**\r\nAccording to OpenAPI 3 specification, under `responses` dictionary each definition starts with the keys which is either a valid status codes (200, 204, 404, etc.), a [range of codes](https://swagger.io/docs/specification/describing-responses#status-codes) (1XX, 2XX, 3XX, etc.) or the word [\"default\"](https://swagger.io/docs/specification/describing-responses#default).\r\n\r\nIf a path is defined with such response, the server crashes when opening the doc, redoc or openapi.json URLs.\r\n\r\n**To Reproduce**\r\n```python\r\nfrom fastapi import FastAPI, HTTPException\r\nfrom starlette import status\r\nfrom . import schemas\r\n\r\napp = FastAPI()\r\n\r\n@app.get('/customer/{id}',\r\n            status_code=status.HTTP_200_OK,\r\n            response_model=schemas.CustomerDetailsResponse,\r\n            responses={\r\n                '4xx': {'model': schemas.ErrorResponse},\r\n                '5xx': {'model': schemas.ErrorResponse},\r\n            },\r\n            )\r\ndef customer_details(id: str):\r\n    raise HTTPException(status_code=status.HTTP_501_NOT_IMPLEMENTED)\r\n```\r\n\r\n**Expected behavior**\r\nThe openapi.json is created, documentation opens, and the responses show the range / default \r\ndefinitions.\r\n\r\n```yaml\r\n# ...\r\n\"/api/customer/{id}\":\r\n  get:\r\n    responses:\r\n      '200':\r\n        description: Successful Response\r\n        content:\r\n          application/json:\r\n            schema:\r\n              \"$ref\": \"#/components/schemas/CustomerDetailsResponse\"\r\n      4xx:\r\n        description: Additional Response\r\n        content:\r\n          application/json:\r\n            schema:\r\n              \"$ref\": \"#/components/schemas/ErrorResponse\"\r\n      5xx:\r\n        description: Additional Response\r\n        content:\r\n          application/json:\r\n            schema:\r\n              \"$ref\": \"#/components/schemas/ErrorResponse\"\r\n    summary: Customer Details\r\n    operationId: customer_details_api_customer__id__get\r\n    parameters:\r\n    - required: true\r\n      schema:\r\n        title: Id\r\n        type: string\r\n      name: id\r\n      in: path\r\n```\r\n\r\n**Environment:**\r\n - OS: masOS 10.14.6\r\n - Python: 3.6.5\r\n - FastAPI: 0.35.0\nOpenAPI: response keys are limited to be status codes\n**Describe the bug**\r\nAccording to OpenAPI 3 specification, under `responses` dictionary each definition starts with the keys which is either a valid status codes (200, 204, 404, etc.), a [range of codes](https://swagger.io/docs/specification/describing-responses#status-codes) (1XX, 2XX, 3XX, etc.) or the word [\"default\"](https://swagger.io/docs/specification/describing-responses#default).\r\n\r\nIf a path is defined with such response, the server crashes when opening the doc, redoc or openapi.json URLs.\r\n\r\n**To Reproduce**\r\n```python\r\nfrom fastapi import FastAPI, HTTPException\r\nfrom starlette import status\r\nfrom . import schemas\r\n\r\napp = FastAPI()\r\n\r\n@app.get('/customer/{id}',\r\n            status_code=status.HTTP_200_OK,\r\n            response_model=schemas.CustomerDetailsResponse,\r\n            responses={\r\n                '4xx': {'model': schemas.ErrorResponse},\r\n                '5xx': {'model': schemas.ErrorResponse},\r\n            },\r\n            )\r\ndef customer_details(id: str):\r\n    raise HTTPException(status_code=status.HTTP_501_NOT_IMPLEMENTED)\r\n```\r\n\r\n**Expected behavior**\r\nThe openapi.json is created, documentation opens, and the responses show the range / default \r\ndefinitions.\r\n\r\n```yaml\r\n# ...\r\n\"/api/customer/{id}\":\r\n  get:\r\n    responses:\r\n      '200':\r\n        description: Successful Response\r\n        content:\r\n          application/json:\r\n            schema:\r\n              \"$ref\": \"#/components/schemas/CustomerDetailsResponse\"\r\n      4xx:\r\n        description: Additional Response\r\n        content:\r\n          application/json:\r\n            schema:\r\n              \"$ref\": \"#/components/schemas/ErrorResponse\"\r\n      5xx:\r\n        description: Additional Response\r\n        content:\r\n          application/json:\r\n            schema:\r\n              \"$ref\": \"#/components/schemas/ErrorResponse\"\r\n    summary: Customer Details\r\n    operationId: customer_details_api_customer__id__get\r\n    parameters:\r\n    - required: true\r\n      schema:\r\n        title: Id\r\n        type: string\r\n      name: id\r\n      in: path\r\n```\r\n\r\n**Environment:**\r\n - OS: masOS 10.14.6\r\n - Python: 3.6.5\r\n - FastAPI: 0.35.0\n", "hints_text": "\n", "created_at": "2019-08-13T07:07:42Z"}
{"repo": "fastapi/fastapi", "pull_number": 347, "instance_id": "fastapi__fastapi-347", "issue_numbers": ["284"], "base_commit": "b30cca8e9e39461db35cea41967eb206dd51387d", "patch": "diff --git a/fastapi/openapi/utils.py b/fastapi/openapi/utils.py\nindex 8d02a47512d23..7786e2527a81a 100644\n--- a/fastapi/openapi/utils.py\n+++ b/fastapi/openapi/utils.py\n@@ -8,7 +8,11 @@\n from fastapi.openapi.constants import METHODS_WITH_BODY, REF_PREFIX\n from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n-from fastapi.utils import get_flat_models_from_routes, get_model_definitions\n+from fastapi.utils import (\n+    generate_operation_id_for_path,\n+    get_flat_models_from_routes,\n+    get_model_definitions,\n+)\n from pydantic.fields import Field\n from pydantic.schema import field_schema, get_model_name_map\n from pydantic.utils import lenient_issubclass\n@@ -113,10 +117,7 @@ def generate_operation_id(*, route: routing.APIRoute, method: str) -> str:\n     if route.operation_id:\n         return route.operation_id\n     path: str = route.path_format\n-    operation_id = route.name + path\n-    operation_id = operation_id.replace(\"{\", \"_\").replace(\"}\", \"_\").replace(\"/\", \"_\")\n-    operation_id = operation_id + \"_\" + method.lower()\n-    return operation_id\n+    return generate_operation_id_for_path(name=route.name, path=path, method=method)\n \n \n def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:\ndiff --git a/fastapi/routing.py b/fastapi/routing.py\nindex e349787d71ed9..8eb6f47fa578e 100644\n--- a/fastapi/routing.py\n+++ b/fastapi/routing.py\n@@ -13,7 +13,7 @@\n )\n from fastapi.encoders import jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n-from fastapi.utils import create_cloned_field\n+from fastapi.utils import create_cloned_field, generate_operation_id_for_path\n from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n from pydantic.fields import Field\n@@ -205,12 +205,19 @@ def __init__(\n         self.path = path\n         self.endpoint = endpoint\n         self.name = get_name(endpoint) if name is None else name\n+        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n+        if methods is None:\n+            methods = [\"GET\"]\n+        self.methods = set([method.upper() for method in methods])\n+        self.unique_id = generate_operation_id_for_path(\n+            name=self.name, path=self.path_format, method=list(methods)[0]\n+        )\n         self.response_model = response_model\n         if self.response_model:\n             assert lenient_issubclass(\n                 response_class, JSONResponse\n             ), \"To declare a type the response must be a JSON response\"\n-            response_name = \"Response_\" + self.name\n+            response_name = \"Response_\" + self.unique_id\n             self.response_field: Optional[Field] = Field(\n                 name=response_name,\n                 type_=self.response_model,\n@@ -251,7 +258,7 @@ def __init__(\n                 assert lenient_issubclass(\n                     model, BaseModel\n                 ), \"A response model must be a Pydantic model\"\n-                response_name = f\"Response_{additional_status_code}_{self.name}\"\n+                response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n                 response_field = Field(\n                     name=response_name,\n                     type_=model,\n@@ -267,9 +274,6 @@ def __init__(\n         else:\n             self.response_fields = {}\n         self.deprecated = deprecated\n-        if methods is None:\n-            methods = [\"GET\"]\n-        self.methods = set([method.upper() for method in methods])\n         self.operation_id = operation_id\n         self.response_model_include = response_model_include\n         self.response_model_exclude = response_model_exclude\n@@ -278,7 +282,6 @@ def __init__(\n         self.include_in_schema = include_in_schema\n         self.response_class = response_class\n \n-        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n         assert inspect.isfunction(endpoint) or inspect.ismethod(\n             endpoint\n         ), f\"An endpoint must be a function or method\"\n@@ -288,7 +291,7 @@ def __init__(\n                 0,\n                 get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n             )\n-        self.body_field = get_body_field(dependant=self.dependant, name=self.name)\n+        self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n         self.dependency_overrides_provider = dependency_overrides_provider\n         self.app = request_response(\n             get_app(\ndiff --git a/fastapi/utils.py b/fastapi/utils.py\nindex 21bca1d3f30d8..fc3bc72893a4b 100644\n--- a/fastapi/utils.py\n+++ b/fastapi/utils.py\n@@ -93,3 +93,10 @@ def create_cloned_field(field: Field) -> Field:\n     new_field.shape = field.shape\n     new_field._populate_validators()\n     return new_field\n+\n+\n+def generate_operation_id_for_path(*, name: str, path: str, method: str) -> str:\n+    operation_id = name + path\n+    operation_id = operation_id.replace(\"{\", \"_\").replace(\"}\", \"_\").replace(\"/\", \"_\")\n+    operation_id = operation_id + \"_\" + method.lower()\n+    return operation_id\n", "test_patch": "diff --git a/tests/test_modules_same_name_body/__init__.py b/tests/test_modules_same_name_body/__init__.py\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\ndiff --git a/tests/test_modules_same_name_body/app/__init__.py b/tests/test_modules_same_name_body/app/__init__.py\nnew file mode 100644\nindex 0000000000000..e69de29bb2d1d\ndiff --git a/tests/test_modules_same_name_body/app/a.py b/tests/test_modules_same_name_body/app/a.py\nnew file mode 100644\nindex 0000000000000..3c86c1865e74f\n--- /dev/null\n+++ b/tests/test_modules_same_name_body/app/a.py\n@@ -0,0 +1,8 @@\n+from fastapi import APIRouter, Body\n+\n+router = APIRouter()\n+\n+\n+@router.post(\"/compute\")\n+def compute(a: int = Body(...), b: str = Body(...)):\n+    return {\"a\": a, \"b\": b}\ndiff --git a/tests/test_modules_same_name_body/app/b.py b/tests/test_modules_same_name_body/app/b.py\nnew file mode 100644\nindex 0000000000000..f7c7fdfc690d1\n--- /dev/null\n+++ b/tests/test_modules_same_name_body/app/b.py\n@@ -0,0 +1,8 @@\n+from fastapi import APIRouter, Body\n+\n+router = APIRouter()\n+\n+\n+@router.post(\"/compute/\")\n+def compute(a: int = Body(...), b: str = Body(...)):\n+    return {\"a\": a, \"b\": b}\ndiff --git a/tests/test_modules_same_name_body/app/main.py b/tests/test_modules_same_name_body/app/main.py\nnew file mode 100644\nindex 0000000000000..392360899ad53\n--- /dev/null\n+++ b/tests/test_modules_same_name_body/app/main.py\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+from . import a, b\n+\n+app = FastAPI()\n+\n+app.include_router(a.router, prefix=\"/a\")\n+app.include_router(b.router, prefix=\"/b\")\ndiff --git a/tests/test_modules_same_name_body/test_main.py b/tests/test_modules_same_name_body/test_main.py\nnew file mode 100644\nindex 0000000000000..bf50b75663a5d\n--- /dev/null\n+++ b/tests/test_modules_same_name_body/test_main.py\n@@ -0,0 +1,155 @@\n+from starlette.testclient import TestClient\n+\n+from .app.main import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a/compute\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Compute\",\n+                \"operationId\": \"compute_a_compute_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_compute_a_compute_post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/b/compute/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Compute\",\n+                \"operationId\": \"compute_b_compute__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_compute_b_compute__post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_compute_b_compute__post\": {\n+                \"title\": \"Body_compute_b_compute__post\",\n+                \"required\": [\"a\", \"b\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"a\": {\"title\": \"A\", \"type\": \"integer\"},\n+                    \"b\": {\"title\": \"B\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Body_compute_a_compute_post\": {\n+                \"title\": \"Body_compute_a_compute_post\",\n+                \"required\": [\"a\", \"b\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"a\": {\"title\": \"A\", \"type\": \"integer\"},\n+                    \"b\": {\"title\": \"B\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_post_a():\n+    data = {\"a\": 2, \"b\": \"foo\"}\n+    response = client.post(\"/a/compute\", json=data)\n+    assert response.status_code == 200\n+    data = response.json()\n+\n+\n+def test_post_a_invalid():\n+    data = {\"a\": \"bar\", \"b\": \"foo\"}\n+    response = client.post(\"/a/compute\", json=data)\n+    assert response.status_code == 422\n+\n+\n+def test_post_b():\n+    data = {\"a\": 2, \"b\": \"foo\"}\n+    response = client.post(\"/b/compute/\", json=data)\n+    assert response.status_code == 200\n+    data = response.json()\n+\n+\n+def test_post_b_invalid():\n+    data = {\"a\": \"bar\", \"b\": \"foo\"}\n+    response = client.post(\"/b/compute/\", json=data)\n+    assert response.status_code == 422\ndiff --git a/tests/test_security_oauth2.py b/tests/test_security_oauth2.py\nindex 08f610f937c8c..890613b290934 100644\n--- a/tests/test_security_oauth2.py\n+++ b/tests/test_security_oauth2.py\n@@ -66,7 +66,7 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n                     \"content\": {\n                         \"application/x-www-form-urlencoded\": {\n                             \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_read_current_user\"\n+                                \"$ref\": \"#/components/schemas/Body_read_current_user_login_post\"\n                             }\n                         }\n                     },\n@@ -90,8 +90,8 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_read_current_user\": {\n-                \"title\": \"Body_read_current_user\",\n+            \"Body_read_current_user_login_post\": {\n+                \"title\": \"Body_read_current_user_login_post\",\n                 \"required\": [\"grant_type\", \"username\", \"password\"],\n                 \"type\": \"object\",\n                 \"properties\": {\ndiff --git a/tests/test_security_oauth2_optional.py b/tests/test_security_oauth2_optional.py\nindex e585e29274192..f85db00d34519 100644\n--- a/tests/test_security_oauth2_optional.py\n+++ b/tests/test_security_oauth2_optional.py\n@@ -73,7 +73,7 @@ def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n                     \"content\": {\n                         \"application/x-www-form-urlencoded\": {\n                             \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_read_current_user\"\n+                                \"$ref\": \"#/components/schemas/Body_read_current_user_login_post\"\n                             }\n                         }\n                     },\n@@ -97,8 +97,8 @@ def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_read_current_user\": {\n-                \"title\": \"Body_read_current_user\",\n+            \"Body_read_current_user_login_post\": {\n+                \"title\": \"Body_read_current_user_login_post\",\n                 \"required\": [\"grant_type\", \"username\", \"password\"],\n                 \"type\": \"object\",\n                 \"properties\": {\ndiff --git a/tests/test_tutorial/test_async_sql_databases/test_tutorial001.py b/tests/test_tutorial/test_async_sql_databases/test_tutorial001.py\nindex d7ceb6642146c..be5f56dbd5daa 100644\n--- a/tests/test_tutorial/test_async_sql_databases/test_tutorial001.py\n+++ b/tests/test_tutorial/test_async_sql_databases/test_tutorial001.py\n@@ -14,7 +14,7 @@\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\n-                                    \"title\": \"Response_Read_Notes\",\n+                                    \"title\": \"Response_Read_Notes_Notes__Get\",\n                                     \"type\": \"array\",\n                                     \"items\": {\"$ref\": \"#/components/schemas/Note\"},\n                                 }\ndiff --git a/tests/test_tutorial/test_body_multiple_params/test_tutorial003.py b/tests/test_tutorial/test_body_multiple_params/test_tutorial003.py\nindex 9a1c56bc204b4..dc7e518e249a1 100644\n--- a/tests/test_tutorial/test_body_multiple_params/test_tutorial003.py\n+++ b/tests/test_tutorial/test_body_multiple_params/test_tutorial003.py\n@@ -40,7 +40,9 @@\n                 \"requestBody\": {\n                     \"content\": {\n                         \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Body_update_item\"}\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n+                            }\n                         }\n                     },\n                     \"required\": True,\n@@ -70,8 +72,8 @@\n                     \"full_name\": {\"title\": \"Full_Name\", \"type\": \"string\"},\n                 },\n             },\n-            \"Body_update_item\": {\n-                \"title\": \"Body_update_item\",\n+            \"Body_update_item_items__item_id__put\": {\n+                \"title\": \"Body_update_item_items__item_id__put\",\n                 \"required\": [\"item\", \"user\", \"importance\"],\n                 \"type\": \"object\",\n                 \"properties\": {\ndiff --git a/tests/test_tutorial/test_body_schema/test_tutorial001.py b/tests/test_tutorial/test_body_schema/test_tutorial001.py\nindex c213fab1ca3f6..eb938839684f4 100644\n--- a/tests/test_tutorial/test_body_schema/test_tutorial001.py\n+++ b/tests/test_tutorial/test_body_schema/test_tutorial001.py\n@@ -41,7 +41,9 @@\n                 \"requestBody\": {\n                     \"content\": {\n                         \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Body_update_item\"}\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n+                            }\n                         }\n                     },\n                     \"required\": True,\n@@ -71,8 +73,8 @@\n                     \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n                 },\n             },\n-            \"Body_update_item\": {\n-                \"title\": \"Body_update_item\",\n+            \"Body_update_item_items__item_id__put\": {\n+                \"title\": \"Body_update_item_items__item_id__put\",\n                 \"required\": [\"item\"],\n                 \"type\": \"object\",\n                 \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\ndiff --git a/tests/test_tutorial/test_extra_data_types/test_tutorial001.py b/tests/test_tutorial/test_extra_data_types/test_tutorial001.py\nindex 921b24aadc41a..6c53b7adcf3df 100644\n--- a/tests/test_tutorial/test_extra_data_types/test_tutorial001.py\n+++ b/tests/test_tutorial/test_extra_data_types/test_tutorial001.py\n@@ -44,7 +44,9 @@\n                 \"requestBody\": {\n                     \"content\": {\n                         \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Body_read_items\"}\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n+                            }\n                         }\n                     }\n                 },\n@@ -53,8 +55,8 @@\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_read_items\": {\n-                \"title\": \"Body_read_items\",\n+            \"Body_read_items_items__item_id__put\": {\n+                \"title\": \"Body_read_items_items__item_id__put\",\n                 \"type\": \"object\",\n                 \"properties\": {\n                     \"start_datetime\": {\ndiff --git a/tests/test_tutorial/test_extra_models/test_tutorial003.py b/tests/test_tutorial/test_extra_models/test_tutorial003.py\nindex 9a1c8a146c043..95aef55cb7fbe 100644\n--- a/tests/test_tutorial/test_extra_models/test_tutorial003.py\n+++ b/tests/test_tutorial/test_extra_models/test_tutorial003.py\n@@ -16,7 +16,7 @@\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\n-                                    \"title\": \"Response_Read_Item\",\n+                                    \"title\": \"Response_Read_Item_Items__Item_Id__Get\",\n                                     \"anyOf\": [\n                                         {\"$ref\": \"#/components/schemas/PlaneItem\"},\n                                         {\"$ref\": \"#/components/schemas/CarItem\"},\ndiff --git a/tests/test_tutorial/test_extra_models/test_tutorial004.py b/tests/test_tutorial/test_extra_models/test_tutorial004.py\nindex 82a609e01e997..17ea0e1be3ac8 100644\n--- a/tests/test_tutorial/test_extra_models/test_tutorial004.py\n+++ b/tests/test_tutorial/test_extra_models/test_tutorial004.py\n@@ -16,7 +16,7 @@\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\n-                                    \"title\": \"Response_Read_Items\",\n+                                    \"title\": \"Response_Read_Items_Items__Get\",\n                                     \"type\": \"array\",\n                                     \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                 }\ndiff --git a/tests/test_tutorial/test_extra_models/test_tutorial005.py b/tests/test_tutorial/test_extra_models/test_tutorial005.py\nindex efb319bd2aef0..d8259f1cdcdd0 100644\n--- a/tests/test_tutorial/test_extra_models/test_tutorial005.py\n+++ b/tests/test_tutorial/test_extra_models/test_tutorial005.py\n@@ -16,7 +16,7 @@\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\n-                                    \"title\": \"Response_Read_Keyword_Weights\",\n+                                    \"title\": \"Response_Read_Keyword_Weights_Keyword-Weights__Get\",\n                                     \"type\": \"object\",\n                                     \"additionalProperties\": {\"type\": \"number\"},\n                                 }\ndiff --git a/tests/test_tutorial/test_request_files/test_tutorial001.py b/tests/test_tutorial/test_request_files/test_tutorial001.py\nindex 726691662e09b..b5f64af959da6 100644\n--- a/tests/test_tutorial/test_request_files/test_tutorial001.py\n+++ b/tests/test_tutorial/test_request_files/test_tutorial001.py\n@@ -33,7 +33,9 @@\n                 \"requestBody\": {\n                     \"content\": {\n                         \"multipart/form-data\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_file\"}\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n+                            }\n                         }\n                     },\n                     \"required\": True,\n@@ -64,7 +66,7 @@\n                     \"content\": {\n                         \"multipart/form-data\": {\n                             \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_create_upload_file\"\n+                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n                             }\n                         }\n                     },\n@@ -75,16 +77,16 @@\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_create_file\": {\n-                \"title\": \"Body_create_file\",\n+            \"Body_create_upload_file_uploadfile__post\": {\n+                \"title\": \"Body_create_upload_file_uploadfile__post\",\n                 \"required\": [\"file\"],\n                 \"type\": \"object\",\n                 \"properties\": {\n                     \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                 },\n             },\n-            \"Body_create_upload_file\": {\n-                \"title\": \"Body_create_upload_file\",\n+            \"Body_create_file_files__post\": {\n+                \"title\": \"Body_create_file_files__post\",\n                 \"required\": [\"file\"],\n                 \"type\": \"object\",\n                 \"properties\": {\ndiff --git a/tests/test_tutorial/test_request_files/test_tutorial002.py b/tests/test_tutorial/test_request_files/test_tutorial002.py\nindex 15ea952ba93ea..092b9901c7d1c 100644\n--- a/tests/test_tutorial/test_request_files/test_tutorial002.py\n+++ b/tests/test_tutorial/test_request_files/test_tutorial002.py\n@@ -33,7 +33,9 @@\n                 \"requestBody\": {\n                     \"content\": {\n                         \"multipart/form-data\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_files\"}\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n+                            }\n                         }\n                     },\n                     \"required\": True,\n@@ -64,7 +66,7 @@\n                     \"content\": {\n                         \"multipart/form-data\": {\n                             \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_create_upload_files\"\n+                                \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n                             }\n                         }\n                     },\n@@ -87,8 +89,8 @@\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_create_files\": {\n-                \"title\": \"Body_create_files\",\n+            \"Body_create_upload_files_uploadfiles__post\": {\n+                \"title\": \"Body_create_upload_files_uploadfiles__post\",\n                 \"required\": [\"files\"],\n                 \"type\": \"object\",\n                 \"properties\": {\n@@ -99,8 +101,8 @@\n                     }\n                 },\n             },\n-            \"Body_create_upload_files\": {\n-                \"title\": \"Body_create_upload_files\",\n+            \"Body_create_files_files__post\": {\n+                \"title\": \"Body_create_files_files__post\",\n                 \"required\": [\"files\"],\n                 \"type\": \"object\",\n                 \"properties\": {\ndiff --git a/tests/test_tutorial/test_request_forms/test_tutorial001.py b/tests/test_tutorial/test_request_forms/test_tutorial001.py\nindex fe85628acdd29..46c92676703ca 100644\n--- a/tests/test_tutorial/test_request_forms/test_tutorial001.py\n+++ b/tests/test_tutorial/test_request_forms/test_tutorial001.py\n@@ -32,7 +32,9 @@\n                 \"requestBody\": {\n                     \"content\": {\n                         \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Body_login\"}\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_login_login__post\"\n+                            }\n                         }\n                     },\n                     \"required\": True,\n@@ -42,8 +44,8 @@\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_login\": {\n-                \"title\": \"Body_login\",\n+            \"Body_login_login__post\": {\n+                \"title\": \"Body_login_login__post\",\n                 \"required\": [\"username\", \"password\"],\n                 \"type\": \"object\",\n                 \"properties\": {\ndiff --git a/tests/test_tutorial/test_request_forms_and_files/test_tutorial001.py b/tests/test_tutorial/test_request_forms_and_files/test_tutorial001.py\nindex eea94593764cc..a30fbf60fc9ce 100644\n--- a/tests/test_tutorial/test_request_forms_and_files/test_tutorial001.py\n+++ b/tests/test_tutorial/test_request_forms_and_files/test_tutorial001.py\n@@ -34,7 +34,9 @@\n                 \"requestBody\": {\n                     \"content\": {\n                         \"multipart/form-data\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_file\"}\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n+                            }\n                         }\n                     },\n                     \"required\": True,\n@@ -44,8 +46,8 @@\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_create_file\": {\n-                \"title\": \"Body_create_file\",\n+            \"Body_create_file_files__post\": {\n+                \"title\": \"Body_create_file_files__post\",\n                 \"required\": [\"file\", \"fileb\", \"token\"],\n                 \"type\": \"object\",\n                 \"properties\": {\ndiff --git a/tests/test_tutorial/test_security/test_tutorial003.py b/tests/test_tutorial/test_security/test_tutorial003.py\nindex c55e7b7a6bbbc..ebd8731aba575 100644\n--- a/tests/test_tutorial/test_security/test_tutorial003.py\n+++ b/tests/test_tutorial/test_security/test_tutorial003.py\n@@ -31,7 +31,9 @@\n                 \"requestBody\": {\n                     \"content\": {\n                         \"application/x-www-form-urlencoded\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Body_login\"}\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_login_token_post\"\n+                            }\n                         }\n                     },\n                     \"required\": True,\n@@ -54,8 +56,8 @@\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_login\": {\n-                \"title\": \"Body_login\",\n+            \"Body_login_token_post\": {\n+                \"title\": \"Body_login_token_post\",\n                 \"required\": [\"username\", \"password\"],\n                 \"type\": \"object\",\n                 \"properties\": {\ndiff --git a/tests/test_tutorial/test_security/test_tutorial005.py b/tests/test_tutorial/test_security/test_tutorial005.py\nindex 403130e49143d..786fbc3ac577d 100644\n--- a/tests/test_tutorial/test_security/test_tutorial005.py\n+++ b/tests/test_tutorial/test_security/test_tutorial005.py\n@@ -42,7 +42,7 @@\n                     \"content\": {\n                         \"application/x-www-form-urlencoded\": {\n                             \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_login_for_access_token\"\n+                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n                             }\n                         }\n                     },\n@@ -116,8 +116,8 @@\n                     \"token_type\": {\"title\": \"Token_Type\", \"type\": \"string\"},\n                 },\n             },\n-            \"Body_login_for_access_token\": {\n-                \"title\": \"Body_login_for_access_token\",\n+            \"Body_login_for_access_token_token_post\": {\n+                \"title\": \"Body_login_for_access_token_token_post\",\n                 \"required\": [\"username\", \"password\"],\n                 \"type\": \"object\",\n                 \"properties\": {\n@@ -177,6 +177,12 @@\n }\n \n \n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n def get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n     data = {\"username\": username, \"password\": password}\n     if scope:\n@@ -187,12 +193,6 @@ def get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n     return access_token\n \n \n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == openapi_schema\n-\n-\n def test_login():\n     response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n     assert response.status_code == 200\ndiff --git a/tests/test_tutorial/test_sql_databases/test_sql_databases.py b/tests/test_tutorial/test_sql_databases/test_sql_databases.py\nindex 9e1dcc2bb406f..8f46a94376fc4 100644\n--- a/tests/test_tutorial/test_sql_databases/test_sql_databases.py\n+++ b/tests/test_tutorial/test_sql_databases/test_sql_databases.py\n@@ -16,7 +16,7 @@\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\n-                                    \"title\": \"Response_Read_Users\",\n+                                    \"title\": \"Response_Read_Users_Users__Get\",\n                                     \"type\": \"array\",\n                                     \"items\": {\"$ref\": \"#/components/schemas/User\"},\n                                 }\n@@ -168,7 +168,7 @@\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\n-                                    \"title\": \"Response_Read_Items\",\n+                                    \"title\": \"Response_Read_Items_Items__Get\",\n                                     \"type\": \"array\",\n                                     \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n                                 }\n", "problem_statement": "OpenAPI fails when forcing query params to be body and multiple params in each\n**Describe the bug**\r\n\r\nThe OpenAPI spec for my app breaks with the following error (shown in my web browser).\r\n\r\n```\r\nFetch error\r\nInternal Server Error /openapi.json\r\n```\r\n\r\nThis only happens when I have endpoints defined in two separate files, each of which force all their arguments to be body parameters via annotating each parameter with `Body(...)` to force them to be body parameters, as opposed to query parameters.\r\n\r\nCheck this out!\r\n\r\n- If the endpoints are defined in the same file, then the problem does not happen.\r\n- If each endpoint only has a single parameter, the problem does not happen.\r\n- If only one endpoint has multiple parameters, then the problem does not happen.\r\n\r\nIt only happens when both endpoints have *multiple* parameters annotated with `Body(...)`.\r\n\r\n\r\n**To Reproduce**\r\n\r\nSteps to reproduce the behavior:\r\n\r\n1. Create a directory with the following structure.\r\n\r\n```\r\n.\r\n\u251c\u2500\u2500 foo\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bar.py\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 baz.py\r\n\u2514\u2500\u2500 main.py\r\n```\r\n\r\nmain.py\r\n\r\n```python\r\nfrom fastapi import FastAPI\r\n\r\nimport foo.bar\r\nimport foo.baz\r\n\r\napp = FastAPI()\r\n\r\napp.get('/v1/compute')(foo.bar.compute)\r\napp.get('/v2/compute')(foo.baz.compute)\r\n```\r\n\r\nfoo/bar.py\r\n\r\n```python\r\nfrom fastapi import Body\r\n\r\ndef compute(\r\n        a: int = Body(...),\r\n        b: str = Body(...),\r\n):\r\n    return a + b \r\n```\r\n\r\nfoo/baz.py (identical to foo/bar.py)\r\n\r\n```python\r\nfrom fastapi import Body\r\n\r\ndef compute(\r\n        a: int = Body(...),\r\n        b: str = Body(...),\r\n):\r\n    return a + b\r\n```\r\n\r\n2. Run with `uvicorn main:app --reload`\r\n3. Visit `http://localhost:8000/docs`\r\n\r\n**Expected behavior**\r\n\r\nThe OpenAPI page shows without error.\r\n\r\n**Screenshots**\r\n\r\n![image](https://user-images.githubusercontent.com/2068912/58768563-3e448080-8552-11e9-92b1-cfc1e8040d68.png)\r\n\r\nHere's the exception my app produces when I try to visit `http://localhost:8000`.\r\n\r\n```\r\nip-10-8-0-198% % uvicorn run:app --reload\r\nINFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\r\nINFO: Started reloader process [77186]\r\nWARNING:root:email-validator not installed, email fields will be treated as str.\r\nTo install, run: pip install email-validator\r\nINFO:uvicorn:Started server process [77188]\r\nINFO:uvicorn:Waiting for application startup.\r\nINFO:uvicorn:('127.0.0.1', 54932) - \"GET /docs HTTP/1.1\" 200\r\nINFO:uvicorn:('127.0.0.1', 54932) - \"GET /openapi.json HTTP/1.1\" 500\r\nERROR:uvicorn:Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 368, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/uvicorn/middleware/asgi2.py\", line 7, in __call__\r\n    await instance(receive, send)\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/starlette/middleware/errors.py\", line 125, in asgi\r\n    raise exc from None\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/starlette/middleware/errors.py\", line 103, in asgi\r\n    await asgi(receive, _send)\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/starlette/exceptions.py\", line 74, in app\r\n    raise exc from None\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/starlette/exceptions.py\", line 63, in app\r\n    await instance(receive, sender)\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/starlette/routing.py\", line 43, in awaitable\r\n    response = await run_in_threadpool(func, request)\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/starlette/concurrency.py\", line 24, in run_in_threadpool\r\n    return await loop.run_in_executor(None, func, *args)\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/concurrent/futures/thread.py\", line 56, in run\r\n    result = self.fn(*self.args, **self.kwargs)\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/fastapi/applications.py\", line 83, in <lambda>\r\n    lambda req: JSONResponse(self.openapi()),\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/fastapi/applications.py\", line 75, in openapi                                                                                            \r\n    openapi_prefix=self.openapi_prefix,\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/fastapi/openapi/utils.py\", line 248, in get_openapi                                                                                      \r\n    flat_models=flat_models, model_name_map=model_name_map\r\n  File \"/Users/edwardbanner/.anaconda/lib/python3.6/site-packages/fastapi/utils.py\", line 45, in get_model_definitions                                                                                     \r\n    model_name = model_name_map[model]\r\nKeyError: <class 'Body_compute'>\r\n```\r\n\r\n**Environment:**\r\n - OS: [e.g. macOS]\r\n - FastAPI Version [e.g. 0.27.0], get it with `pip install fastapi`.\r\n\r\n```Python\r\nimport fastapi\r\nprint(fastapi.__version__)\r\n```\r\n\r\n**Additional context**\r\n\r\n- When I only have a single endpoint, the value of `model_name_map` is `{<class 'Body_compute'>: 'Body_compute'}`.\r\n- However, when I have both endpoints take multiple parameters, the value of `model_name_map` is `{<class 'Body_compute'>: 'None__Body_compute'}`.\n", "hints_text": "Thanks for the report. I'll check it soon.", "created_at": "2019-06-28T17:31:21Z"}
{"repo": "fastapi/fastapi", "pull_number": 338, "instance_id": "fastapi__fastapi-338", "issue_numbers": ["276"], "base_commit": "06eb775c63cfda2fdad766e2d1d8931807d91a89", "patch": "diff --git a/fastapi/applications.py b/fastapi/applications.py\nindex a1a2a5605f27a..e5dce88d94e49 100644\n--- a/fastapi/applications.py\n+++ b/fastapi/applications.py\n@@ -1,4 +1,4 @@\n-from typing import Any, Callable, Dict, List, Optional, Set, Type, Union\n+from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\n \n from fastapi import routing\n from fastapi.exception_handlers import (\n@@ -130,7 +130,7 @@ def add_api_route(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -152,7 +152,7 @@ def add_api_route(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -176,7 +176,7 @@ def api_route(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -199,7 +199,7 @@ def decorator(func: Callable) -> Callable:\n                 response_model=response_model,\n                 status_code=status_code,\n                 tags=tags or [],\n-                dependencies=dependencies or [],\n+                dependencies=dependencies,\n                 summary=summary,\n                 description=description,\n                 response_description=response_description,\n@@ -237,7 +237,7 @@ def include_router(\n         *,\n         prefix: str = \"\",\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n     ) -> None:\n         self.router.include_router(\n@@ -255,7 +255,7 @@ def get(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -275,7 +275,7 @@ def get(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -298,7 +298,7 @@ def put(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -318,7 +318,7 @@ def put(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -341,7 +341,7 @@ def post(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -361,7 +361,7 @@ def post(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -384,7 +384,7 @@ def delete(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -404,7 +404,7 @@ def delete(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -427,7 +427,7 @@ def options(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -447,7 +447,7 @@ def options(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -470,7 +470,7 @@ def head(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -490,7 +490,7 @@ def head(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -513,7 +513,7 @@ def patch(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -533,7 +533,7 @@ def patch(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -556,7 +556,7 @@ def trace(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[Depends] = None,\n+        dependencies: Sequence[Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -576,7 +576,7 @@ def trace(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\ndiff --git a/fastapi/dependencies/utils.py b/fastapi/dependencies/utils.py\nindex 61dd011429e7c..28c57c296e79d 100644\n--- a/fastapi/dependencies/utils.py\n+++ b/fastapi/dependencies/utils.py\n@@ -242,7 +242,7 @@ def get_param_field(\n         if isinstance(schema, params.Param) and getattr(schema, \"in_\", None) is None:\n             schema.in_ = default_schema.in_\n         if force_type:\n-            schema.in_ = force_type\n+            schema.in_ = force_type  # type: ignore\n     else:\n         schema = default_schema(default_value)\n     required = default_value == Required\n@@ -422,7 +422,7 @@ def request_params_to_args(\n             value = received_params.getlist(field.alias) or field.default\n         else:\n             value = received_params.get(field.alias)\n-        schema: params.Param = field.schema\n+        schema = field.schema\n         assert isinstance(schema, params.Param), \"Params must be subclasses of Param\"\n         if value is None:\n             if field.required:\n@@ -458,7 +458,7 @@ async def request_body_to_args(\n         if len(required_params) == 1 and not embed:\n             received_body = {field.alias: received_body}\n         for field in required_params:\n-            value = None\n+            value: Any = None\n             if received_body is not None:\n                 if field.shape in sequence_shapes and isinstance(\n                     received_body, FormData\ndiff --git a/fastapi/openapi/models.py b/fastapi/openapi/models.py\nindex 82134d856fe5d..ddc5c6847f917 100644\n--- a/fastapi/openapi/models.py\n+++ b/fastapi/openapi/models.py\n@@ -122,7 +122,7 @@ class Schema(SchemaBase):\n     not_: Optional[List[SchemaBase]] = PSchema(None, alias=\"not\")  # type: ignore\n     items: Optional[SchemaBase] = None\n     properties: Optional[Dict[str, SchemaBase]] = None\n-    additionalProperties: Optional[Union[SchemaBase, bool]] = None\n+    additionalProperties: Optional[Union[SchemaBase, bool]] = None  # type: ignore\n \n \n class Example(BaseModel):\n@@ -149,9 +149,9 @@ class Encoding(BaseModel):\n \n \n class MediaType(BaseModel):\n-    schema_: Optional[Union[Schema, Reference]] = PSchema(\n+    schema_: Optional[Union[Schema, Reference]] = PSchema(  # type: ignore\n         None, alias=\"schema\"\n-    )  # type: ignore\n+    )\n     example: Optional[Any] = None\n     examples: Optional[Dict[str, Union[Example, Reference]]] = None\n     encoding: Optional[Dict[str, Encoding]] = None\n@@ -165,9 +165,9 @@ class ParameterBase(BaseModel):\n     style: Optional[str] = None\n     explode: Optional[bool] = None\n     allowReserved: Optional[bool] = None\n-    schema_: Optional[Union[Schema, Reference]] = PSchema(\n+    schema_: Optional[Union[Schema, Reference]] = PSchema(  # type: ignore\n         None, alias=\"schema\"\n-    )  # type: ignore\n+    )\n     example: Optional[Any] = None\n     examples: Optional[Dict[str, Union[Example, Reference]]] = None\n     # Serialization rules for more complex scenarios\ndiff --git a/fastapi/openapi/utils.py b/fastapi/openapi/utils.py\nindex 6f741c6bcdb3e..8d02a47512d23 100644\n--- a/fastapi/openapi/utils.py\n+++ b/fastapi/openapi/utils.py\n@@ -71,7 +71,8 @@ def get_openapi_operation_parameters(\n     definitions: Dict[str, Dict] = {}\n     parameters = []\n     for param in all_route_params:\n-        schema: Param = param.schema\n+        schema = param.schema\n+        schema = cast(Param, schema)\n         if \"ValidationError\" not in definitions:\n             definitions[\"ValidationError\"] = validation_error_definition\n             definitions[\"HTTPValidationError\"] = validation_error_response_definition\n@@ -90,7 +91,7 @@ def get_openapi_operation_parameters(\n \n \n def get_openapi_operation_request_body(\n-    *, body_field: Field, model_name_map: Dict[Type, str]\n+    *, body_field: Optional[Field], model_name_map: Dict[Type, str]\n ) -> Optional[Dict]:\n     if not body_field:\n         return None\ndiff --git a/fastapi/routing.py b/fastapi/routing.py\nindex 8d013dd01148e..e349787d71ed9 100644\n--- a/fastapi/routing.py\n+++ b/fastapi/routing.py\n@@ -1,7 +1,7 @@\n import asyncio\n import inspect\n import logging\n-from typing import Any, Callable, Dict, List, Optional, Set, Type, Union\n+from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\n \n from fastapi import params\n from fastapi.dependencies.models import Dependant\n@@ -184,14 +184,14 @@ def __init__(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n         name: str = None,\n-        methods: List[str] = None,\n+        methods: Optional[Union[Set[str], List[str]]] = None,\n         operation_id: str = None,\n         response_model_include: Set[str] = None,\n         response_model_exclude: Set[str] = set(),\n@@ -227,13 +227,18 @@ def __init__(\n             # would pass the validation and be returned as is.\n             # By being a new field, no inheritance will be passed as is. A new model\n             # will be always created.\n-            self.secure_cloned_response_field = create_cloned_field(self.response_field)\n+            self.secure_cloned_response_field: Optional[Field] = create_cloned_field(\n+                self.response_field\n+            )\n         else:\n             self.response_field = None\n             self.secure_cloned_response_field = None\n         self.status_code = status_code\n         self.tags = tags or []\n-        self.dependencies = dependencies or []\n+        if dependencies:\n+            self.dependencies = list(dependencies)\n+        else:\n+            self.dependencies = []\n         self.summary = summary\n         self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n         self.response_description = response_description\n@@ -264,7 +269,7 @@ def __init__(\n         self.deprecated = deprecated\n         if methods is None:\n             methods = [\"GET\"]\n-        self.methods = methods\n+        self.methods = set([method.upper() for method in methods])\n         self.operation_id = operation_id\n         self.response_model_include = response_model_include\n         self.response_model_exclude = response_model_exclude\n@@ -322,13 +327,13 @@ def add_api_route(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n         deprecated: bool = None,\n-        methods: List[str] = None,\n+        methods: Optional[Union[Set[str], List[str]]] = None,\n         operation_id: str = None,\n         response_model_include: Set[str] = None,\n         response_model_exclude: Set[str] = set(),\n@@ -344,7 +349,7 @@ def add_api_route(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -370,7 +375,7 @@ def api_route(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -393,7 +398,7 @@ def decorator(func: Callable) -> Callable:\n                 response_model=response_model,\n                 status_code=status_code,\n                 tags=tags or [],\n-                dependencies=dependencies or [],\n+                dependencies=dependencies,\n                 summary=summary,\n                 description=description,\n                 response_description=response_description,\n@@ -432,7 +437,7 @@ def include_router(\n         *,\n         prefix: str = \"\",\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         responses: Dict[Union[int, str], Dict[str, Any]] = None,\n     ) -> None:\n         if prefix:\n@@ -451,7 +456,8 @@ def include_router(\n                     response_model=route.response_model,\n                     status_code=route.status_code,\n                     tags=(route.tags or []) + (tags or []),\n-                    dependencies=(dependencies or []) + (route.dependencies or []),\n+                    dependencies=list(dependencies or [])\n+                    + list(route.dependencies or []),\n                     summary=route.summary,\n                     description=route.description,\n                     response_description=route.response_description,\n@@ -471,7 +477,7 @@ def include_router(\n                 self.add_route(\n                     prefix + route.path,\n                     route.endpoint,\n-                    methods=route.methods,\n+                    methods=list(route.methods or []),\n                     include_in_schema=route.include_in_schema,\n                     name=route.name,\n                 )\n@@ -491,7 +497,7 @@ def get(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -512,7 +518,7 @@ def get(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -536,7 +542,7 @@ def put(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -556,7 +562,7 @@ def put(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -580,7 +586,7 @@ def post(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -600,7 +606,7 @@ def post(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -624,7 +630,7 @@ def delete(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -644,7 +650,7 @@ def delete(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -668,7 +674,7 @@ def options(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -688,7 +694,7 @@ def options(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -712,7 +718,7 @@ def head(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -732,7 +738,7 @@ def head(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -756,7 +762,7 @@ def patch(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -776,7 +782,7 @@ def patch(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\n@@ -800,7 +806,7 @@ def trace(\n         response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n-        dependencies: List[params.Depends] = None,\n+        dependencies: Sequence[params.Depends] = None,\n         summary: str = None,\n         description: str = None,\n         response_description: str = \"Successful Response\",\n@@ -820,7 +826,7 @@ def trace(\n             response_model=response_model,\n             status_code=status_code,\n             tags=tags or [],\n-            dependencies=dependencies or [],\n+            dependencies=dependencies,\n             summary=summary,\n             description=description,\n             response_description=response_description,\ndiff --git a/fastapi/security/api_key.py b/fastapi/security/api_key.py\nindex 356681eee5a55..30fd3358fd769 100644\n--- a/fastapi/security/api_key.py\n+++ b/fastapi/security/api_key.py\n@@ -54,7 +54,7 @@ def __init__(self, *, name: str, scheme_name: str = None, auto_error: bool = Tru\n         self.auto_error = auto_error\n \n     async def __call__(self, request: Request) -> Optional[str]:\n-        api_key: str = request.cookies.get(self.model.name)\n+        api_key = request.cookies.get(self.model.name)\n         if not api_key:\n             if self.auto_error:\n                 raise HTTPException(\ndiff --git a/fastapi/security/http.py b/fastapi/security/http.py\nindex 362390b7a434c..9625951ae5b67 100644\n--- a/fastapi/security/http.py\n+++ b/fastapi/security/http.py\n@@ -56,7 +56,9 @@ def __init__(\n         self.realm = realm\n         self.auto_error = auto_error\n \n-    async def __call__(self, request: Request) -> Optional[HTTPBasicCredentials]:\n+    async def __call__(  # type: ignore\n+        self, request: Request\n+    ) -> Optional[HTTPBasicCredentials]:\n         authorization: str = request.headers.get(\"Authorization\")\n         scheme, param = get_authorization_scheme_param(authorization)\n         if self.realm:\ndiff --git a/fastapi/security/oauth2.py b/fastapi/security/oauth2.py\nindex 8c3cb819c9323..c7451cfafcd66 100644\n--- a/fastapi/security/oauth2.py\n+++ b/fastapi/security/oauth2.py\n@@ -2,7 +2,7 @@\n \n from fastapi.exceptions import HTTPException\n from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n-from fastapi.params import Form\n+from fastapi.param_functions import Form\n from fastapi.security.base import SecurityBase\n from fastapi.security.utils import get_authorization_scheme_param\n from starlette.requests import Request\ndiff --git a/fastapi/utils.py b/fastapi/utils.py\nindex c3adda7f1743f..21bca1d3f30d8 100644\n--- a/fastapi/utils.py\n+++ b/fastapi/utils.py\n@@ -10,9 +10,7 @@\n from starlette.routing import BaseRoute\n \n \n-def get_flat_models_from_routes(\n-    routes: Sequence[Type[BaseRoute]]\n-) -> Set[Type[BaseModel]]:\n+def get_flat_models_from_routes(routes: Sequence[BaseRoute]) -> Set[Type[BaseModel]]:\n     body_fields_from_routes: List[Field] = []\n     responses_from_routes: List[Field] = []\n     for route in routes:\ndiff --git a/scripts/lint.sh b/scripts/lint.sh\nindex a00bf655fc7b1..11b59f2b9c175 100755\n--- a/scripts/lint.sh\n+++ b/scripts/lint.sh\n@@ -3,6 +3,6 @@\n set -e\n set -x\n \n-mypy fastapi --disallow-untyped-defs --follow-imports=skip\n+mypy fastapi --disallow-untyped-defs\n black fastapi tests --check\n isort --multi-line=3 --trailing-comma --force-grid-wrap=0 --combine-as --line-width 88 --recursive --check-only --thirdparty fastapi fastapi tests\n", "test_patch": "", "problem_statement": "Generic typehints causing mypy errors\n**Describe the bug**\r\nThe following code results in a mypy error\r\n```python\r\nfrom typing import List\r\nfrom fastapi import FastAPI, params\r\n\r\ndef admin_dependencies() -> List[params.Security]:\r\n    return []\r\n\r\napp = FastAPI()\r\n\r\n@app.get(\"/\", dependencies=admin_dependencies())\r\ndef admin_endpoint():\r\n    pass\r\n```\r\nThe mypy error is\r\n```\r\nerror: Argument \"dependencies\" to \"get\" of \"FastAPI\" has incompatible\r\n    type \"List[Security]\"; expected \"Optional[List[Depends]]\"\r\n```\r\nThis error is occurring because `List` is invariant. However, if I understand correctly, in this case `dependencies` can be safely type hinted as `Sequence`, which is covariant (and would fix the mypy error). This specific case (for `dependencies`) occurs in a few places that could probably be replaced.\r\n\r\nThis is probably also the case for the `routes` argument to `FastAPI`.\r\n\n", "hints_text": "Thanks for the report. I'll check it soon.", "created_at": "2019-06-27T18:39:28Z"}
{"repo": "fastapi/fastapi", "pull_number": 320, "instance_id": "fastapi__fastapi-320", "issue_numbers": ["307"], "base_commit": "c26f1760d474f8240d2311ae16a9f17c9fbbae9b", "patch": "diff --git a/Pipfile b/Pipfile\nindex 6cc3fbb3cf988..83f8954dc0901 100644\n--- a/Pipfile\n+++ b/Pipfile\n@@ -26,7 +26,7 @@ uvicorn = \"*\"\n \n [packages]\n starlette = \"==0.12.0\"\n-pydantic = \"==0.26.0\"\n+pydantic = \"==0.28.0\"\n databases = {extras = [\"sqlite\"],version = \"*\"}\n hypercorn = \"*\"\n \ndiff --git a/Pipfile.lock b/Pipfile.lock\nindex 83b7f94c346ba..07cc1a97d4b61 100644\n--- a/Pipfile.lock\n+++ b/Pipfile.lock\n@@ -1,7 +1,7 @@\n {\n     \"_meta\": {\n         \"hash\": {\n-            \"sha256\": \"4a33b47e814fa75533548874ffadbc6163b3058db4d1615ff633512366d72ccb\"\n+            \"sha256\": \"14f3b2d3a0457913244d4dc96fbf18ed356fbb43fbd10eae043270531afa61bb\"\n         },\n         \"pipfile-spec\": 6,\n         \"requires\": {\n@@ -56,10 +56,10 @@\n         },\n         \"h11\": {\n             \"hashes\": [\n-                \"sha256:acca6a44cb52a32ab442b1779adf0875c443c689e9e028f8d831a3769f9c5208\",\n-                \"sha256:f2b1ca39bfed357d1f19ac732913d5f9faa54a5062eca7d2ec3a916cfb7ae4c7\"\n+                \"sha256:33d4bca7be0fa039f4e84d50ab00531047e53d6ee8ffbc83501ea602c169cae1\",\n+                \"sha256:4bc6d6a1238b7615b266ada57e0618568066f57dd6fa967d1290ec9309b2f2f1\"\n             ],\n-            \"version\": \"==0.8.1\"\n+            \"version\": \"==0.9.0\"\n         },\n         \"h2\": {\n             \"hashes\": [\n@@ -113,11 +113,15 @@\n         },\n         \"pydantic\": {\n             \"hashes\": [\n-                \"sha256:b72e0df2463cee746cf42639845d4106c19f30136375e779352d710e69617731\",\n-                \"sha256:dab99d3070e040b8b2e987dfbe237350ab92d5d57a22d4e0e268ede2d85c7964\"\n+                \"sha256:3aafa1b58181c53a8e2971dc3c6f45945ddd18192b6f9c8e17f5ef2adcdf3987\",\n+                \"sha256:60fe5aa17ecb5ba949e7e1e1f9b9500dae780d6c79c798bfd78ac5dd9f9d9517\",\n+                \"sha256:92e4fb2917e4837e53edfee9f99c9075c152f9b9fe2b19d047b8fb25ed9bc089\",\n+                \"sha256:98c5faf742baee5cbbe9ff609829df6ff4234863c4a992f8d46679df4d68aeab\",\n+                \"sha256:bc4a051b81f31597efc96b4bf6a3aa75ea95ca0a87c4666ad5638be373e0c66a\",\n+                \"sha256:d3d29768ae85c1333da5d10cbe793c6a01dcb1ec8ff86f1fbe2c588089bc11ea\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==0.26.0\"\n+            \"version\": \"==0.28.0\"\n         },\n         \"pytoml\": {\n             \"hashes\": [\n@@ -127,9 +131,9 @@\n         },\n         \"sqlalchemy\": {\n             \"hashes\": [\n-                \"sha256:91c54ca8345008fceaec987e10924bf07dcab36c442925357e5a467b36a38319\"\n+                \"sha256:c30925d60af95443458ebd7525daf791f55762b106049ae71e18f8dd58084c2f\"\n             ],\n-            \"version\": \"==1.3.3\"\n+            \"version\": \"==1.3.5\"\n         },\n         \"starlette\": {\n             \"hashes\": [\n@@ -148,10 +152,10 @@\n         },\n         \"wsproto\": {\n             \"hashes\": [\n-                \"sha256:55c3da870460e8838b2fbe4d10f3accc0cea3a13d5e8dbbdc6da5d537d6d44dc\",\n-                \"sha256:c7f35e0af250b9f25583b090039eb2159a079fbe71b7daf86cc3ddcd2f3a70b3\"\n+                \"sha256:2b870f5b5b4a6d23dce080a4ee1cbb119b2378f82593bd6d66ae2cbd72a7c0ad\",\n+                \"sha256:ed222c812aaea55d72d18a87df429cfd602e15b6c992a07a53b495858f083a14\"\n             ],\n-            \"version\": \"==0.14.0\"\n+            \"version\": \"==0.14.1\"\n         }\n     },\n     \"develop\": {\n@@ -215,10 +219,10 @@\n         },\n         \"certifi\": {\n             \"hashes\": [\n-                \"sha256:59b7658e26ca9c7339e00f8f4636cdfe59d34fa37b9b04f6f9e9926b3cece1a5\",\n-                \"sha256:b26104d6835d1f5e49452a26eb2ff87fe7090b89dfcaee5ea2212697e1e1d7ae\"\n+                \"sha256:046832c04d4e752f37383b628bc601a7ea7211496b4638f6514d0e5b9acc4939\",\n+                \"sha256:945e3ba63a0b9f577b1395204e13c3a231f9bc0223888be653286534e5873695\"\n             ],\n-            \"version\": \"==2019.3.9\"\n+            \"version\": \"==2019.6.16\"\n         },\n         \"chardet\": {\n             \"hashes\": [\n@@ -327,10 +331,16 @@\n         },\n         \"h11\": {\n             \"hashes\": [\n-                \"sha256:acca6a44cb52a32ab442b1779adf0875c443c689e9e028f8d831a3769f9c5208\",\n-                \"sha256:f2b1ca39bfed357d1f19ac732913d5f9faa54a5062eca7d2ec3a916cfb7ae4c7\"\n+                \"sha256:33d4bca7be0fa039f4e84d50ab00531047e53d6ee8ffbc83501ea602c169cae1\",\n+                \"sha256:4bc6d6a1238b7615b266ada57e0618568066f57dd6fa967d1290ec9309b2f2f1\"\n+            ],\n+            \"version\": \"==0.9.0\"\n+        },\n+        \"htmlmin\": {\n+            \"hashes\": [\n+                \"sha256:50c1ef4630374a5d723900096a961cff426dff46b48f34d194a81bbe14eca178\"\n             ],\n-            \"version\": \"==0.8.1\"\n+            \"version\": \"==0.1.12\"\n         },\n         \"httptools\": {\n             \"hashes\": [\n@@ -345,6 +355,13 @@\n             ],\n             \"version\": \"==2.8\"\n         },\n+        \"importlib-metadata\": {\n+            \"hashes\": [\n+                \"sha256:6dfd58dfe281e8d240937776065dd3624ad5469c835248219bd16cf2e12dbeb7\",\n+                \"sha256:cb6ee23b46173539939964df59d3d72c3e0c1b5d54b84f1d8a7e912fe43612db\"\n+            ],\n+            \"version\": \"==0.18\"\n+        },\n         \"ipykernel\": {\n             \"hashes\": [\n                 \"sha256:346189536b88859937b5f4848a6fd85d1ad0729f01724a411de5cae9b618819c\",\n@@ -396,6 +413,12 @@\n             ],\n             \"version\": \"==2.10.1\"\n         },\n+        \"jsmin\": {\n+            \"hashes\": [\n+                \"sha256:b6df99b2cd1c75d9d342e4335b535789b8da9107ec748212706ef7bbe5c2553b\"\n+            ],\n+            \"version\": \"==2.2.2\"\n+        },\n         \"jsonschema\": {\n             \"hashes\": [\n                 \"sha256:0c0a81564f181de3212efa2d17de1910f8732fa1b71c42266d983cd74304e20d\",\n@@ -511,11 +534,18 @@\n         },\n         \"mkdocs-material\": {\n             \"hashes\": [\n-                \"sha256:1c39b6af13a900d9f47ab2b8ac67b3258799f4570b552573e9d6868ad6a438e9\",\n-                \"sha256:22073941cff7176e810b719aced6a90381e64a96d346b8a6803a06b7192b7ad5\"\n+                \"sha256:451b949f6c8f0750b937f805e14c5bd40b81c5ff829072a74896efeaa6e8567f\",\n+                \"sha256:8b5a042a0f2b54e631668e33d6a0777ff2c68331656066e26223c47159a255e1\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==4.3.0\"\n+            \"version\": \"==4.4.0\"\n+        },\n+        \"mkdocs-minify-plugin\": {\n+            \"hashes\": [\n+                \"sha256:3000a5069dd0f42f56a8aaf7fd5ea1222c67487949617e39585d6b6434b074b6\",\n+                \"sha256:d54fdd5be6843dd29fd7af2f7fdd20a9eb4db46f1f6bed914e03b2f58d2d488e\"\n+            ],\n+            \"version\": \"==0.2.1\"\n         },\n         \"more-itertools\": {\n             \"hashes\": [\n@@ -570,6 +600,13 @@\n             ],\n             \"version\": \"==5.7.8\"\n         },\n+        \"packaging\": {\n+            \"hashes\": [\n+                \"sha256:0c98a5d0be38ed775798ece1b9727178c4469d9c3b4ada66e8e6b7849f8732af\",\n+                \"sha256:9e1cbf8c12b1f1ce0bb5344b8d7ecf66a6f8a6e91bcb0c84593ed6d3ab5c4ab3\"\n+            ],\n+            \"version\": \"==19.0\"\n+        },\n         \"pandocfilters\": {\n             \"hashes\": [\n                 \"sha256:b3dd70e169bb5449e6bc6ff96aea89c5eea8c5f6ab5e207fc2f521a2cf4a0da9\"\n@@ -600,16 +637,16 @@\n         },\n         \"pluggy\": {\n             \"hashes\": [\n-                \"sha256:25a1bc1d148c9a640211872b4ff859878d422bccb59c9965e04eed468a0aa180\",\n-                \"sha256:964cedd2b27c492fbf0b7f58b3284a09cf7f99b0f715941fb24a439b3af1bd1a\"\n+                \"sha256:0825a152ac059776623854c1543d65a4ad408eb3d33ee114dff91e57ec6ae6fc\",\n+                \"sha256:b9817417e95936bf75d85d3f8767f7df6cdde751fc40aed3bb3074cbcb77757c\"\n             ],\n-            \"version\": \"==0.11.0\"\n+            \"version\": \"==0.12.0\"\n         },\n         \"prometheus-client\": {\n             \"hashes\": [\n-                \"sha256:1b38b958750f66f208bcd9ab92a633c0c994d8859c831f7abc1f46724fcee490\"\n+                \"sha256:ee0c90350595e4a9f36591f291e6f9933246ea67d7cd7d1d6139a9781b14eaae\"\n             ],\n-            \"version\": \"==0.6.0\"\n+            \"version\": \"==0.7.0\"\n         },\n         \"prompt-toolkit\": {\n             \"hashes\": [\n@@ -650,10 +687,10 @@\n         },\n         \"pygments\": {\n             \"hashes\": [\n-                \"sha256:31cba6ffb739f099a85e243eff8cb717089fdd3c7300767d9fc34cb8e1b065f5\",\n-                \"sha256:5ad302949b3c98dd73f8d9fcdc7e9cb592f120e32a18e23efd7f3dc51194472b\"\n+                \"sha256:71e430bc85c88a430f000ac1d9b331d2407f681d6f6aec95e8bcfbc3df5b0127\",\n+                \"sha256:881c4c157e45f30af185c1ffe8d549d48ac9127433f2c380c24b84572ad66297\"\n             ],\n-            \"version\": \"==2.4.0\"\n+            \"version\": \"==2.4.2\"\n         },\n         \"pymdown-extensions\": {\n             \"hashes\": [\n@@ -662,6 +699,13 @@\n             ],\n             \"version\": \"==6.0\"\n         },\n+        \"pyparsing\": {\n+            \"hashes\": [\n+                \"sha256:1873c03321fc118f4e9746baf201ff990ceb915f433f23b395f5580d1840cb2a\",\n+                \"sha256:9b6323ef4ab914af344ba97510e966d64ba91055d6b9afa6b30799340e89cc03\"\n+            ],\n+            \"version\": \"==2.4.0\"\n+        },\n         \"pyrsistent\": {\n             \"hashes\": [\n                 \"sha256:16692ee739d42cf5e39cef8d27649a8c1fdb7aa99887098f1460057c5eb75c3a\"\n@@ -670,11 +714,11 @@\n         },\n         \"pytest\": {\n             \"hashes\": [\n-                \"sha256:1a8aa4fa958f8f451ac5441f3ac130d9fc86ea38780dd2715e6d5c5882700b24\",\n-                \"sha256:b8bf138592384bd4e87338cb0f256bf5f615398a649d4bd83915f0e4047a5ca6\"\n+                \"sha256:4a784f1d4f2ef198fe9b7aef793e9fa1a3b2f84e822d9b3a64a181293a572d45\",\n+                \"sha256:926855726d8ae8371803f7b2e6ec0a69953d9c6311fa7c3b6c1b929ff92d27da\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==4.5.0\"\n+            \"version\": \"==4.6.3\"\n         },\n         \"pytest-cov\": {\n             \"hashes\": [\n@@ -706,19 +750,19 @@\n         },\n         \"pyyaml\": {\n             \"hashes\": [\n-                \"sha256:1adecc22f88d38052fb787d959f003811ca858b799590a5eaa70e63dca50308c\",\n-                \"sha256:436bc774ecf7c103814098159fbb84c2715d25980175292c648f2da143909f95\",\n-                \"sha256:460a5a4248763f6f37ea225d19d5c205677d8d525f6a83357ca622ed541830c2\",\n-                \"sha256:5a22a9c84653debfbf198d02fe592c176ea548cccce47553f35f466e15cf2fd4\",\n-                \"sha256:7a5d3f26b89d688db27822343dfa25c599627bc92093e788956372285c6298ad\",\n-                \"sha256:9372b04a02080752d9e6f990179a4ab840227c6e2ce15b95e1278456664cf2ba\",\n-                \"sha256:a5dcbebee834eaddf3fa7366316b880ff4062e4bcc9787b78c7fbb4a26ff2dd1\",\n-                \"sha256:aee5bab92a176e7cd034e57f46e9df9a9862a71f8f37cad167c6fc74c65f5b4e\",\n-                \"sha256:c51f642898c0bacd335fc119da60baae0824f2cde95b0330b56c0553439f0673\",\n-                \"sha256:c68ea4d3ba1705da1e0d85da6684ac657912679a649e8868bd850d2c299cce13\",\n-                \"sha256:e23d0cc5299223dcc37885dae624f382297717e459ea24053709675a976a3e19\"\n+                \"sha256:57acc1d8533cbe51f6662a55434f0dbecfa2b9eaf115bede8f6fd00115a0c0d3\",\n+                \"sha256:588c94b3d16b76cfed8e0be54932e5729cc185caffaa5a451e7ad2f7ed8b4043\",\n+                \"sha256:68c8dd247f29f9a0d09375c9c6b8fdc64b60810ebf07ba4cdd64ceee3a58c7b7\",\n+                \"sha256:70d9818f1c9cd5c48bb87804f2efc8692f1023dac7f1a1a5c61d454043c1d265\",\n+                \"sha256:86a93cccd50f8c125286e637328ff4eef108400dd7089b46a7be3445eecfa391\",\n+                \"sha256:a0f329125a926876f647c9fa0ef32801587a12328b4a3c741270464e3e4fa778\",\n+                \"sha256:a3c252ab0fa1bb0d5a3f6449a4826732f3eb6c0270925548cac342bc9b22c225\",\n+                \"sha256:b4bb4d3f5e232425e25dda21c070ce05168a786ac9eda43768ab7f3ac2770955\",\n+                \"sha256:cd0618c5ba5bda5f4039b9398bb7fb6a317bb8298218c3de25c47c4740e4b95e\",\n+                \"sha256:ceacb9e5f8474dcf45b940578591c7f3d960e82f926c707788a570b51ba59190\",\n+                \"sha256:fe6a88094b64132c4bb3b631412e90032e8cfe9745a58370462240b8cb7553cd\"\n             ],\n-            \"version\": \"==5.1\"\n+            \"version\": \"==5.1.1\"\n         },\n         \"pyzmq\": {\n             \"hashes\": [\n@@ -752,10 +796,10 @@\n         },\n         \"qtconsole\": {\n             \"hashes\": [\n-                \"sha256:a667558c7b1e1442a2e5bcef1686c55e096efd0b58d8b2a0a8415f4579991ee3\",\n-                \"sha256:fdfc6002d9d2834c88f9c92e0f6f590284ff3740fa53016f188a62d58bcca6d8\"\n+                \"sha256:4af84facdd6f00a6b9b2927255f717bb23ae4b7a20ba1d9ef0a5a5a8dbe01ae2\",\n+                \"sha256:60d61d93f7d67ba2b265c6d599d413ffec21202fec999a952f658ff3a73d252b\"\n             ],\n-            \"version\": \"==4.4.4\"\n+            \"version\": \"==4.5.1\"\n         },\n         \"requests\": {\n             \"hashes\": [\n@@ -781,9 +825,9 @@\n         },\n         \"sqlalchemy\": {\n             \"hashes\": [\n-                \"sha256:91c54ca8345008fceaec987e10924bf07dcab36c442925357e5a467b36a38319\"\n+                \"sha256:c30925d60af95443458ebd7525daf791f55762b106049ae71e18f8dd58084c2f\"\n             ],\n-            \"version\": \"==1.3.3\"\n+            \"version\": \"==1.3.5\"\n         },\n         \"terminado\": {\n             \"hashes\": [\n@@ -858,17 +902,17 @@\n         },\n         \"urllib3\": {\n             \"hashes\": [\n-                \"sha256:a53063d8b9210a7bdec15e7b272776b9d42b2fd6816401a0d43006ad2f9902db\",\n-                \"sha256:d363e3607d8de0c220d31950a8f38b18d5ba7c0830facd71a1c6b1036b7ce06c\"\n+                \"sha256:b246607a25ac80bedac05c6f282e3cdaf3afb65420fd024ac94435cabe6e18d1\",\n+                \"sha256:dbe59173209418ae49d485b87d1681aefa36252ee85884c31346debd19463232\"\n             ],\n-            \"version\": \"==1.25.2\"\n+            \"version\": \"==1.25.3\"\n         },\n         \"uvicorn\": {\n             \"hashes\": [\n-                \"sha256:c10da7a54a6552279870900c881a2f1726314e2dd6270d4d3f9251683c643783\"\n+                \"sha256:9114d22a569552258a3f2bf0da57c328049c3dfd428a88230cdf0966229ef180\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==0.7.1\"\n+            \"version\": \"==0.7.2\"\n         },\n         \"uvloop\": {\n             \"hashes\": [\n@@ -931,6 +975,13 @@\n                 \"sha256:fa618be8435447a017fd1bf2c7ae922d0428056cfc7449f7a8641edf76b48265\"\n             ],\n             \"version\": \"==3.4.2\"\n+        },\n+        \"zipp\": {\n+            \"hashes\": [\n+                \"sha256:8c1019c6aad13642199fbe458275ad6a84907634cc9f0989877ccc4a2840139d\",\n+                \"sha256:ca943a7e809cc12257001ccfb99e3563da9af99d52f261725e96dfe0f9275bc3\"\n+            ],\n+            \"version\": \"==0.5.1\"\n         }\n     }\n }\ndiff --git a/fastapi/utils.py b/fastapi/utils.py\nindex 530b5eca677cb..76661f9f6a655 100644\n--- a/fastapi/utils.py\n+++ b/fastapi/utils.py\n@@ -28,7 +28,7 @@ def get_flat_models_from_routes(\n             if route.response_fields:\n                 responses_from_routes.extend(route.response_fields.values())\n     flat_models = get_flat_models_from_fields(\n-        body_fields_from_routes + responses_from_routes\n+        body_fields_from_routes + responses_from_routes, known_models=set()\n     )\n     return flat_models\n \ndiff --git a/pyproject.toml b/pyproject.toml\nindex 8700b0ef33062..fca05a81a93ef 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -20,7 +20,7 @@ classifiers = [\n ]\n requires = [\n     \"starlette >=0.11.1,<=0.12.0\",\n-    \"pydantic >=0.26,<=0.26.0\"\n+    \"pydantic >=0.28,<=0.28.0\"\n ]\n description-file = \"README.md\"\n requires-python = \">=3.6\"\n", "test_patch": "diff --git a/tests/test_tutorial/test_query_params_str_validations/test_tutorial013.py b/tests/test_tutorial/test_query_params_str_validations/test_tutorial013.py\nindex f7a2a8a12980e..6606e66b1191a 100644\n--- a/tests/test_tutorial/test_query_params_str_validations/test_tutorial013.py\n+++ b/tests/test_tutorial/test_query_params_str_validations/test_tutorial013.py\n@@ -31,7 +31,7 @@\n                 \"parameters\": [\n                     {\n                         \"required\": False,\n-                        \"schema\": {\"title\": \"Q\", \"type\": \"array\"},\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"array\", \"items\": {}},\n                         \"name\": \"q\",\n                         \"in\": \"query\",\n                     }\n", "problem_statement": "eta on pydantic update to 0.28\nreally need your latest PR \r\nit shoud solve recurring issues with sqlalchemy to pydantic mapping\r\nthank you !\n", "hints_text": "Don't take it as an official response but I could be any momment this week", "created_at": "2019-06-18T00:13:14Z"}
{"repo": "fastapi/fastapi", "pull_number": 241, "instance_id": "fastapi__fastapi-241", "issue_numbers": ["238"], "base_commit": "3cf92a156ce36c3127366edac3b09c89fdb3a195", "patch": "diff --git a/fastapi/applications.py b/fastapi/applications.py\nindex e4b9ab967be1b..59e094436fbf1 100644\n--- a/fastapi/applications.py\n+++ b/fastapi/applications.py\n@@ -9,7 +9,7 @@\n from starlette.exceptions import ExceptionMiddleware, HTTPException\n from starlette.middleware.errors import ServerErrorMiddleware\n from starlette.requests import Request\n-from starlette.responses import JSONResponse, Response\n+from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n \n \n@@ -79,29 +79,28 @@ def openapi(self) -> Dict:\n \n     def setup(self) -> None:\n         if self.openapi_url:\n-            self.add_route(\n-                self.openapi_url,\n-                lambda req: JSONResponse(self.openapi()),\n-                include_in_schema=False,\n-            )\n+\n+            async def openapi(req: Request) -> JSONResponse:\n+                return JSONResponse(self.openapi())\n+\n+            self.add_route(self.openapi_url, openapi, include_in_schema=False)\n+            openapi_url = self.openapi_prefix + self.openapi_url\n         if self.openapi_url and self.docs_url:\n-            self.add_route(\n-                self.docs_url,\n-                lambda r: get_swagger_ui_html(\n-                    openapi_url=self.openapi_prefix + self.openapi_url,\n-                    title=self.title + \" - Swagger UI\",\n-                ),\n-                include_in_schema=False,\n-            )\n+\n+            async def swagger_ui_html(req: Request) -> HTMLResponse:\n+                return get_swagger_ui_html(\n+                    openapi_url=openapi_url, title=self.title + \" - Swagger UI\"\n+                )\n+\n+            self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n         if self.openapi_url and self.redoc_url:\n-            self.add_route(\n-                self.redoc_url,\n-                lambda r: get_redoc_html(\n-                    openapi_url=self.openapi_prefix + self.openapi_url,\n-                    title=self.title + \" - ReDoc\",\n-                ),\n-                include_in_schema=False,\n-            )\n+\n+            async def redoc_html(req: Request) -> HTMLResponse:\n+                return get_redoc_html(\n+                    openapi_url=openapi_url, title=self.title + \" - ReDoc\"\n+                )\n+\n+            self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n         self.add_exception_handler(HTTPException, http_exception)\n \n     def add_api_route(\n", "test_patch": "", "problem_statement": "make swagger_ui_html, redoc_html and openapi.json handled by async function?\n**Is your feature request related to a problem? Please describe.**\r\nI add a loop on all my router of my app to check if the handler are all coroutine function to get better performance, but I fount that swagger_ui_html, redoc_html and openapi.json are handled by normal function.\r\n\r\nhttps://github.com/tiangolo/fastapi/blob/56ab106bbbf8054af437821c6683491ca7952c3b/fastapi/applications.py#L80-L86\r\n\r\n**Describe the solution you'd like**\r\n\r\nI'm wondering if its possible to handle these 3 router with async function, as its only a simple `getattr` operator or concat string.\r\n\r\nhttps://github.com/tiangolo/fastapi/blob/56ab106bbbf8054af437821c6683491ca7952c3b/fastapi/applications.py#L78\r\n\r\n```python\r\n    def setup(self) -> None:\r\n        if self.openapi_url:\r\n\r\n            async def openapi_handler(req):\r\n                return JSONResponse(self.openapi())\r\n\r\n            self.add_route(\r\n                self.openapi_url,\r\n                openapi_handler,\r\n                include_in_schema=False,\r\n            )\r\n```\r\n**Describe alternatives you've considered**\r\n\r\nDisable default handlers and I write async handlers by my self to replace inner handlers.\r\n\r\n**Additional context**\r\n\r\nIn `Starlette`, if a handler is not coroutine function, it will be executed by `loop.run_in_executor` . So this could improve performance a litte bit.(In my test, about 2800 r/s to 3200r/s)\r\n\r\n \n", "hints_text": "Nice catch @Trim21 ! I'll fix it.\nIf you don't mind, could I give a PR to fix it?\nOf course! PRs are very welcome.", "created_at": "2019-05-20T09:39:22Z"}
{"repo": "fastapi/fastapi", "pull_number": 160, "instance_id": "fastapi__fastapi-160", "issue_numbers": ["47"], "base_commit": "361fd007775de9a0e796a09f365a985014ee5083", "patch": "diff --git a/Pipfile b/Pipfile\nindex bb2af4dddb9ed..4d4569fafb9fa 100644\n--- a/Pipfile\n+++ b/Pipfile\n@@ -26,7 +26,7 @@ uvicorn = \"*\"\n \n [packages]\n starlette = \"==0.11.1\"\n-pydantic = \"==0.21.0\"\n+pydantic = \"==0.23.0\"\n databases = {extras = [\"sqlite\"],version = \"*\"}\n \n [requires]\ndiff --git a/Pipfile.lock b/Pipfile.lock\nindex 25ff4376bc658..21459b2375c08 100644\n--- a/Pipfile.lock\n+++ b/Pipfile.lock\n@@ -1,7 +1,7 @@\n {\n     \"_meta\": {\n         \"hash\": {\n-            \"sha256\": \"24b3b7b88d3cbe671ddbe296e64c15f8558f0e5d5df977200119872a363aac13\"\n+            \"sha256\": \"02367d250c6327eac80dfcd8e5ccfa49bcdca0332bc757d527c3db27643baa0d\"\n         },\n         \"pipfile-spec\": 6,\n         \"requires\": {\n@@ -56,23 +56,38 @@\n         },\n         \"immutables\": {\n             \"hashes\": [\n-                \"sha256:f958ba15745e30d3a38e3c9fcead8496037135bb21c78c0f925c104abba3a6fa\"\n+                \"sha256:10861f2a2b86139f0c91d5073392d76117f37e84f912dc47c943c23a64008cc7\",\n+                \"sha256:3e23eeb4bc55d57b2a97bef4c1a2891bbb731050b4167c855545797d45e84e45\",\n+                \"sha256:4373876879f147986808f71e6ca02380192a279e8b8d45832f6fed4e7f717562\",\n+                \"sha256:46f9122da033fecf84d7f4c6257aec780f370b20f3ce6bc521702b63ee3d99f7\",\n+                \"sha256:5104db6102e53702af45c6b0af36e45a80970123b11a80c14e0fce48444cdbe3\",\n+                \"sha256:59274bcb631f4fdc9731e9a4a96d16d96b3a17e29fd5e46516518f38406f678f\",\n+                \"sha256:65a9c624e50ca5c50464dbf432996b5c4f056a411bcff5690ef4cab59f913f99\",\n+                \"sha256:b64e0672497b884d21170ca61c693da8488d77f043650efa7911378cbbad0f2c\",\n+                \"sha256:b70655dba00742b033310933066a2202e1cfbbb0f63841b4597cd8787974b242\",\n+                \"sha256:c3d8c238a6f9b60355578579563773348674b6da63c1a0d7394384ed341f3d41\",\n+                \"sha256:cd66bcd11b6a1c1a80fb8d90e25870ff2d5c705ab5eb9666355a33d3fef6ac70\",\n+                \"sha256:d59310fc4f97c1ff8c3660cb98032db266ac0c285a86ca7a512e8e84a95f44c9\",\n+                \"sha256:d71d1c822498646143270580dd6f743bb31ab89ae0ded8b2307c356d3a00f1c0\",\n+                \"sha256:f53da698b42db83cfb1f5073560838051430798c8d8e34a57a27031edbc3041d\",\n+                \"sha256:f958ba15745e30d3a38e3c9fcead8496037135bb21c78c0f925c104abba3a6fa\",\n+                \"sha256:ff95e2aa618eed1a0ef4479938f18f3522c89562b9bbb59d677597c0337569dd\"\n             ],\n             \"version\": \"==0.9\"\n         },\n         \"pydantic\": {\n             \"hashes\": [\n-                \"sha256:93fa585402e7c8c01623ea8af6ca23363e8b4c6a020b7a2de9e99fa29d642d50\",\n-                \"sha256:eb441dd50779347a450494c437db3ecbb13c1f3854497df879662782af516c5c\"\n+                \"sha256:1205cd1213e8acee40a9ad7160b24de74484fd79ec3f09150b255896a3f506ab\",\n+                \"sha256:58b71804e9a6b4e1ccf8b3dbbca8c0f9cf4b494e5bea219a96e2e2ecb5af688e\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==0.21.0\"\n+            \"version\": \"==0.23.0\"\n         },\n         \"sqlalchemy\": {\n             \"hashes\": [\n-                \"sha256:d5432832f91d200c3d8b473a266d59442d825f9ea744c467e68c5d9a9479fbce\"\n+                \"sha256:91c54ca8345008fceaec987e10924bf07dcab36c442925357e5a467b36a38319\"\n             ],\n-            \"version\": \"==1.3.2\"\n+            \"version\": \"==1.3.3\"\n         },\n         \"starlette\": {\n             \"hashes\": [\n@@ -205,10 +220,10 @@\n         },\n         \"defusedxml\": {\n             \"hashes\": [\n-                \"sha256:24d7f2f94f7f3cb6061acb215685e5125fbcdc40a857eff9de22518820b0a4f4\",\n-                \"sha256:702a91ade2968a82beb0db1e0766a6a273f33d4616a6ce8cde475d8e09853b20\"\n+                \"sha256:06d4515a8f8965624d6db922093eb11e77fb8f9a9ebedd1c5d6df5a0fcd0a12c\",\n+                \"sha256:6c0b1461695877ececd6921a6a330e4392790275c5d6e88fc8ea8261445468b1\"\n             ],\n-            \"version\": \"==0.5.0\"\n+            \"version\": \"==0.6.0rc1\"\n         },\n         \"dnspython\": {\n             \"hashes\": [\n@@ -441,11 +456,11 @@\n         },\n         \"mkdocs-material\": {\n             \"hashes\": [\n-                \"sha256:8f0a5217c24bd8635c0bda2a0ee4f91766448e9e3dd6429f1111dd992327345e\",\n-                \"sha256:c2c6ef6b3e3ab4744a45d03a276e1eb106c91abf610d180d148613fd1a525c7c\"\n+                \"sha256:8a572f4b3358b9c0e11af8ae319ba4f3747ebb61e2393734d875133b0d2f7891\",\n+                \"sha256:91210776db541283dd4b7beb5339c190aa69de78ad661aa116a8aa97dd73c803\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==4.1.1\"\n+            \"version\": \"==4.1.2\"\n         },\n         \"more-itertools\": {\n             \"hashes\": [\n@@ -508,7 +523,8 @@\n         },\n         \"parso\": {\n             \"hashes\": [\n-                \"sha256:17cc2d7a945eb42c3569d4564cdf49bde221bc2b552af3eca9c1aad517dcdd33\"\n+                \"sha256:17cc2d7a945eb42c3569d4564cdf49bde221bc2b552af3eca9c1aad517dcdd33\",\n+                \"sha256:2e9574cb12e7112a87253e14e2c380ce312060269d04bd018478a3c92ea9a376\"\n             ],\n             \"version\": \"==0.4.0\"\n         },\n@@ -599,11 +615,11 @@\n         },\n         \"pytest\": {\n             \"hashes\": [\n-                \"sha256:13c5e9fb5ec5179995e9357111ab089af350d788cbc944c628f3cde72285809b\",\n-                \"sha256:f21d2f1fb8200830dcbb5d8ec466a9c9120e20d8b53c7585d180125cce1d297a\"\n+                \"sha256:3773f4c235918987d51daf1db66d51c99fac654c81d6f2f709a046ab446d5e5d\",\n+                \"sha256:b7802283b70ca24d7119b32915efa7c409982f59913c1a6c0640aacf118b95f5\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==4.4.0\"\n+            \"version\": \"==4.4.1\"\n         },\n         \"pytest-cov\": {\n             \"hashes\": [\n@@ -710,9 +726,9 @@\n         },\n         \"sqlalchemy\": {\n             \"hashes\": [\n-                \"sha256:d5432832f91d200c3d8b473a266d59442d825f9ea744c467e68c5d9a9479fbce\"\n+                \"sha256:91c54ca8345008fceaec987e10924bf07dcab36c442925357e5a467b36a38319\"\n             ],\n-            \"version\": \"==1.3.2\"\n+            \"version\": \"==1.3.3\"\n         },\n         \"terminado\": {\n             \"hashes\": [\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 46809810a8fb2..3ae9e45c435b4 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -20,7 +20,7 @@ classifiers = [\n ]\n requires = [\n     \"starlette ==0.11.1\",\n-    \"pydantic >=0.17,<=0.21.0\"\n+    \"pydantic >=0.17,<=0.23.0\"\n ]\n description-file = \"README.md\"\n requires-python = \">=3.6\"\n", "test_patch": "", "problem_statement": "Updating pydantic\n**Is your feature request related to a problem? Please describe.**\r\n\r\nI need the ability to use the Extra.forbid config option to indicate when I have extra values in my pydantic model. This feature landed in v0.19.0 and was fixed/enhanced in v0.20.0. There appears to be one breaking change in v0.20.0 since v0.18.2 (which is what is currently locked for fastapi)\r\n\r\n**Describe the solution you'd like**\r\nI'd like to update to pydantic v0.20.0. I can generate a PR for this, but I'm not sure why you locked it at v0.18.2\r\n\n", "hints_text": "Yes, I'll update it soon. There are a couple breaking changes (mainly in the type definitions).\r\n\r\nIt is pinned because as these packages are still in versions `0.x`, it means that any change could be a breaking change, as we (Starlette, Pydantic, FastAPI, etc) are still all evolving and improving quite quickly.\r\n\r\nBut I'll update it soon.\nCompletely understand the pinning. I don't understand the codebase well enough to do the PR most likely but I'm happy to tilt at this or something else to help out. We are really enjoying using FastAPI.\nI begun a branch on that, I'm not a mypy pro so not sure I should PR an unfinished attempt, if you're interested in looking at it it's on https://github.com/euri10/fastapi/tree/pydantic_0.20.0\r\nI have still some typing issues, I got no tests problems despite the breaking changes listed in pydantic changelog, which I find strange, so my work may be complete crap :drooling_face: \nWould updating this add support for skip_defaults for pydantic models added in 0.20.0 or would this need more changes? I would like to be able to not show null values in my responses.\nIt is updated now, compatible with the latest Pydantic :tada:\r\n\r\nIt's available in version `0.9.0`.\r\n\r\nThanks @euri10, I couldn't see your branch (it gives 404 for some reason). But it's updated now.\r\n\r\n@edrodri2 Nope, because `skip_defaults` must be called in the `dict` and `json` methods, that are called automatically.\r\n\r\nOne option would be to include, apart from a `response_model` parameter, another parameter (maybe something like `model_extra`) with a dict of `kwarg` options to pass to Pydantic's `dict` directly. It would be used internally by FastAPI.\r\n\r\nHow does that sound?", "created_at": "2019-04-15T12:37:58Z"}
{"repo": "fastapi/fastapi", "pull_number": 109, "instance_id": "fastapi__fastapi-109", "issue_numbers": ["101"], "base_commit": "2ddb804940bbcad4ed730b2a910c8fd3c1167127", "patch": "diff --git a/docs/tutorial/response-model.md b/docs/tutorial/response-model.md\nindex 128206a40a8ac..21b885ebbe97f 100644\n--- a/docs/tutorial/response-model.md\n+++ b/docs/tutorial/response-model.md\n@@ -24,6 +24,9 @@ But most importantly:\n \n * Will limit the output data to that of the model. We'll see how that's important below.\n \n+!!! note \"Technical Details\"\n+    The response model is declared in this parameter instead of as a function return type annotation, because the path function may not actually return that response model but rather return a `dict`, database object or some other model, and then use the `response_model` to perform the field limiting and serialization.\n+\n ## Return the same input data\n \n Here we are declaring a `UserIn` model, it will contain a plaintext password:\n", "test_patch": "", "problem_statement": "Why not use the return type annotation for the response_model?\n**Description**\r\n\r\nThis is a very minor question on chosen syntax.  Why not use the return type annotation for the response_model? For example rather than:\r\n\r\n```python\r\n@app.post(\"/items/\", response_model=Item)\r\nasync def create_item(*, item: Item):\r\n    return item\r\n```\r\n\r\nYou could concievably go:\r\n\r\n```python\r\n@app.post(\"/items/\") \r\nasync def create_item(*, item: Item) -> Item:\r\n    return item\r\n```\r\n\r\nwhich just seems like it uses the language facilities better and is a bit more pythonic. There is no real change in feature set, and I am sure i was thought of, but what was the reasoning behind not doing it?\r\n\n", "hints_text": "That was the original idea, but then there was no way to put the status code in the same annotation.\r\n\r\nOr if the status code was there then the response model would have to be the parameter.\r\n\r\nAnd the same with the response description.\r\n\r\nAlso, because in many cases the function doesn't really return an `Item` object but a `dict` (or database object, etc) that is then serialized using that `Item` Pydantic model, users would see type errors, for having a function that declared that it would return an `Item` and it was actually returning a `dict`.\nthanks for the explanation. Maybe add some of that to the docs ? To be honest - I had the same reaction. Working thru the tutorial - you first see query params and body as type inferred from the hints. So it's a little surprising to see response needing to be marked explicitly. The reasons make sense - so a quick note would help clear things up for new users.", "created_at": "2019-03-26T08:02:33Z"}
{"repo": "fastapi/fastapi", "pull_number": 64, "instance_id": "fastapi__fastapi-64", "issue_numbers": ["33"], "base_commit": "c14ec50f7386d43b6a731d9448b6f95fd43381ad", "patch": "diff --git a/docs/async.md b/docs/async.md\nindex 6013d217ea76e..e55fe5fae2dbd 100644\n--- a/docs/async.md\n+++ b/docs/async.md\n@@ -377,6 +377,10 @@ All that is what powers FastAPI (through Starlette) and what makes it have such\n \n When you declare a *path operation function* with normal `def` instead of `async def`, it is run in an external threadpool that is then awaited, instead of being called directly (as it would block the server).\n \n+If you are coming from another async framework that does not work in the way described above and you are used to define trivial compute-only *path operation functions* with plain `def` for a tiny performance gain (about 100 nanoseconds), please note that in **FastAPI** the effect would be quite opposite. In these cases, it's better to use `async def` unless your *path operation functions* use code that performs blocking <abbr title=\"Input/Output: disk reading or writing, network communications.\">IO</abbr>.\n+\n+Still, in both situations, chances are that **FastAPI** will <a href=\"https://fastapi.tiangolo.com/#performance\" target=\"_blank\">still be faster</a> than (or at least comparable to) your previous framework.\n+\n ### Dependencies\n \n The same applies for dependencies. If a dependency is a standard `def` function instead of `async def`, it is run in the external threadpool.\n", "test_patch": "", "problem_statement": "Clarify run_in_threadpool magic\nGood day,\r\n\r\nFirst of all - many thanks for creating this project. Such a relief - you really nailed the proper amount of \"batteries included\". And docs are great - not a given thing for such a young project.\r\n\r\nI'm studying [SQL Database](https://fastapi.tiangolo.com/tutorial/sql-databases/) example where you note that SQLAlchemy is not compatible with async hence you configure path using `def` instead of `async def`. However this example raises and eyebrow because it should block the whole server while database is executing - only that it does not because the [magic](https://github.com/tiangolo/fastapi/blob/5c9c088a2a13e888cdb93eb92d7af72058003397/fastapi/routing.py#L88) you do by running request handlers through threadpool unless they are co-routines.\r\n\r\nWhile this magic is nice convenience, don't you think I can confuse users, particularly those who are less experienced with the whole sync/async co-existence semantics in Python world?\r\n\r\nMy bottom line is that IMHO it worth adding a clear \"Unless you define your request handlers as coroutines FastAPI will run them them in separate thread\" note in the \"SQL Databases\" and \"Concurrency and async / await\" chapters. What do you think?\r\n\r\nMe coming from aiohttp is used to have non-async request handlers for simple methods that don't involve any IO and this magical FastAPI behavior, while useful, would've caused a performance penalty on those methods.\n", "hints_text": "> First of all - many thanks for creating this project. Such a relief - you really nailed the proper amount of \"batteries included\". And docs are great - not a given thing for such a young project.\r\n\r\nThat's great to hear! Thanks :blush: \r\n\r\n> [...] adding a clear \"Unless you define your request handlers as coroutines FastAPI will run them in separate thread\"\r\n\r\nFair point. I'll add it as a \"technical detail\".\r\n\r\n---\r\n\r\nI don't expect a lot of people to deeply understand how this thread-related stuff works, or to need to understand it to be able to use FastAPI.\r\n\r\nBut not making it explicit might be confusing for more experienced developers like you, that can understand the fine details of when to `async` or not.\nDone :heavy_check_mark: \r\n\r\nThe new docs section is here: https://fastapi.tiangolo.com/async/#very-technical-details", "created_at": "2019-03-04T06:57:03Z"}
{"repo": "fastapi/fastapi", "pull_number": 17, "instance_id": "fastapi__fastapi-17", "issue_numbers": ["10"], "base_commit": "014c7df142baf0e5cade2c452edfc0c138fda398", "patch": "diff --git a/Pipfile b/Pipfile\nindex bab8f6a525cb8..5857a08eb0cfd 100644\n--- a/Pipfile\n+++ b/Pipfile\n@@ -20,9 +20,10 @@ autoflake = \"*\"\n email-validator = \"*\"\n ujson = \"*\"\n flake8 = \"*\"\n+python-multipart = \"*\"\n \n [packages]\n-starlette = \"==0.9.10\"\n+starlette = \"==0.10.1\"\n pydantic = \"==0.18.2\"\n \n [requires]\ndiff --git a/Pipfile.lock b/Pipfile.lock\nindex c5346ada3137d..26bf2ffe68f8b 100644\n--- a/Pipfile.lock\n+++ b/Pipfile.lock\n@@ -1,7 +1,7 @@\n {\n     \"_meta\": {\n         \"hash\": {\n-            \"sha256\": \"5a4b88e0267ea4a4eb29f28c32be89f6eecc822758dc9f6d5eab7bcfb2904597\"\n+            \"sha256\": \"20483e725e92e679c4c21ea3ff0043d759c74102b181f16b67908f979f854d5c\"\n         },\n         \"pipfile-spec\": 6,\n         \"requires\": {\n@@ -34,10 +34,10 @@\n         },\n         \"starlette\": {\n             \"hashes\": [\n-                \"sha256:d0f4b621d3aaf035e8cc3f97925a43dc175ccc00b2d6eb694a3a76368c32489e\"\n+                \"sha256:7cc05c33d00db3b2ddfd7516a737544ed0a34c9dd0ced94076f29b581ce4f532\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==0.9.10\"\n+            \"version\": \"==0.10.1\"\n         }\n     },\n     \"develop\": {\n@@ -156,10 +156,10 @@\n         },\n         \"decorator\": {\n             \"hashes\": [\n-                \"sha256:2c51dff8ef3c447388fe5e4453d24a2bf128d3a4c32af3fabef1f01c6851ab82\",\n-                \"sha256:c39efa13fbdeb4506c476c9b3babf6a718da943dab7811c206005a4a956c080c\"\n+                \"sha256:33cd704aea07b4c28b3eb2c97d288a06918275dac0ecebdaf1bc8a48d98adb9e\",\n+                \"sha256:cabb249f4710888a2fc0e13e9a16c343d932033718ff62e1e9bc93a9d3a9122b\"\n             ],\n-            \"version\": \"==4.3.0\"\n+            \"version\": \"==4.3.2\"\n         },\n         \"defusedxml\": {\n             \"hashes\": [\n@@ -199,11 +199,11 @@\n         },\n         \"flake8\": {\n             \"hashes\": [\n-                \"sha256:6a35f5b8761f45c5513e3405f110a86bea57982c3b75b766ce7b65217abe1670\",\n-                \"sha256:c01f8a3963b3571a8e6bd7a4063359aff90749e160778e03817cd9b71c9e07d2\"\n+                \"sha256:09b9bb539920776da542e67a570a5df96ff933c9a08b62cfae920bcc789e4383\",\n+                \"sha256:e0f8cd519cfc0072c0ee31add5def09d2b3ef6040b34dc426445c3af9b02163c\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==3.6.0\"\n+            \"version\": \"==3.7.4\"\n         },\n         \"flit\": {\n             \"hashes\": [\n@@ -274,10 +274,10 @@\n         },\n         \"jsonschema\": {\n             \"hashes\": [\n-                \"sha256:3eae63135c4a2cd15ecfd1424494494be77bd8a27014c44c8c2343e61d908770\",\n-                \"sha256:8ba4f6c03b9db02e51f4a21579b7b0364b7c174361998888fb5d18fab4ed73f1\"\n+                \"sha256:683fe7ed58763ea0be572de5aad47cd3cc1297640916f9a8ccd222b287da7d2f\",\n+                \"sha256:b42d7a292addb57370e6260bcbadb77e00a899fe6ec998c453f45893c41c658b\"\n             ],\n-            \"version\": \"==3.0.0b1\"\n+            \"version\": \"==3.0.0b3\"\n         },\n         \"jupyter\": {\n             \"hashes\": [\n@@ -387,11 +387,11 @@\n         },\n         \"mkdocs-material\": {\n             \"hashes\": [\n-                \"sha256:524debb6ee8ee89cee08886f2a67c3c3875c0ee9579c598d7448cbd2607cd3b7\",\n-                \"sha256:62ae84082fa9f077c86b7db63e7bedf392005041b451defc850f8d0887a11e91\"\n+                \"sha256:4b4af83c704d2bab41be3a5228e800a5e1157003368fbf548d95073ce19e0f61\",\n+                \"sha256:86c0042c803586985bf79c99962ebd4644c3f0ff095d5df541f09fa48f5b62cc\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==3.2.0\"\n+            \"version\": \"==3.3.0\"\n         },\n         \"more-itertools\": {\n             \"hashes\": [\n@@ -445,10 +445,10 @@\n         },\n         \"parso\": {\n             \"hashes\": [\n-                \"sha256:35704a43a3c113cce4de228ddb39aab374b8004f4f2407d070b6a2ca784ce8a2\",\n-                \"sha256:895c63e93b94ac1e1690f5fdd40b65f07c8171e3e53cbd7793b5b96c0e0a7f24\"\n+                \"sha256:4b8f9ed80c3a4a3191aa3261505d868aa552dd25649cb13a7d73b6b7315edf2d\",\n+                \"sha256:5a120be2e8863993b597f1c0437efca799e90e0793c98ae5d4e34ebd00140e31\"\n             ],\n-            \"version\": \"==0.3.1\"\n+            \"version\": \"==0.3.2\"\n         },\n         \"pexpect\": {\n             \"hashes\": [\n@@ -480,11 +480,11 @@\n         },\n         \"prompt-toolkit\": {\n             \"hashes\": [\n-                \"sha256:c1d6aff5252ab2ef391c2fe498ed8c088066f66bc64a8d5c095bbf795d9fec34\",\n-                \"sha256:d4c47f79b635a0e70b84fdb97ebd9a274203706b1ee5ed44c10da62755cf3ec9\",\n-                \"sha256:fd17048d8335c1e6d5ee403c3569953ba3eb8555d710bfc548faf0712666ea39\"\n+                \"sha256:88002cc618cacfda8760c4539e76c3b3f148ecdb7035a3d422c7ecdc90c2a3ba\",\n+                \"sha256:c6655a12e9b08edb8cf5aeab4815fd1e1bdea4ad73d3bbf269cf2e0c4eb75d5e\",\n+                \"sha256:df5835fb8f417aa55e5cafadbaeb0cf630a1e824aad16989f9f0493e679ec010\"\n             ],\n-            \"version\": \"==2.0.7\"\n+            \"version\": \"==2.0.8\"\n         },\n         \"ptyprocess\": {\n             \"hashes\": [\n@@ -503,17 +503,17 @@\n         },\n         \"pycodestyle\": {\n             \"hashes\": [\n-                \"sha256:cbc619d09254895b0d12c2c691e237b2e91e9b2ecf5e84c26b35400f93dcfb83\",\n-                \"sha256:cbfca99bd594a10f674d0cd97a3d802a1fdef635d4361e1a2658de47ed261e3a\"\n+                \"sha256:95a2219d12372f05704562a14ec30bc76b05a5b297b21a5dfe3f6fac3491ae56\",\n+                \"sha256:e40a936c9a450ad81df37f549d676d127b1b66000a6c500caa2b085bc0ca976c\"\n             ],\n-            \"version\": \"==2.4.0\"\n+            \"version\": \"==2.5.0\"\n         },\n         \"pyflakes\": {\n             \"hashes\": [\n-                \"sha256:9a7662ec724d0120012f6e29d6248ae3727d821bba522a0e6b356eff19126a49\",\n-                \"sha256:f661252913bc1dbe7fcfcbf0af0db3f42ab65aabd1a6ca68fe5d466bace94dae\"\n+                \"sha256:5e8c00e30c464c99e0b501dc160b13a14af7f27d4dffb529c556e30a159e231d\",\n+                \"sha256:f277f9ca3e55de669fba45b7393a1449009cff5a37d1af10ebb76c52765269cd\"\n             ],\n-            \"version\": \"==2.0.0\"\n+            \"version\": \"==2.1.0\"\n         },\n         \"pygments\": {\n             \"hashes\": [\n@@ -537,11 +537,11 @@\n         },\n         \"pytest\": {\n             \"hashes\": [\n-                \"sha256:41568ea7ecb4a68d7f63837cf65b92ce8d0105e43196ff2b26622995bb3dc4b2\",\n-                \"sha256:c3c573a29d7c9547fb90217ece8a8843aa0c1328a797e200290dc3d0b4b823be\"\n+                \"sha256:65aeaa77ae87c7fc95de56285282546cfa9c886dc8e5dc78313db1c25e21bc07\",\n+                \"sha256:6ac6d467d9f053e95aaacd79f831dbecfe730f419c6c7022cb316b365cd9199d\"\n             ],\n             \"index\": \"pypi\",\n-            \"version\": \"==4.1.1\"\n+            \"version\": \"==4.2.0\"\n         },\n         \"pytest-cov\": {\n             \"hashes\": [\n@@ -558,6 +558,13 @@\n             ],\n             \"version\": \"==2.7.5\"\n         },\n+        \"python-multipart\": {\n+            \"hashes\": [\n+                \"sha256:f7bb5f611fc600d15fa47b3974c8aa16e93724513b49b5f95c81e6624c83fa43\"\n+            ],\n+            \"index\": \"pypi\",\n+            \"version\": \"==0.0.5\"\n+        },\n         \"pytoml\": {\n             \"hashes\": [\n                 \"sha256:ca2d0cb127c938b8b76a9a0d0f855cf930c1d50cc3a0af6d3595b566519a1013\"\ndiff --git a/fastapi/routing.py b/fastapi/routing.py\nindex 0c9334ba59cce..2c8d262e0c985 100644\n--- a/fastapi/routing.py\n+++ b/fastapi/routing.py\n@@ -18,7 +18,7 @@\n from starlette.formparsers import UploadFile\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n-from starlette.routing import get_name, request_response\n+from starlette.routing import compile_path, get_name, request_response\n from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n \n@@ -149,9 +149,7 @@ def __init__(\n         self.include_in_schema = include_in_schema\n         self.content_type = content_type\n \n-        self.path_regex, self.path_format, self.param_convertors = self.compile_path(\n-            path\n-        )\n+        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n         assert inspect.isfunction(endpoint) or inspect.ismethod(\n             endpoint\n         ), f\"An endpoint must be a function or method\"\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 5c16e6fa4daae..e788fbf53f881 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -19,7 +19,7 @@ classifiers = [\n     \"Topic :: Internet :: WWW/HTTP :: HTTP Servers\",\n ]\n requires = [\n-    \"starlette >=0.9.7,<0.9.11\",\n+    \"starlette >=0.9.11,<=0.10.1\",\n     \"pydantic >=0.17,<=0.18.2\"\n ]\n description-file = \"README.md\"\n", "test_patch": "", "problem_statement": "starlette update breaks routing\n[starlette 0.9.11](https://pypi.org/project/starlette/0.9.11/) breaks fastapi routing\r\nI'm currently working around this by enforcing starlette==0.9.10\n", "hints_text": "Thanks for the report! I'll check it as soon as I get to my laptop.\nIt should now be fixed in the latest version `0.1.18`. The change is only pinning the dependencies so FastAPI is not broken, it should work now.\r\n\r\nThe next step will be to actually update FastAPI's code to be compatible with the latest changes in Starlette.", "created_at": "2019-01-30T20:16:49Z"}
